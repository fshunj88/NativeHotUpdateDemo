(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/Script/src/GameLogic.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'a87360wp7lAKrqgHEx1sURR', 'GameLogic', __filename);
// Script/src/GameLogic.js

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = undefined && undefined.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
    }for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }return r;
};
var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ShareType;
(function (ShareType) {
    ShareType[ShareType["SHARE_NONE"] = 0] = "SHARE_NONE";
    ShareType[ShareType["SHARE_WECHAT"] = 1] = "SHARE_WECHAT";
    ShareType[ShareType["SHARE_FACEBOOK"] = 2] = "SHARE_FACEBOOK";
})(ShareType || (ShareType = {}));
var DebugSharePlatform = function () {
    function DebugSharePlatform() {}
    DebugSharePlatform.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    DebugSharePlatform.prototype.enableShareMenu = function (b, title, image, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    DebugSharePlatform.prototype.shareAppMsg = function (title, image, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    DebugSharePlatform.prototype.getShareType = function () {
        return ShareType.SHARE_NONE;
    };
    DebugSharePlatform.prototype.getShareLink = function () {
        return "";
    };
    return DebugSharePlatform;
}();
var DebugRecorderPlatform = function () {
    function DebugRecorderPlatform() {
        this.isRealTimeRecord = false;
        this.hasRecordToShare = false;
    }
    DebugRecorderPlatform.prototype.startRecord = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, false];
            });
        });
    };
    DebugRecorderPlatform.prototype.stopRecord = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, false];
            });
        });
    };
    DebugRecorderPlatform.prototype.shareRecord = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, false];
            });
        });
    };
    return DebugRecorderPlatform;
}();
if (!window.sharePlatform) {
    window.sharePlatform = new DebugSharePlatform();
}
if (window.recorderPlatform) {
    window.recorderPlatform = new DebugRecorderPlatform();
}
var Core;
(function (Core) {
    var DeviceUtils = function () {
        function DeviceUtils() {}
        DeviceUtils.isHtml5 = function () {
            return cc.sys.isBrowser;
        };
        DeviceUtils.isNative = function () {
            return cc.sys.isNative;
        };
        DeviceUtils.isMiniGame = function () {
            return cc.sys.platform == cc.sys.WECHAT_GAME;
        };
        DeviceUtils.isWXGame = function () {
            return cc.sys.platform == cc.sys.WECHAT_GAME && !DeviceUtils.isQQPlay() && !DeviceUtils.isTTGame();
        };
        DeviceUtils.isQQPlay = function () {
            return false;
        };
        DeviceUtils.isTTGame = function () {
            return false;
        };
        DeviceUtils.isMobile = function () {
            return cc.sys.isMobile;
        };
        DeviceUtils.isPC = function () {
            return !cc.sys.isMobile;
        };
        DeviceUtils.isAndroid = function () {
            return cc.sys.os == cc.sys.OS_ANDROID;
        };
        DeviceUtils.isiOS = function () {
            return cc.sys.os == cc.sys.OS_IOS;
        };
        DeviceUtils.isOSX = function () {
            return cc.sys.os == cc.sys.OS_OSX;
        };
        return DeviceUtils;
    }();
    Core.DeviceUtils = DeviceUtils;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var EffectUtil = function () {
        function EffectUtil() {}
        EffectUtil.rotationEffect = function (display, time) {
            if (time === void 0) {
                time = 1000;
            }
            if (this.rotationSet == null) {
                this.rotationSet = new Collection.Set();
            }
            if (this.rotationSet.contains(display.id)) {
                return;
            }
            this.rotationSet.add(display.id);
            var onComplete1 = function onComplete1() {
                if (this.rotationSet.contains(display.id)) {
                    display.rotation = 0;
                    egret.Tween.get(display).to({ rotation: -360 }, time).call(onComplete1, this);
                }
            };
            display.rotation = 0;
            egret.Tween.get(display).to({ rotation: -360 }, time).call(onComplete1, this);
        };
        EffectUtil.removeRotationEffect = function (display) {
            if (this.rotationSet == null) {
                this.rotationSet = new Collection.Set();
            }
            this.rotationSet.remove(display.id);
            egret.Tween.removeTweens(display);
        };
        EffectUtil.showLeftToRight = function (display) {
            var _this = this;
            if (display.parent == null) {
                Core.LayerManager.inst.maskLayer.addChild(display);
            }
            display.alpha = 0;
            return new Promise(function (resolve) {
                display.y = fgui.GRoot.inst.height / 2 - display.height / 2;
                display.x = -display.width;
                egret.Tween.get(display).to({ x: fgui.GRoot.inst.width / 2 - display.width / 2 - 50, alpha: 1 }, 300, egret.Ease.sineInOut);
                fgui.GTimers.inst.add(580, 1, function () {
                    egret.Tween.get(display).to({ x: display.x + 100 }, 800).to({ x: fgui.GRoot.inst.width }, 300, egret.Ease.sineIn).call(function () {
                        if (display.parent != null) {
                            display.parent.removeChild(display);
                        }
                        resolve();
                    }, _this);
                }, _this);
            });
        };
        EffectUtil.showLeftToRightWithAngel = function (display, angel) {
            var _this = this;
            if (display.parent == null) {
                Core.LayerManager.inst.maskLayer.addChild(display);
            }
            display.alpha = 0;
            return new Promise(function (resolve) {
                var startY = fgui.GRoot.inst.height / 2 + 200;
                display.y = startY;
                display.x = -display.width;
                var totaleWidth = fgui.GRoot.inst.width + display.width;
                var midX = fgui.GRoot.inst.width / 2 - display.width / 2 - 50;
                var midY = startY - (totaleWidth / 2 - display.width / 2) * Math.cos(angel);
                var maxMidX = midX;
                var maxMidY = startY - (totaleWidth / 2 - display.width / 2) * Math.cos(angel);
                var endY = startY - (totaleWidth - display.width) * Math.cos(angel);
                egret.Tween.get(display).to({ x: midX, y: midY, alpha: 1 }, 300, egret.Ease.sineInOut);
                fgui.GTimers.inst.add(580, 1, function () {
                    egret.Tween.get(display).to({ x: maxMidX, y: maxMidY }, 800).to({ x: fgui.GRoot.inst.width, y: endY }, 300, egret.Ease.sineIn).call(function () {
                        if (display.parent != null) {
                            display.parent.removeChild(display);
                        }
                        resolve();
                    }, _this);
                }, _this);
            });
        };
        EffectUtil.showFromCenter = function (display, showTime, stayTime, hideTime) {
            var _this = this;
            if (showTime === void 0) {
                showTime = 350;
            }
            if (stayTime === void 0) {
                stayTime = 900;
            }
            if (hideTime === void 0) {
                hideTime = 400;
            }
            if (display.parent == null) {
                Core.LayerManager.inst.maskLayer.addChild(display);
                display.y = fgui.GRoot.inst.height / 2;
                display.x = fgui.GRoot.inst.width / 2;
            }
            display.alpha = 0;
            display.setPivot(0.5, 0.5, true);
            display.setScale(0, 0);
            return new Promise(function (resolve) {
                egret.Tween.get(display).to({ scaleX: 1, scaleY: 1, alpha: 1 }, showTime).wait(stayTime).to({ alpha: 0 }, hideTime).call(function () {
                    display.removeFromParent();
                    resolve();
                }, _this);
            });
        };
        EffectUtil.blink = function (display, color) {
            if (color === void 0) {
                color = Core.TextColors.white;
            }
            return __awaiter(this, void 0, void 0, function () {
                var mask;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mask = new fgui.GGraph();
                            mask.width = display.width;
                            mask.height = display.height;
                            mask.drawRect(0, color.setA(0), color.setA(Math.floor(0.8 * 0xFF)), [7]);
                            display.addChild(mask);
                            return [4, new Promise(function (resolve) {
                                egret.Tween.get(mask).to({ alpha: 0.4 }, 110).wait(35).call(function () {
                                    display.removeChild(mask);
                                }, null).wait(263).call(function () {
                                    resolve();
                                }, _this);
                            })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        return EffectUtil;
    }();
    Core.EffectUtil = EffectUtil;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var FrameExecutor = function () {
        function FrameExecutor() {
            this._isCancel = false;
            this._isExecuting = false;
            this._functions = [];
            if (Core.DeviceUtils.isNative() && Core.DeviceUtils.isiOS()) {
                this._FPSnum = fgui.GTimers.FPS30;
            } else {
                this._FPSnum = fgui.GTimers.FPS60;
            }
        }
        ;
        Object.defineProperty(FrameExecutor, "inst", {
            get: function get() {
                if (!this._inst) {
                    this._inst = new FrameExecutor();
                }
                return this._inst;
            },
            enumerable: false,
            configurable: true
        });
        FrameExecutor.prototype.regist = function (func, thisObj) {
            var param = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                param[_i - 2] = arguments[_i];
            }
            this._functions.push([func, thisObj, param]);
        };
        FrameExecutor.prototype.cancel = function () {
            this._isCancel = true;
            this._functions = [];
        };
        FrameExecutor.prototype.resume = function (interval) {
            if (interval === void 0) {
                interval = 1;
            }
            this._isCancel = false;
            this.execute(interval);
        };
        FrameExecutor.prototype.resumeAll = function (interval) {
            var _a;
            if (interval === void 0) {
                interval = 1;
            }
            this._isCancel = false;
            while (this._functions.length > 0) {
                var arr = this._functions.shift();
                (_a = arr[0]).call.apply(_a, __spreadArrays([arr[1]], arr[2]));
                console.log("executing");
            }
        };
        FrameExecutor.prototype._doExec = function (interval) {
            var _a;
            if (this._functions.length) {
                this._isExecuting = true;
                var arr = this._functions.shift();
                (_a = arr[0]).call.apply(_a, __spreadArrays([arr[1]], arr[2]));
                fgui.GTimers.inst.add(interval, 1, this._doExec, this, interval);
            } else {
                this._isExecuting = false;
            }
        };
        FrameExecutor.prototype.execute = function (interval) {
            if (this._isCancel || this._isExecuting) {
                return;
            }
            interval = interval || this._FPSnum;
            this._doExec(interval);
        };
        FrameExecutor._inst = null;
        return FrameExecutor;
    }();
    Core.FrameExecutor = FrameExecutor;
})(Core || (Core = {}));
var fgui;
(function (fgui) {
    var GTimers = function (_super) {
        __extends(GTimers, _super);
        function GTimers() {
            var _this = _super.call(this) || this;
            _this._enumI = 0;
            _this._enumCount = 0;
            _this.name = "[GTimer]";
            _this._items = new Array();
            _this._itemPool = new Array();
            return _this;
        }
        GTimers.prototype.getItem = function () {
            if (this._itemPool.length) return this._itemPool.pop();else return new TimerItem();
        };
        GTimers.prototype.findItem = function (callback, thisObj) {
            var len = this._items.length;
            for (var i = 0; i < len; i++) {
                var item = this._items[i];
                if (item.callback == callback && item.thisObj == thisObj) return item;
            }
            return null;
        };
        GTimers.prototype.add = function (delayInMiniseconds, repeat, callback, thisObj) {
            var callbackParam = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                callbackParam[_i - 4] = arguments[_i];
            }
            var item = this.findItem(callback, thisObj);
            if (!item) {
                item = this.getItem();
                item.callback = callback;
                item.thisObj = thisObj;
                this._items.push(item);
            }
            item.delay = delayInMiniseconds;
            item.counter = 0;
            item.repeat = repeat;
            item.param = callbackParam;
            item.end = false;
            if (!GTimers._inited) {
                cc.game.addPersistRootNode(this);
                cc.director.getScheduler().scheduleUpdate(this, 0, false);
                GTimers._inited = true;
            }
        };
        GTimers.prototype.update = function (dt) {
            this.__timer(dt);
        };
        GTimers.prototype.callLater = function (callback, thisObj, callbackParam) {
            if (callbackParam === void 0) {
                callbackParam = null;
            }
            this.add(1, 1, callback, thisObj, callbackParam);
        };
        GTimers.prototype.callDelay = function (delay, callback, thisObj, callbackParam) {
            if (callbackParam === void 0) {
                callbackParam = null;
            }
            this.add(delay, 1, callback, thisObj, callbackParam);
        };
        GTimers.prototype.callBy24Fps = function (callback, thisObj, callbackParam) {
            if (callbackParam === void 0) {
                callbackParam = null;
            }
            this.add(GTimers.FPS24, 0, callback, thisObj, callbackParam);
        };
        GTimers.prototype.waitTime = function (delay) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve) {
                        _this.add(delay, 1, function () {
                            resolve(null);
                        }, _this);
                    })];
                });
            });
        };
        GTimers.prototype.wait30FpsFrame = function (delay) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve) {
                        _this.add(GTimers.FPS30 * delay, 1, function () {
                            resolve(null);
                        }, _this);
                    })];
                });
            });
        };
        GTimers.prototype.exists = function (callback, thisObj) {
            var item = this.findItem(callback, thisObj);
            return item != null;
        };
        GTimers.prototype.remove = function (callback, thisObj) {
            var item = this.findItem(callback, thisObj);
            if (item) {
                var i = this._items.indexOf(item);
                this._items.splice(i, 1);
                if (i < this._enumI) this._enumI--;
                this._enumCount--;
            }
        };
        GTimers.prototype.__timer = function (dt, paused) {
            var _a;
            if (paused === void 0) {
                paused = false;
            }
            GTimers.deltaTime = dt * 1000;
            this._enumI = 0;
            this._enumCount = this._items.length;
            while (this._enumI < this._enumCount) {
                var item = this._items[this._enumI];
                this._enumI++;
                if (item.advance(GTimers.deltaTime)) {
                    if (item.end) {
                        this._enumI--;
                        this._enumCount--;
                        this._items.splice(this._enumI, 1);
                    }
                    if (item.param) (_a = item.callback).call.apply(_a, __spreadArrays([item.thisObj], item.param));else item.callback.call(item.thisObj);
                }
            }
            return false;
        };
        GTimers.deltaTime = 0;
        GTimers.inst = new GTimers();
        GTimers.FPS24 = 1000 / 24;
        GTimers.FPS30 = 1000 / 30;
        GTimers.FPS60 = 1000 / 60;
        GTimers.daysTime = 86400;
        GTimers._inited = false;
        GTimers._root = null;
        return GTimers;
    }(cc.Node);
    fgui.GTimers = GTimers;
    var TimerItem = function () {
        function TimerItem() {
            this.delay = 0;
            this.counter = 0;
            this.repeat = 0;
        }
        TimerItem.prototype.advance = function (elapsed) {
            if (elapsed === void 0) {
                elapsed = 0;
            }
            this.counter += elapsed;
            if (this.counter >= this.delay) {
                this.counter -= this.delay;
                if (this.counter > this.delay) this.counter = this.delay;
                if (this.repeat > 0) {
                    this.repeat--;
                    if (this.repeat == 0) this.end = true;
                }
                return true;
            } else return false;
        };
        TimerItem.prototype.reset = function () {
            this.callback = null;
            this.thisObj = null;
            this.param = null;
        };
        return TimerItem;
    }();
})(fgui || (fgui = {}));
var Core;
(function (Core) {
    var TextToken = function () {
        function TextToken(_id) {
            this.stream = [];
            this._isDone = true;
            this._isHead = true;
            this._id = _id;
        }
        Object.defineProperty(TextToken.prototype, "id", {
            get: function get() {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextToken.prototype, "isDone", {
            get: function get() {
                return this._isDone;
            },
            set: function set(_isDone) {
                this._isDone = _isDone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextToken.prototype, "isHead", {
            get: function get() {
                return this._isHead;
            },
            enumerable: false,
            configurable: true
        });
        TextToken.prototype.toTextElement = function () {
            return { text: this.stream.join("") };
        };
        TextToken.prototype.addChar = function (c) {
            this.stream.push(c);
        };
        TextToken.prototype.getBaseText = function () {
            return this.stream.join("");
        };
        TextToken.prototype.toUbbText = function () {
            return this.getBaseText();
        };
        return TextToken;
    }();
    var ColorTextToken = function (_super) {
        __extends(ColorTextToken, _super);
        function ColorTextToken(_id, color, rgbColor, isHead) {
            var _this = _super.call(this, _id) || this;
            _this._color = color;
            _this._rgbColor = rgbColor;
            _this._isHead = isHead;
            _this._isDone = false;
            return _this;
        }
        Object.defineProperty(ColorTextToken.prototype, "color", {
            get: function get() {
                return this._color;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ColorTextToken.prototype, "rgbColor", {
            get: function get() {
                return this._rgbColor;
            },
            enumerable: false,
            configurable: true
        });
        ColorTextToken.prototype.toTextElement = function () {
            var baseTxt = this.stream.join("");
            if (!this._isDone) {
                if (this._isHead) {
                    return { text: "#c" + this._color + baseTxt };
                } else {
                    return { text: baseTxt };
                }
            } else {
                return { text: baseTxt, style: { "textColor": this.rgbColor } };
            }
        };
        ColorTextToken.getRgbColor = function (colorCode) {
            if (colorCode.length == 1) {
                return Core.ColorsCode[colorCode];
            }
            return parseInt(colorCode, 16);
        };
        ColorTextToken.prototype.toUbbText = function () {
            var color = Core.toColor(this._rgbColor);
            var ret = "[color=#" + color.toHEX("#rrggbb") + "]" + this.getBaseText() + "[/color]";
            return ret;
        };
        return ColorTextToken;
    }(TextToken);
    var StringUtils = function () {
        function StringUtils() {}
        StringUtils.time2RemainText = function (sec) {
            var hours = Math.round((sec - 30 * 60) / (60 * 60));
            var minutes = Math.round((sec - 30) / 60) % 60;
            if (hours > 0) {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60153), hours);
            } else if (minutes > 0) {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60150), minutes);
            } else {
                return Core.StringUtils.TEXT(60141);
            }
        };
        StringUtils.TEXT = function (id) {
            if (!StringUtils.textGameData) {
                return "";
            }
            var txtLocaleInfo = StringUtils.textGameData.get(id);
            if (!txtLocaleInfo) {
                if (StringUtils.textGameData2) {
                    txtLocaleInfo = StringUtils.textGameData2.get(id);
                    if (!txtLocaleInfo) {
                        if (StringUtils.textGameData3) {
                            txtLocaleInfo = StringUtils.textGameData3.get(id);
                            if (!txtLocaleInfo) {
                                return "";
                            }
                        }
                    }
                } else {
                    return "";
                }
            }
        };
        StringUtils.parseColorText = function (str) {
            var panding = [];
            var complete = [];
            var tokenId = 0;
            var curToken;
            var strLen = str.length;
            var curStatus = 0;
            for (var i = 0; i < strLen;) {
                var c = str[i];
                if (curStatus == 0) {
                    if (c == "#") {
                        if (str[i + 1] == "c") {
                            var colorCode = str[i + 2];
                            var rgb = ColorTextToken.getRgbColor(colorCode);
                            if (!rgb) {
                                colorCode = str.slice(i + 2, i + 8);
                                rgb = ColorTextToken.getRgbColor(colorCode);
                            }
                            if (rgb) {
                                if (curToken != null) {
                                    complete.push(curToken);
                                }
                                curToken = new ColorTextToken(tokenId, colorCode, rgb, true);
                                tokenId += 1;
                                i += colorCode.length + 2;
                                curStatus = 1;
                                continue;
                            }
                        }
                    }
                    i += 1;
                    if (curToken == null) {
                        curToken = new TextToken(tokenId);
                        tokenId += 1;
                    }
                    curToken.addChar(c);
                } else {
                    if (c == "#") {
                        if (str[i + 1] == "n") {
                            i += 2;
                            curToken.isDone = true;
                            complete.push(curToken);
                            if (!curToken.isHead) {
                                while (panding.length > 0) {
                                    curToken = panding.pop();
                                    curToken.isDone = true;
                                    complete.push(curToken);
                                    if (curToken.isHead) {
                                        break;
                                    }
                                }
                            }
                            if (panding.length > 0) {
                                var lastPandingToken = panding[panding.length - 1];
                                curToken = new ColorTextToken(tokenId, lastPandingToken.color, lastPandingToken.rgbColor, false);
                                tokenId += 1;
                            } else {
                                curToken = null;
                                curStatus = 0;
                            }
                            continue;
                        } else if (str[i + 1] == "c") {
                            var colorCode = str[i + 2];
                            var rgb = ColorTextToken.getRgbColor(colorCode);
                            if (!rgb) {
                                colorCode = str.slice(i + 2, i + 8);
                                rgb = ColorTextToken.getRgbColor(colorCode);
                            }
                            if (rgb) {
                                panding.push(curToken);
                                curToken = new ColorTextToken(tokenId, str[i + 2], Core.ColorsCode[str[i + 2]], true);
                                tokenId += 1;
                                i += 3;
                                curStatus = 1;
                                continue;
                            }
                        }
                    }
                    i += 1;
                    curToken.addChar(c);
                }
            }
            if (curToken != null) {
                complete.push(curToken);
            }
            panding.forEach(function (t) {
                complete.push(t);
            });
            complete.sort(function (a, b) {
                if (a.id > b.id) {
                    return 1;
                } else {
                    return -1;
                }
            });
            var ret = "";
            complete.forEach(function (t) {
                ret += t.toUbbText();
            });
            return ret;
        };
        StringUtils.parseFuncText = function (textObj, exitsElements) {
            return null;
        };
        StringUtils.secToString = function (sec, fmt) {
            var hours = Math.round((sec - 30 * 60) / (60 * 60));
            var minutes = Math.round((sec - 30) / 60) % 60;
            var seconds = sec % 60;
            if (fmt.toLowerCase() == "hms") {
                if (hours > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60128), hours, minutes, seconds);
                } else if (minutes > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60070), minutes, seconds);
                } else {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60021), seconds);
                }
            } else if (fmt.toLowerCase() == "h") {
                if (hours > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60058), hours);
                } else {
                    var m = Math.max(1, minutes);
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60055), m);
                }
            } else if (fmt.toLowerCase() == "hm") {
                if (hours > 0) {
                    if (minutes > 0) {
                        return Core.StringUtils.format(Core.StringUtils.TEXT(60112), hours, minutes);
                    } else {
                        return Core.StringUtils.format(Core.StringUtils.TEXT(60058), hours);
                    }
                } else {
                    if (minutes <= 0) {
                        return Core.StringUtils.format(Core.StringUtils.TEXT(60021), seconds);
                    } else if (seconds > 0) {
                        return Core.StringUtils.format(Core.StringUtils.TEXT(60070), minutes, seconds);
                    } else {
                        return Core.StringUtils.format(Core.StringUtils.TEXT(60055), minutes);
                    }
                }
            } else if (fmt.toLowerCase() == "dhm") {
                var hours_1 = Math.round((sec - 30 * 60) / (60 * 60));
                var days = Math.round(hours_1 / 24);
                var minutes_1 = Math.round((sec - 30) / 60) % 60;
                if (days > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60032), days);
                } else if (hours_1 > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60058), hours_1);
                } else if (minutes_1 > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60055), minutes_1);
                } else {
                    return Core.StringUtils.TEXT(60042);
                }
            } else if (fmt.toLowerCase() == "dhms") {
                var hours_2 = Math.round((sec - 30 * 60) / (60 * 60));
                var days = Math.floor(hours_2 / 24);
                hours_2 = hours_2 % 24;
                var minutes_2 = Math.round((sec - 30) / 60) % 60;
                var seconds_1 = sec % 60;
                return Core.StringUtils.format(Core.StringUtils.TEXT(70124), days, hours_2, minutes_2);
            } else if (fmt.toLowerCase() == "mmss") {
                var m = minutes < 10 ? "0" + minutes : minutes;
                var s = seconds < 10 ? "0" + seconds : seconds;
                return m + ":" + s;
            } else if (fmt.toLowerCase() == "hhmm") {
                var h = hours < 10 ? "0" + hours : hours;
                var m = minutes < 10 ? "0" + minutes : minutes;
                return h + ":" + m;
            } else if (fmt.toLowerCase() == "hhmmss") {
                var h = hours < 10 ? "0" + hours : hours;
                var m = minutes < 10 ? "0" + minutes : minutes;
                var s = seconds < 10 ? "0" + seconds : seconds;
                return h + ":" + m + ":" + s;
            } else if (fmt.toLocaleLowerCase() == "brief") {
                if (hours > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60058), hours);
                } else if (minutes > 0) {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60055), minutes);
                } else {
                    return Core.StringUtils.format(Core.StringUtils.TEXT(60021), seconds);
                }
            } else {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60021), seconds);
            }
        };
        StringUtils.secToDate = function (sec, fmt) {
            var date = new Date(sec * 1000);
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hour = date.getHours();
            var minutes = date.getMinutes();
            var seconds = date.getSeconds();
            if (fmt.toLowerCase() == "ymdhms") {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60206), year, month, day, hour, minutes, seconds);
            } else if (fmt.toLowerCase() == "ymd") {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60115), year, month, day);
            } else if (fmt.toLowerCase() == "mdh") {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60121), month, day, hour);
            } else if (fmt.toLowerCase() == "server") {
                var h = hour < 10 ? "0" + hour : hour;
                var m = minutes < 10 ? "0" + minutes : minutes;
                return h + ":" + m;
            } else if (fmt.toLowerCase() == "hms") {
                var h = hour < 10 ? "0" + hour : hour;
                var m = minutes < 10 ? "0" + minutes : minutes;
                var s = seconds < 10 ? "0" + seconds : seconds;
                return Core.StringUtils.format("{0}:{1}:{2}", h, m, s);
            } else if (fmt.toLowerCase() == "hm") {
                var h = hour < 10 ? "0" + hour : hour;
                var m = minutes < 10 ? "0" + minutes : minutes;
                return Core.StringUtils.format("{0}:{1}", h, m);
            } else if (fmt.toLowerCase() == "mdhm") {
                return Core.StringUtils.format("{0}年{1}月{2}日{3}时{4}分", year, month, day, hour, minutes);
            } else {
                return Core.StringUtils.format(Core.StringUtils.TEXT(60183), month, day, hour, minutes, seconds);
            }
        };
        StringUtils.utf8ArrayToString = function (array) {
            var out, i, len, c;
            var char2, char3;
            out = "";
            len = array.length;
            i = 0;
            while (i < len) {
                c = array[i++];
                switch (c >> 4) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        out += String.fromCharCode(c);
                        break;
                    case 12:
                    case 13:
                        char2 = array[i++];
                        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
                        break;
                    case 14:
                        char2 = array[i++];
                        char3 = array[i++];
                        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
                        break;
                }
            }
            return out;
        };
        StringUtils.format = function (formatter) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return formatter.replace(/{(\d+)}/g, function (match, number) {
                return typeof param[number] != "undefined" ? param[number] : match;
            });
        };
        StringUtils.formatTextId = function (textId) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            var formatter = this.TEXT(textId);
            return formatter.replace(/{(\d+)}/g, function (match, number) {
                return typeof param[number] != "undefined" ? param[number] : match;
            });
        };
        StringUtils.utf8Length = function (str) {
            var byteLen = 0,
                len = str.length;
            if (!str) return 0;
            for (var i = 0; i < len; i++) {
                byteLen += str.charCodeAt(i) > 255 ? 2 : 1;
            }
            return byteLen;
        };
        StringUtils.getRealName = function (str) {
            var realName = str.replace(/#c\w(.*)#n/, "$1");
            return realName;
        };
        StringUtils.filterEmoji = function (str) {
            if (!str) return "";
            var ret = str.replace(/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g, "#");
            return ret.replace(/[\r\n]/g, "");
        };
        StringUtils.readableSize = function (size) {
            if (size < 1024) return "" + size;else if (size >= 1024 && size < 1024 * 1024) return (size / 1024.0).toFixed(2) + "K";else return (size / 1024.0 / 1024.0).toFixed(2) + "M";
        };
        StringUtils.getSimpleResText = function (num, url) {
            var size = 60;
            var color = "660000";
            return "[img]" + url + "[/img][size=" + size + "]#c" + color + num + "#n[/size]";
        };
        StringUtils.limitNameLenth = function (str, maxLenth) {
            if (maxLenth === void 0) {
                maxLenth = 10;
            }
            var name = str;
            var temp = 0;
            var lenth = 0;
            var bit = Core.StringUtils.utf8Length(name);
            if (bit > maxLenth * 2) {
                for (var i = 0; i < name.length; i++) {
                    var ascll = name.charCodeAt(i);
                    if (ascll < 256) {
                        temp += 1;
                    } else {
                        temp += 2;
                    }
                    if (temp > maxLenth * 2) {
                        break;
                    }
                    var char = name.charAt(i).concat(name.charAt(i + 1));
                    var bool_1 = char.search(/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g);
                    if (bool_1 != -1) {
                        i++;
                        lenth += 2;
                    } else {
                        lenth += 1;
                    }
                }
                var lastChar = name.charAt(lenth - 1).concat(name.charAt(lenth));
                var bool = lastChar.search(/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g);
                if (bool != -1) {
                    lenth++;
                }
                name = name.substr(0, lenth);
                if (temp > maxLenth * 2) {
                    name = name.concat("...");
                }
            }
            return name;
        };
        StringUtils.isNumber = function (val) {
            var regPos = /^\d+(\.\d+)?$/;
            var regNeg = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;
            if (regPos.test(val) || regNeg.test(val)) {
                return true;
            } else {
                return false;
            }
        };
        StringUtils.printStack = function () {
            var e = new Error();
            var lines = e.stack.split('\n');
            lines.shift();
            lines.forEach(function (line) {
                console.log('line:', line);
            });
        };
        return StringUtils;
    }();
    Core.StringUtils = StringUtils;
})(Core || (Core = {}));
var Utils = function () {
    function Utils() {}
    Utils.str2num = function (str) {
        str = str.trim();
        var strNum = parseInt(str);
        if (isNaN(strNum) || str.length <= 0 || str.length != strNum.toString().length) {
            return false;
        }
        return strNum;
    };
    Utils.setCardNameText = function (text, data) {
        text.text = Core.StringUtils.getRealName(data.name);
        if (data.rare >= 98) {
            text.color = Core.TextColors.brownness;
        } else {
            switch (data.level) {
                case 1:
                    text.color = Core.TextColors.white;
                    break;
                case 2:
                    text.color = Core.TextColors.green;
                    break;
                case 3:
                    text.color = Core.TextColors.blue;
                    break;
                case 4:
                    text.color = Core.TextColors.purple;
                    break;
                case 5:
                    text.color = Core.TextColors.orange;
                    break;
                default:
                    text.color = Core.TextColors.white;
                    break;
            }
        }
    };
    Utils.getResolutionDistance = function () {
        return fgui.GRoot.inst.height - 1600 - window.support.topMargin - window.support.bottomMargin;
    };
    Utils.setDefaultNameColor = function (text, name) {
        if (name.indexOf("#c") < 0) {
            text.color = cc.Color.WHITE;
        }
    };
    Utils.compareVersion = function (v1, v2) {
        var v1s = v1.split('.');
        var v2s = v2.split('.');
        var len = Math.max(v1s.length, v2s.length);
        while (v1s.length < len) {
            v1s.push('0');
        }
        while (v2s.length < len) {
            v2s.push('0');
        }
        for (var i = 0; i < len; i++) {
            var num1 = parseInt(v1s[i]);
            var num2 = parseInt(v2s[i]);
            if (num1 > num2) {
                return 1;
            } else if (num1 < num2) {
                return -1;
            }
        }
        return 0;
    };
    Utils.makeNode3DIfSupported = function (node, group) {
        var _this = this;
        if (group === void 0) {
            group = "Model";
        }
        if (node.is3DNode) {
            return;
        }
        var supported = true;
        if (supported) {
            node.is3DNode = true;
            node.group = group;
            var children = node.children;
            if (children) {
                children.forEach(function (child) {
                    _this.makeNode3DIfSupported(child, group);
                });
            }
            return true;
        } else {
            return false;
        }
    };
    Utils.cancelNode3D = function (node) {
        var _this = this;
        if (node.is3DNode) {
            node.is3DNode = false;
            node.group = "UI";
            var children = node.children;
            if (children) {
                children.forEach(function (child) {
                    _this.cancelNode3D(child);
                });
            }
        }
    };
    Utils.derivative = function (fn) {
        var h = 0.00001;
        return function (x) {
            return (fn(x + h) - fn(x - h)) / (2 * h);
        };
    };
    Utils.blink = function (displayObj, color, rect, maskIndex) {
        if (color === void 0) {
            color = Core.TextColors.red;
        }
        if (maskIndex === void 0) {
            maskIndex = null;
        }
        return __awaiter(this, void 0, void 0, function () {
            var mask;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mask = new fgui.GGraph();
                        if (rect) {
                            mask.width = rect.width;
                            mask.height = rect.height;
                            mask.x = rect.x;
                            mask.y = rect.y;
                        } else {
                            mask.width = displayObj.width;
                            mask.height = displayObj.height;
                        }
                        mask.drawRect(0, color.setA(0), color.setA(Math.floor(0.8 * 0xFF)), [3]);
                        Utils.makeNode3DIfSupported(mask.node);
                        if (maskIndex != null) {
                            displayObj.addChildAt(mask, maskIndex);
                        } else {
                            displayObj.addChild(mask);
                        }
                        return [4, new Promise(function (resolve) {
                            egret.Tween.get(mask).to({ alpha: 0.4 }, 110).wait(35).call(function () {
                                displayObj.removeChild(mask);
                            }, null).wait(263).call(function () {
                                resolve();
                            }, _this);
                        })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Utils.getAccurateTime = function (sec, mode) {
        if (mode === void 0) {
            mode = "hms";
        }
        return Core.StringUtils.secToString(sec, mode);
    };
    Utils.getMaxTime = function (sec) {
        var time = null;
        var day = null;
        var hour = Math.round((sec - 30 * 60) / (60 * 60));
        var min = Math.round((sec - 30) / 60) % 60;
        var seconds = sec % 60;
        if (hour >= 24) {
            day = Math.ceil(hour / 24);
            time = day.toString() + "天";
        } else if (hour >= 1 && hour < 24 && min == 0 && seconds == 0) {
            time = hour.toString() + "小时";
        } else if (hour >= 1 && hour < 24 && (min > 0 || seconds > 0)) {
            hour++;
            time = hour.toString() + "小时";
        } else if (hour == 0 && min >= 1 && seconds == 0) {
            time = min.toString() + "分钟";
        } else if (hour == 0 && min >= 1 && seconds > 0) {
            min++;
            time = min.toString() + "分钟";
        } else if (hour == 0 && min == 0 && seconds > 0) {
            min = 1;
            time = min.toString() + "分钟";
        } else if (hour == 0 && min == 0 && seconds == 0) {
            time = "0分钟";
        }
        return time;
    };
    Utils.pos2pos = function (src, des) {
        var temp = src.obj.localToRoot(src.pos.x, src.pos.y);
        return des.obj.rootToLocal(temp.x, temp.y);
    };
    Utils.isTwoArrEqual = function (arr1, arr2) {
        var reVal = true;
        if (!arr1 || !arr2) {
            reVal = false;
        } else if (arr1.length != arr2.length) {
            reVal = false;
        } else if (arr1.length > 0 && arr2.length > 0) {
            arr1.forEach(function (ele) {
                if (arr2.indexOf(ele) < 0) {
                    reVal = false;
                }
            });
        }
        return reVal;
    };
    Utils.getFormulaResult = function (str) {
        var regs = /^-?\d+$/;
        if (regs.test(str)) {
            return parseInt(str);
        }
        var _str = str.replace('*', '×');
        var __str = _str.replace('/', '÷');
        var str1 = __str.split('');
        var str2 = [];
        for (var i = 0; i < str1.length; i++) {
            if (!Number(str1[i]) && str1[i] != '.' && str1[i] != '0') {
                str2.push('|', str1[i], '|');
            } else {
                str2.push(str1[i]);
            }
        }
        var arr = str2.join('').split('|');
        var ops = '+-#×÷'.split('');
        var result = [];
        var temp = [];
        arr.forEach(function (ele, ind) {
            if (ele == '(') {
                temp.push(ele);
            } else if (ele == ')') {
                var flag = true;
                while (flag) {
                    if (temp[temp.length - 1] != '(') {
                        result.push(temp.pop());
                    } else {
                        temp.pop();
                        flag = false;
                    }
                }
            } else if (ops.indexOf(ele) != -1) {
                var cmp_1 = function cmp_1(x, t) {
                    if (t.length == 0 || t[t.length - 1] == '(' || ops.indexOf(x) - ops.indexOf(t[t.length - 1]) > 2) {
                        t.push(x);
                    } else {
                        result.push(t.pop());
                        return cmp_1(x, t);
                    }
                };
                cmp_1(ele, temp);
            } else {
                result.push(ele);
            }
        });
        while (temp.length > 0) {
            if (temp[temp.length - 1] != '(') {
                result.push(temp.pop());
            } else {
                temp.pop();
            }
        }
        var res = result;
        result = [];
        res.forEach(function (ele, ind) {
            if (ele != '') result.push(ele);
        });
        var s = [];
        result.forEach(function (ele, ind) {
            var reg = /^\d+(\.\d+)?$/;
            if (reg.test(ele)) {
                s.push(ele);
            } else {
                var ans = void 0;
                var a = parseFloat(s.pop());
                var b = parseFloat(s.pop());
                if (ele == '+') ans = a + b;
                if (ele == '-') ans = b - a;
                if (ele == '×') ans = a * b;
                if (ele == '÷') ans = b / a;
                s.push(ans);
            }
        });
        return s[0];
    };
    Utils.getText = function (num) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        return Core.StringUtils.format(Core.StringUtils.TEXT(num), param[0], param[1], param[2], param[3], param[4]);
    };
    Utils.prototype.fairyPosToNodePos = function (x, y) {
        return { x: x, y: -y };
    };
    Utils.touchPointToGRoot = function (x, y) {
        var _x = fgui.GRoot.inst.width / 480 * x;
        var _y = (960 - y) * fgui.GRoot.inst.height / 960;
        return new cc.Vec2(_x, _y);
    };
    Utils.analyseInputNumberText = function (text) {
        var reVal = { num: null, reason: "" };
        var regs = /^-?\d+$/;
        if (!regs.test(text) || parseInt(text) <= 0) {
            if (parseInt(text) == 0) {
                reVal.reason = "请输入的数目大于0!";
            } else {
                reVal.reason = "请输入合法的数目!";
            }
        } else {
            reVal.num = parseInt(text);
        }
        return reVal;
    };
    Utils.isStrPureChinese = function (str) {
        var pattern = new RegExp("[\u4E00-\u9FA5]+");
        if (pattern.test(str)) {
            return true;
        }
        return false;
    };
    Utils.isStrPureEnglish = function (str) {
        var pattern2 = new RegExp("[A-Za-z]+");
        if (pattern2.test(str)) {
            return true;
        }
        return false;
    };
    Utils.getByteLen = function (val) {
        var len = 0;
        for (var i = 0; i < val.length; i++) {
            var a = val.charAt(i);
            if (a.match(/[^\x00-\xff]/ig) != null) {
                len += 2;
            } else {
                len += 1;
            }
        }
        return len;
    };
    Utils.printStack = function () {
        var e = new Error();
        var lines = e.stack.split('\n');
        lines.shift();
        lines.forEach(function (line) {
            cc.log('line:', line);
        });
    };
    Utils.replaceStrChar = function (str, index, charStr) {
        return str.substring(0, index) + charStr + str.substring(index + 1);
    };
    Utils.replaceStrInStr = function (text, start, stop, replacetext) {
        return text.substring(0, start) + replacetext + text.substring(stop + 1);
    };
    Utils.hovercUnique = function (arr) {
        var result = [];
        var hash = {};
        for (var i = 0, elem = null; (elem = arr[i]) != null; i++) {
            if (!hash[elem]) {
                result.push(elem);
                hash[elem] = true;
            }
        }
        return result;
    };
    Utils.printMat = function (obj) {
        var tm = obj.m;
        var str;
        if (tm) {
            str = "openGL矩阵为:[\n" + tm[0] + ", " + tm[4] + ", " + tm[8] + ", " + tm[12] + ",\n" + tm[1] + ", " + tm[5] + ", " + tm[9] + ", " + tm[13] + ",\n" + tm[2] + ", " + tm[6] + ", " + tm[10] + ", " + tm[14] + ",\n" + tm[3] + ", " + tm[7] + ", " + tm[11] + ", " + tm[15] + "\n" + "]";
        } else {
            str = "[\n" + "1, 0, 0, 0\n" + "0, 1, 0, 0\n" + "0, 0, 1, 0\n" + "0, 0, 0, 1\n" + "]";
        }
        console.log(str);
    };
    Utils.propertyDecorator = function (target, propertyKey) {
        var protoVal = target[propertyKey];
        Object.defineProperty(target, propertyKey, {
            get: function get() {
                return protoVal;
            },
            set: function set(val) {
                protoVal = val;
            }
        });
    };
    return Utils;
}();
var WXConfig = function () {
    function WXConfig() {
        window.support = {
            "nativeSound": false,
            "record": false,
            "topMargin": 0,
            "bottomMargin": 0
        };
        window.support.record = false;
        window.support.topMargin = 0;
        window.support.bottomMargin = 0;
        if (Core.DeviceUtils.isMiniGame()) {
            this._systemInfo = wx.getSystemInfoSync();
            window.support.topMargin = this._getTopMargin();
            if (window.support.topMargin < 0) {
                console.log("window.support.topMargin < 0");
                var liuhai = ["iPhone X", "PAR-AL00", "MI 8", "ONEPLUS A6000", "COL-AL10", "EML-AL00", "PACM00", "vivo X21A", "vivo Y85A", "V1914A", "PBAM00", "LYA_AL10"];
                for (var i = 0; i < liuhai.length; i++) {
                    if (this._systemInfo.model.indexOf(liuhai[i]) >= 0) {
                        window.support.topMargin = 48;
                        window.support.bottomMargin = 0;
                        break;
                    }
                }
                window.support.topMargin = 0;
            } else {
                console.log("window.support.topMargin > 0");
            }
        }
    }
    Object.defineProperty(WXConfig, "inst", {
        get: function get() {
            if (WXConfig._inst == null) {
                WXConfig._inst = new WXConfig();
            }
            return WXConfig._inst;
        },
        enumerable: false,
        configurable: true
    });
    WXConfig.prototype._getTopMargin = function () {
        var safeArea = this._systemInfo.safeArea || {};
        if (safeArea["top"] == undefined) {
            var navbarPosition = this._systemInfo["navbarPosition"] || {};
            if (navbarPosition["marginTop"] == undefined) {
                return -1;
            } else {
                return navbarPosition["marginTop"];
            }
        } else {
            var top_1 = safeArea["top"];
            if (top_1 > 0) {
                var scale = cc.view.getScaleX();
                var ratio = this._systemInfo.pixelRatio;
                return top_1 * ratio;
            } else {
                return top_1;
            }
        }
    };
    WXConfig._inst = null;
    return WXConfig;
}();
var MVC;
(function (MVC) {
    var Controller = function () {
        function Controller() {}
        Object.defineProperty(Controller, "inst", {
            get: function get() {
                if (!Controller._inst) {
                    Controller._inst = new Controller();
                }
                return Controller._inst;
            },
            enumerable: false,
            configurable: true
        });
        Controller.prototype.__concern = function (model, view, binding, immediate) {
            if (immediate === void 0) {
                immediate = true;
            }
            if (!model || !view) {
                return;
            }
            var __ob_mapping__ = Object.getPrototypeOf(view).__ob_mapping__;
            if (!__ob_mapping__) {
                console.error("View has no observe map: ", view);
                return;
            }
            var __model_name__ = Object.getPrototypeOf(model).__model_name__;
            if (!__model_name__) {
                console.error("Model has no name: ", model);
                return;
            }
            if (__ob_mapping__[__model_name__]) {
                var __handlers__1 = __ob_mapping__[__model_name__];
                var __prop_names__ = Object.keys(__handlers__1);
                __prop_names__.forEach(function (__prop__name__) {
                    var __handler__ = __handlers__1[__prop__name__];
                    if (binding) {
                        if (immediate) {
                            model.watchPropImmediate(__prop__name__, __handler__, view);
                        } else {
                            model.watchProp(__prop__name__, __handler__, view);
                        }
                    } else {
                        model.unwatchProp(__prop__name__, __handler__, view);
                    }
                });
            }
        };
        Controller.prototype.bind = function (model, view, immediate) {
            if (immediate === void 0) {
                immediate = true;
            }
            this.__concern(model, view, true, immediate);
        };
        Controller.prototype.unbind = function (model, view) {
            this.__concern(model, view, false);
        };
        return Controller;
    }();
    MVC.Controller = Controller;
})(MVC || (MVC = {}));
var egret;
(function (egret) {
    function $error(code, code_point) {
        cc.log("ERROR! code = ", code);
    }
    egret.$error = $error;
    function $warn(code) {
        cc.warn("WARN! code = ", code);
    }
    egret.$warn = $warn;
    egret.localStorage = cc.sys.localStorage;
    egret.$hashCount = 1;
    var HashObject = function () {
        function HashObject() {
            this.$hashCode = egret.$hashCount++;
        }
        Object.defineProperty(HashObject.prototype, "hashCode", {
            get: function get() {
                return this.$hashCode;
            },
            enumerable: false,
            configurable: true
        });
        return HashObject;
    }();
    egret.HashObject = HashObject;
    var Event = function (_super) {
        __extends(Event, _super);
        function Event(type, bubble) {
            var _this = _super.call(this, type, bubble) || this;
            _this._hasHandled = false;
            _this.$currentTarget = null;
            _this.$target = null;
            _this.$isDefaultPrevented = false;
            _this.$type = type;
            return _this;
        }
        Object.defineProperty(Event.prototype, "currentTarget_", {
            get: function get() {
                return this.$currentTarget;
            },
            set: function set(tar) {
                this.$currentTarget = tar;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "type_", {
            get: function get() {
                return this.$type;
            },
            set: function set(t) {
                this.$type = t;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "target_", {
            get: function get() {
                return this.$target;
            },
            set: function set(tar) {
                this.$target = tar;
            },
            enumerable: false,
            configurable: true
        });
        Event.prototype.$setTarget = function (target) {
            this.$target = target;
            return true;
        };
        Object.defineProperty(Event.prototype, "data", {
            get: function get() {
                return _super.prototype.getUserData.call(this);
            },
            set: function set(param) {
                _super.prototype.setUserData.call(this, param);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "hasHandled", {
            get: function get() {
                return this._hasHandled;
            },
            set: function set(b) {
                this._hasHandled = b;
            },
            enumerable: false,
            configurable: true
        });
        Event.CONNECT = "connect";
        Event.CLOSE = "close";
        Event.IO_ERROR = "ioError";
        Event.SOCKET_DATA = "socketData";
        return Event;
    }(cc.Event.EventCustom);
    egret.Event = Event;
    function is(instance, typeName) {
        if (!instance || (typeof instance === "undefined" ? "undefined" : _typeof(instance)) != "object") {
            return false;
        }
        var prototype = Object.getPrototypeOf(instance);
        var types = prototype ? prototype.__types__ : null;
        if (!types) {
            return false;
        }
        return types.indexOf(typeName) !== -1;
    }
    egret.is = is;
    function log(msg) {
        var subst = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subst[_i - 1] = arguments[_i];
        }
        cc.log.apply(cc, __spreadArrays([msg], subst));
    }
    egret.log = log;
})(egret || (egret = {}));
;
var DEBUG = false;
var egret;
(function (egret) {
    var ONCE_EVENT_LIST = [];
    var EventDispatcher = function (_super) {
        __extends(EventDispatcher, _super);
        function EventDispatcher(target) {
            if (target === void 0) {
                target = null;
            }
            var _this = _super.call(this) || this;
            _this.$EventDispatcher = {
                0: target ? target : _this,
                1: {},
                2: {},
                3: 0
            };
            return _this;
        }
        EventDispatcher.prototype.$getEventMap = function (useCapture) {
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2] : values[1];
            return eventMap;
        };
        EventDispatcher.prototype.addEventListener = function (type, listener, thisObject, useCapture, priority) {
            this.$addListener(type, listener, thisObject, useCapture, priority);
        };
        EventDispatcher.prototype.once = function (type, listener, thisObject, useCapture, priority) {
            this.$addListener(type, listener, thisObject, useCapture, priority, true);
        };
        EventDispatcher.prototype.$addListener = function (type, listener, thisObject, useCapture, priority, dispatchOnce) {
            if (DEBUG && !listener) {
                egret.$error(1003, "listener");
            }
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2] : values[1];
            var list = eventMap[type];
            if (!list) {
                list = eventMap[type] = [];
            } else if (values[3] !== 0) {
                eventMap[type] = list = list.concat();
            }
            this.$insertEventBin(list, type, listener, thisObject, useCapture, priority, dispatchOnce);
        };
        EventDispatcher.prototype.$insertEventBin = function (list, type, listener, thisObject, useCapture, priority, dispatchOnce) {
            priority = +priority | 0;
            var insertIndex = -1;
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {
                    return false;
                }
                if (insertIndex == -1 && bin.priority < priority) {
                    insertIndex = i;
                }
            }
            var eventBin = {
                type: type, listener: listener, thisObject: thisObject, priority: priority,
                target: this, useCapture: useCapture, dispatchOnce: !!dispatchOnce
            };
            if (insertIndex !== -1) {
                list.splice(insertIndex, 0, eventBin);
            } else {
                list.push(eventBin);
            }
            return true;
        };
        EventDispatcher.prototype.removeEventListener = function (type, listener, thisObject, useCapture) {
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2] : values[1];
            var list = eventMap[type];
            if (!list) {
                return;
            }
            if (values[3] !== 0) {
                eventMap[type] = list = list.concat();
            }
            this.$removeEventBin(list, listener, thisObject);
            if (list.length == 0) {
                eventMap[type] = null;
            }
        };
        EventDispatcher.prototype.$removeEventBin = function (list, listener, thisObject) {
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {
                    list.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        EventDispatcher.prototype.hasEventListener = function (type) {
            var values = this.$EventDispatcher;
            return !!(values[1][type] || values[2][type]);
        };
        EventDispatcher.prototype.willTrigger = function (type) {
            return this.hasEventListener(type);
        };
        EventDispatcher.prototype.dispatchEvent = function (event) {
            event.$currentTarget = this.$EventDispatcher[0];
            event.$setTarget(event.$currentTarget);
            return this.$notifyListener(event, false);
        };
        EventDispatcher.prototype.$notifyListener = function (event, capturePhase) {
            var values = this.$EventDispatcher;
            var eventMap = capturePhase ? values[2] : values[1];
            var list = eventMap[event.$type];
            if (!list) {
                event.hasHandled = false;
                return true;
            }
            var length = list.length;
            if (length == 0) {
                event.hasHandled = false;
                return true;
            }
            var onceList = ONCE_EVENT_LIST;
            values[3]++;
            for (var i = 0; i < length; i++) {
                var eventBin = list[i];
                eventBin.listener.call(eventBin.thisObject, event);
                if (eventBin.dispatchOnce) {
                    onceList.push(eventBin);
                }
            }
            event.hasHandled = true;
            values[3]--;
            while (onceList.length) {
                var eventBin = onceList.pop();
                eventBin.target.removeEventListener(eventBin.type, eventBin.listener, eventBin.thisObject, eventBin.useCapture);
            }
            return !event.$isDefaultPrevented;
        };
        EventDispatcher.prototype.dispatchEventWith = function (type, bubbles, data, cancelable) {
            if (bubbles || this.hasEventListener(type)) {
                var event_1 = new egret.Event(type, bubbles);
                event_1.data = data;
                return this.dispatchEvent(event_1);
            }
            return true;
        };
        return EventDispatcher;
    }(egret.HashObject);
    egret.EventDispatcher = EventDispatcher;
})(egret || (egret = {}));
var Core;
(function (Core) {
    var BindingItem = function () {
        function BindingItem() {}
        BindingItem._gId = 0;
        return BindingItem;
    }();
    var BindingDelegate = function (_super) {
        __extends(BindingDelegate, _super);
        function BindingDelegate() {
            var _this = _super.call(this) || this;
            _this._watchers = new Collection.Dictionary();
            return _this;
        }
        BindingDelegate.prototype.watchProp = function (prop, callback, thisArg) {
            if (!this._watchers.containsKey(prop)) {
                this._watchers.setValue(prop, new Collection.Dictionary());
            } else {}
            var items = this._watchers.getValue(prop);
            var item = new BindingItem();
            item._id = ++BindingItem._gId;
            item._callback = callback;
            item._thisArg = thisArg;
            item._watch = Core.Binding.bindHandler(this, [prop], callback, thisArg);
            items.setValue(item._id, item);
            return item._watch;
        };
        BindingDelegate.prototype.watchPropImmediate = function (prop, callback, thisArg) {
            var watch = this.watchProp(prop, callback, thisArg);
            callback.call(thisArg, watch.getValue(), undefined);
        };
        BindingDelegate.prototype.unwatchProp = function (prop, callback, thisArg) {
            if (!this._watchers.containsKey(prop)) {
                return;
            }
            var items = this._watchers.getValue(prop);
            var dels = new Array();
            items.forEach(function (id, item) {
                if (item._callback == callback && item._thisArg == thisArg) {
                    item._watch.unwatch();
                    dels.push(item);
                }
            });
            dels.forEach(function (item) {
                items.remove(item._id);
            });
        };
        return BindingDelegate;
    }(egret.EventDispatcher);
    Core.BindingDelegate = BindingDelegate;
})(Core || (Core = {}));
var MVC;
(function (MVC) {
    var Model = function (_super) {
        __extends(Model, _super);
        function Model() {
            return _super.call(this) || this;
        }
        return Model;
    }(Core.BindingDelegate);
    MVC.Model = Model;
})(MVC || (MVC = {}));
var MVC;
(function (MVC) {
    var g_modelId = 0;
    function autoModelName(constructor) {
        g_modelId++;
        constructor.prototype.__model_name__ = "Model" + g_modelId;
        return function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return class_1;
        }(constructor);
    }
    MVC.autoModelName = autoModelName;
    function observe(cls, propName) {
        return function (target, propertyKey, descriptor) {
            if (!target.__ob_mapping__) {
                target.__ob_mapping__ = {};
            }
            var __model_name__ = cls.prototype.__model_name__;
            if (!__model_name__) {
                console.error("Please add '@autoModelName' decorator to class ", cls);
            } else {
                if (!target.__ob_mapping__[__model_name__]) {
                    target.__ob_mapping__[__model_name__] = {};
                }
                target.__ob_mapping__[__model_name__][propName] = target[propertyKey];
            }
        };
    }
    MVC.observe = observe;
})(MVC || (MVC = {}));
var Core;
(function (Core) {
    function joinValues(templates) {
        var first = templates[0];
        var value = first instanceof Core.Watcher ? first.getValue() : first;
        var length = templates.length;
        for (var i = 1; i < length; i++) {
            var item = templates[i];
            if (item instanceof Core.Watcher) {
                item = item.getValue();
            }
            value += item;
        }
        return value;
    }
    var Binding = function () {
        function Binding() {}
        Binding.bindProperty = function (host, chain, target, prop) {
            var watcher = Core.Watcher.watch(host, chain, null, null);
            if (watcher) {
                var assign = function assign(value) {
                    target[prop] = value;
                };
                watcher.setHandler(assign, null);
                assign(watcher.getValue());
            }
            return watcher;
        };
        Binding.bindHandler = function (host, chain, handler, thisObject) {
            var watcher = Core.Watcher.watch(host, chain, handler, thisObject);
            return watcher;
        };
        Binding.$bindProperties = function (host, templates, chainIndex, target, prop) {
            if (templates.length == 1 && chainIndex.length == 1) {
                return Binding.bindProperty(host, templates[0].split("."), target, prop);
            }
            var assign = function assign() {
                target[prop] = joinValues(templates);
            };
            var length = chainIndex.length;
            var watcher;
            for (var i = 0; i < length; i++) {
                var index = chainIndex[i];
                var chain = templates[index].split(".");
                watcher = Core.Watcher.watch(host, chain, null, null);
                if (watcher) {
                    templates[index] = watcher;
                    watcher.setHandler(assign, null);
                }
            }
            assign();
            return watcher;
        };
        return Binding;
    }();
    Core.Binding = Binding;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var PropertyEvent = function (_super) {
        __extends(PropertyEvent, _super);
        function PropertyEvent(type, bubbles, cancelable, property, oldValue) {
            var _this = _super.call(this, type, bubbles) || this;
            _this.property = property;
            _this.oldValue = oldValue;
            return _this;
        }
        PropertyEvent.dispatchPropertyEvent = function (target, eventType, property, oldValue) {
            if (!target.hasEventListener(eventType)) {
                return true;
            }
            var event = new PropertyEvent(eventType, false, false, property, oldValue);
            return target.dispatchEvent(event);
        };
        PropertyEvent.PROPERTY_CHANGE = "propertyChange";
        return PropertyEvent;
    }(egret.Event);
    Core.PropertyEvent = PropertyEvent;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var listeners = "__listeners__";
    var bindables = "__bindables__";
    var bindableCount = 0;
    function getPropertyDescriptor(host, property) {
        var data = Object.getOwnPropertyDescriptor(host, property);
        if (data) {
            return data;
        }
        var prototype = Object.getPrototypeOf(host);
        if (prototype) {
            return getPropertyDescriptor(prototype, property);
        }
        return null;
    }
    function notifyListener(host, property, oldValue) {
        var list = host[listeners];
        var length = list.length;
        for (var i = 0; i < length; i += 2) {
            var listener = list[i];
            var target = list[i + 1];
            listener.call(target, property, oldValue);
        }
    }
    var Watcher = function () {
        function Watcher(property, handler, thisObject, next) {
            this.isExecuting = false;
            this.property = property;
            this.handler = handler;
            this.next = next;
            this.thisObject = thisObject;
        }
        Watcher.watch = function (host, chain, handler, thisObject) {
            if (DEBUG) {
                if (!chain) {
                    egret.$error(1003, "chain");
                }
            }
            if (chain.length > 0) {
                var property = chain.shift();
                var next = Watcher.watch(null, chain, handler, thisObject);
                var watcher = new Watcher(property, handler, thisObject, next);
                watcher.reset(host);
                return watcher;
            } else {
                return null;
            }
        };
        Watcher.checkBindable = function (host, property) {
            var list = host[bindables];
            if (list && list.indexOf(property) != -1) {
                return true;
            }
            var isEventDispatcher = egret.is(host, "egret.IEventDispatcher");
            if (!isEventDispatcher && !host[listeners]) {
                host[listeners] = [];
            }
            var data = getPropertyDescriptor(host, property);
            if (data && data.set && data.get) {
                var orgSet_1 = data.set;
                data.set = function (value) {
                    if (this[property] != value) {
                        var oldValue = this[property];
                        orgSet_1.call(this, value);
                        if (isEventDispatcher) {
                            Core.PropertyEvent.dispatchPropertyEvent(this, Core.PropertyEvent.PROPERTY_CHANGE, property, oldValue);
                        } else {
                            notifyListener(this, property, oldValue);
                        }
                    }
                };
            } else if (!data || !data.get && !data.set) {
                bindableCount++;
                var newProp_1 = "_" + bindableCount + property;
                host[newProp_1] = data ? data.value : null;
                data = { enumerable: true, configurable: true };
                data.get = function () {
                    return this[newProp_1];
                };
                data.set = function (value) {
                    if (this[newProp_1] != value) {
                        var oldValue = this[newProp_1];
                        this[newProp_1] = value;
                        if (isEventDispatcher) {
                            Core.PropertyEvent.dispatchPropertyEvent(this, Core.PropertyEvent.PROPERTY_CHANGE, property, oldValue);
                        } else {
                            notifyListener(this, property, oldValue);
                        }
                    }
                };
            } else {
                return false;
            }
            Object.defineProperty(host, property, data);
            Core.registerBindable(host, property);
        };
        Watcher.prototype.unwatch = function () {
            this.reset(null);
            this.handler = null;
            if (this.next) {
                this.next.handler = null;
            }
        };
        Watcher.prototype.getValue = function () {
            if (this.next) {
                return this.next.getValue();
            }
            return this.getHostPropertyValue();
        };
        Watcher.prototype.setHandler = function (handler, thisObject) {
            this.handler = handler;
            this.thisObject = thisObject;
            if (this.next) {
                this.next.setHandler(handler, thisObject);
            }
        };
        Watcher.prototype.reset = function (newHost) {
            var oldHost = this.host;
            if (oldHost) {
                if (egret.is(oldHost, "egret.IEventDispatcher")) {
                    oldHost.removeEventListener(Core.PropertyEvent.PROPERTY_CHANGE, this.wrapHandler, this);
                } else {
                    var list = oldHost[listeners];
                    var index = list.indexOf(this);
                    list.splice(index - 1, 2);
                }
            }
            this.host = newHost;
            if (newHost) {
                Watcher.checkBindable(newHost, this.property);
                if (egret.is(newHost, "egret.IEventDispatcher")) {
                    newHost.addEventListener(Core.PropertyEvent.PROPERTY_CHANGE, this.wrapHandler, this, false, 100);
                } else {
                    var list = newHost[listeners];
                    list.push(this.onPropertyChange);
                    list.push(this);
                }
            }
            if (this.next) this.next.reset(this.getHostPropertyValue());
        };
        Watcher.prototype.getHostPropertyValue = function () {
            return this.host ? this.host[this.property] : null;
        };
        Watcher.prototype.wrapHandler = function (event) {
            this.onPropertyChange(event.property, event.oldValue);
        };
        Watcher.prototype.onPropertyChange = function (property, oldValue) {
            if (property == this.property && !this.isExecuting) {
                try {
                    this.isExecuting = true;
                    if (this.next) this.next.reset(this.getHostPropertyValue());
                    this.handler.call(this.thisObject, this.getValue(), oldValue);
                } finally {
                    this.isExecuting = false;
                }
            }
        };
        return Watcher;
    }();
    Core.Watcher = Watcher;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var key = "__bindables__";
    function registerBindable(instance, property) {
        if (DEBUG) {
            if (!instance) {
                egret.$error(1003, "instance");
            }
            if (!property) {
                egret.$error(1003, "property");
            }
        }
        if (instance.hasOwnProperty(key)) {
            instance[key].push(property);
        } else {
            var list = [property];
            if (instance[key]) {
                list = instance[key].concat(list);
            }
            instance[key] = list;
        }
    }
    Core.registerBindable = registerBindable;
})(Core || (Core = {}));
var Collection;
(function (Collection) {
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    Collection.has = function (obj, prop) {
        return _hasOwnProperty.call(obj, prop);
    };
    function defaultCompare(a, b) {
        if (a < b) {
            return -1;
        } else if (a === b) {
            return 0;
        } else {
            return 1;
        }
    }
    Collection.defaultCompare = defaultCompare;
    function defaultEquals(a, b) {
        return a === b;
    }
    Collection.defaultEquals = defaultEquals;
    function defaultToString(item) {
        if (item === null) {
            return 'COLLECTION_NULL';
        } else if (isUndefined(item)) {
            return 'COLLECTION_UNDEFINED';
        } else if (isString(item)) {
            return '$s' + item;
        } else {
            return '$o' + item.toString();
        }
    }
    Collection.defaultToString = defaultToString;
    function makeString(item, join) {
        if (join === void 0) {
            join = ',';
        }
        if (item === null) {
            return 'COLLECTION_NULL';
        } else if (isUndefined(item)) {
            return 'COLLECTION_UNDEFINED';
        } else if (item instanceof String || item instanceof Number) {
            return item.toString();
        } else {
            var toret = '{';
            var first = true;
            for (var prop in item) {
                if (Collection.has(item, prop)) {
                    if (first) {
                        first = false;
                    } else {
                        toret = toret + join;
                    }
                    toret = toret + prop + ':' + item[prop];
                }
            }
            return toret + '}';
        }
    }
    Collection.makeString = makeString;
    function isFunction(func) {
        return typeof func === 'function';
    }
    Collection.isFunction = isFunction;
    function isUndefined(obj) {
        return typeof obj === 'undefined';
    }
    Collection.isUndefined = isUndefined;
    function isString(obj) {
        return Object.prototype.toString.call(obj) === '[object String]';
    }
    Collection.isString = isString;
    function reverseCompareFunction(compareFunction) {
        if (isUndefined(compareFunction) || !isFunction(compareFunction)) {
            return function (a, b) {
                if (a < b) {
                    return 1;
                } else if (a === b) {
                    return 0;
                } else {
                    return -1;
                }
            };
        } else {
            return function (d, v) {
                return compareFunction(d, v) * -1;
            };
        }
    }
    Collection.reverseCompareFunction = reverseCompareFunction;
    function compareToEquals(compareFunction) {
        return function (a, b) {
            return compareFunction(a, b) === 0;
        };
    }
    Collection.compareToEquals = compareToEquals;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    function indexOf(array, item, equalsFunction) {
        var equals = equalsFunction || Collection.defaultEquals;
        var length = array.length;
        var i = 0;
        for (; i < length; i++) {
            if (equals(array[i], item)) {
                return i;
            }
        }
        return -1;
    }
    Collection.indexOf = indexOf;
    function lastIndexOf(array, item, equalsFunction) {
        var equals = equalsFunction || Collection.defaultEquals;
        var length = array.length;
        var i = length - 1;
        for (; i >= 0; i--) {
            if (equals(array[i], item)) {
                return i;
            }
        }
        return -1;
    }
    Collection.lastIndexOf = lastIndexOf;
    function contains(array, item, equalsFunction) {
        return indexOf(array, item, equalsFunction) >= 0;
    }
    Collection.contains = contains;
    function remove(array, item, equalsFunction) {
        var index = indexOf(array, item, equalsFunction);
        if (index < 0) {
            return false;
        }
        array.splice(index, 1);
        return true;
    }
    Collection.remove = remove;
    function frequency(array, item, equalsFunction) {
        var equals = equalsFunction || Collection.defaultEquals;
        var length = array.length;
        var freq = 0;
        var i = 0;
        for (; i < length; i++) {
            if (equals(array[i], item)) {
                freq++;
            }
        }
        return freq;
    }
    Collection.frequency = frequency;
    function equals(array1, array2, equalsFunction) {
        var equals = equalsFunction || Collection.defaultEquals;
        if (array1.length !== array2.length) {
            return false;
        }
        var length = array1.length;
        var i = 0;
        for (; i < length; i++) {
            if (!equals(array1[i], array2[i])) {
                return false;
            }
        }
        return true;
    }
    Collection.equals = equals;
    function copy(array) {
        return array.concat();
    }
    Collection.copy = copy;
    function swap(array, i, j) {
        if (i < 0 || i >= array.length || j < 0 || j >= array.length) {
            return false;
        }
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        return true;
    }
    Collection.swap = swap;
    function toString(array) {
        return '[' + array.toString() + ']';
    }
    Collection.toString = toString;
    function forEach(array, callback) {
        var ele = undefined;
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            ele = array_1[_i];
            if (callback(ele) === false) {
                return;
            }
        }
    }
    Collection.forEach = forEach;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    function defaultDictionaryToString(item) {
        if (item === null) {
            return 'COLLECTION_NULL';
        } else if (Collection.isUndefined(item)) {
            return 'COLLECTION_UNDEFINED';
        } else if (Collection.isString(item)) {
            return '$s' + item;
        } else {
            return '$o' + item.toString();
        }
    }
    Collection.defaultDictionaryToString = defaultDictionaryToString;
    var Dictionary = function () {
        function Dictionary(toStrFunction) {
            this.table = {};
            this.nElements = 0;
            this.toStr = toStrFunction || defaultDictionaryToString;
        }
        Dictionary.prototype.getValue = function (key) {
            var pair = this.table['$' + this.toStr(key)];
            if (Collection.isUndefined(pair)) {
                return undefined;
            }
            return pair.value;
        };
        Dictionary.prototype.setValue = function (key, value) {
            if (Collection.isUndefined(key) || Collection.isUndefined(value)) {
                return undefined;
            }
            var ret;
            var k = '$' + this.toStr(key);
            var previousElement = this.table[k];
            if (Collection.isUndefined(previousElement)) {
                this.nElements++;
                ret = undefined;
            } else {
                ret = previousElement.value;
            }
            this.table[k] = {
                key: key,
                value: value
            };
            return ret;
        };
        Dictionary.prototype.remove = function (key) {
            var k = '$' + this.toStr(key);
            var previousElement = this.table[k];
            if (!Collection.isUndefined(previousElement)) {
                this.table[k] = undefined;
                this.nElements--;
                delete this.table[k];
                return previousElement.value;
            }
            return undefined;
        };
        Dictionary.prototype.keys = function () {
            var array = [];
            var name = undefined;
            for (name in this.table) {
                if (Collection.has(this.table, name)) {
                    var pair = this.table[name];
                    if (pair !== undefined) {
                        array.push(pair.key);
                    }
                }
            }
            return array;
        };
        Dictionary.prototype.values = function () {
            var array = [];
            var name = undefined;
            for (name in this.table) {
                if (Collection.has(this.table, name)) {
                    var pair = this.table[name];
                    if (pair !== undefined) {
                        array.push(pair.value);
                    }
                }
            }
            return array;
        };
        Dictionary.prototype.forEach = function (callback) {
            var name = undefined;
            for (name in this.table) {
                if (Collection.has(this.table, name)) {
                    if (this.table[name] == undefined) {
                        continue;
                    }
                    var pair = this.table[name];
                    var ret = callback(pair.key, pair.value);
                    if (ret === false) {
                        return;
                    }
                }
            }
        };
        Dictionary.prototype.containsKey = function (key) {
            return !Collection.isUndefined(this.getValue(key));
        };
        Dictionary.prototype.clear = function () {
            this.table = {};
            this.nElements = 0;
        };
        Dictionary.prototype.size = function () {
            return this.nElements;
        };
        Dictionary.prototype.isEmpty = function () {
            return this.nElements <= 0;
        };
        Dictionary.prototype.toString = function () {
            var toret = '{';
            this.forEach(function (k, v) {
                toret += "\n\t" + k + " : " + v;
            });
            return toret + '\n}';
        };
        return Dictionary;
    }();
    Collection.Dictionary = Dictionary;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var LinkedDictionaryPair = function () {
        function LinkedDictionaryPair(key, value) {
            this.key = key;
            this.value = value;
        }
        LinkedDictionaryPair.prototype.unlink = function () {
            this.prev.next = this.next;
            this.next.prev = this.prev;
        };
        return LinkedDictionaryPair;
    }();
    var HeadOrTailLinkedDictionaryPair = function () {
        function HeadOrTailLinkedDictionaryPair() {
            this.key = null;
            this.value = null;
        }
        HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {
            this.prev.next = this.next;
            this.next.prev = this.prev;
        };
        return HeadOrTailLinkedDictionaryPair;
    }();
    function isHeadOrTailLinkedDictionaryPair(p) {
        return p.next === null;
    }
    var LinkedDictionary = function (_super) {
        __extends(LinkedDictionary, _super);
        function LinkedDictionary(toStrFunction) {
            var _this = _super.call(this, toStrFunction) || this;
            _this.head = new HeadOrTailLinkedDictionaryPair();
            _this.tail = new HeadOrTailLinkedDictionaryPair();
            _this.head.next = _this.tail;
            _this.tail.prev = _this.head;
            return _this;
        }
        LinkedDictionary.prototype.appendToTail = function (entry) {
            var lastNode = this.tail.prev;
            lastNode.next = entry;
            entry.prev = lastNode;
            entry.next = this.tail;
            this.tail.prev = entry;
        };
        LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {
            if (Collection.isUndefined(key)) {
                return undefined;
            }
            var k = '$' + this.toStr(key);
            var pair = this.table[k];
            return pair;
        };
        LinkedDictionary.prototype.getValue = function (key) {
            var pair = this.getLinkedDictionaryPair(key);
            if (!Collection.isUndefined(pair)) {
                return pair.value;
            }
            return undefined;
        };
        LinkedDictionary.prototype.remove = function (key) {
            var pair = this.getLinkedDictionaryPair(key);
            if (!Collection.isUndefined(pair)) {
                _super.prototype.remove.call(this, key);
                pair.unlink();
                return pair.value;
            }
            return undefined;
        };
        LinkedDictionary.prototype.clear = function () {
            _super.prototype.clear.call(this);
            this.head.next = this.tail;
            this.tail.prev = this.head;
        };
        LinkedDictionary.prototype.replace = function (oldPair, newPair) {
            var k = '$' + this.toStr(newPair.key);
            newPair.next = oldPair.next;
            newPair.prev = oldPair.prev;
            this.remove(oldPair.key);
            newPair.prev.next = newPair;
            newPair.next.prev = newPair;
            this.table[k] = newPair;
            ++this.nElements;
        };
        LinkedDictionary.prototype.setValue = function (key, value) {
            if (Collection.isUndefined(key) || Collection.isUndefined(value)) {
                return undefined;
            }
            var existingPair = this.getLinkedDictionaryPair(key);
            var newPair = new LinkedDictionaryPair(key, value);
            var k = '$' + this.toStr(key);
            if (!Collection.isUndefined(existingPair)) {
                this.replace(existingPair, newPair);
                return existingPair.value;
            } else {
                this.appendToTail(newPair);
                this.table[k] = newPair;
                ++this.nElements;
                return undefined;
            }
        };
        LinkedDictionary.prototype.keys = function () {
            var array = [];
            this.forEach(function (key, value) {
                array.push(key);
            });
            return array;
        };
        LinkedDictionary.prototype.values = function () {
            var array = [];
            this.forEach(function (key, value) {
                array.push(value);
            });
            return array;
        };
        LinkedDictionary.prototype.forEach = function (callback) {
            var crawlNode = this.head.next;
            while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {
                var ret = callback(crawlNode.key, crawlNode.value);
                if (ret === false) {
                    return;
                }
                crawlNode = crawlNode.next;
            }
        };
        return LinkedDictionary;
    }(Collection.Dictionary);
    Collection.LinkedDictionary = LinkedDictionary;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var Entry = function () {
        function Entry() {
            this.prev = null;
            this.next = null;
            this.obj = null;
        }
        return Entry;
    }();
    var List = function () {
        function List(toStringFunc) {
            this._head = new Entry();
            this._head.prev = this._head;
            this._head.next = this._head;
            this._objMap = new Collection.Dictionary(toStringFunc);
        }
        List.prototype._insert = function (obj, prev, next) {
            if (this._objMap.containsKey(obj)) {
                if (obj == prev.obj || obj == next.obj) {
                    return;
                }
                var oldElem = this._objMap.getValue(obj);
                this._remove(oldElem);
            }
            var elem = new Entry();
            elem.obj = obj;
            this._objMap.setValue(obj, elem);
            elem.prev = prev;
            elem.next = next;
            next.prev = elem;
            prev.next = elem;
        };
        List.prototype._remove = function (elem) {
            elem.next.prev = elem.prev;
            elem.prev.next = elem.next;
            this._objMap.remove(elem.obj);
        };
        List.prototype.push = function (obj, after) {
            var entry = null;
            if (after) {
                entry = this._objMap.getValue(after);
            }
            if (!entry) {
                entry = this._head.prev;
            }
            this._insert(obj, entry, entry.next);
        };
        List.prototype.pushFront = function (obj, before) {
            var entry = null;
            if (before) {
                entry = this._objMap.getValue(before);
            }
            if (!entry) {
                entry = this._head.next;
            }
            this._insert(obj, entry.prev, entry);
        };
        List.prototype.isEmpty = function () {
            return this._head.next == this._head || this._head.prev == this._head;
        };
        List.prototype.getFront = function () {
            if (this.isEmpty()) {
                return null;
            }
            return this._head.next.obj;
        };
        List.prototype.popFront = function () {
            if (this.isEmpty()) {
                return null;
            }
            var elem = this._head.next;
            this._remove(elem);
            return elem.obj;
        };
        List.prototype.getBack = function () {
            if (this.isEmpty()) {
                return null;
            }
            return this._head.prev.obj;
        };
        List.prototype.popBack = function () {
            if (this.isEmpty()) {
                return null;
            }
            var elem = this._head.prev;
            this._remove(elem);
            return elem.obj;
        };
        List.prototype.getNext = function (obj) {
            var elem = this._objMap.getValue(obj);
            return elem.next.obj;
        };
        List.prototype.getPrev = function (obj) {
            var elem = this._objMap.getValue(obj);
            return elem.prev.obj;
        };
        List.prototype.reverse = function () {
            for (var entry = this._head.next; entry != this._head;) {
                var n = entry.next;
                entry.next = entry.prev;
                entry.prev = n;
                entry = n;
            }
            var headNext = this._head.next;
            var headPrev = this._head.prev;
            this._head.next = headPrev;
            this._head.prev = headNext;
        };
        List.prototype.remove = function (obj) {
            var elem = this._objMap.getValue(obj);
            if (elem) {
                this._remove(elem);
            }
        };
        List.prototype.forEach = function (func, reverse) {
            if (reverse === void 0) {
                reverse = false;
            }
            if (reverse) {
                for (var entry = this._head.prev; entry != this._head; entry = entry.prev) {
                    func(entry.obj);
                }
            } else {
                for (var entry = this._head.next; entry != this._head; entry = entry.next) {
                    func(entry.obj);
                }
            }
        };
        Object.defineProperty(List.prototype, "length", {
            get: function get() {
                return this._objMap.keys().length;
            },
            enumerable: false,
            configurable: true
        });
        List.prototype.clear = function () {
            this._head.next = this._head;
            this._head.prev = this._head;
            this._objMap.clear();
        };
        return List;
    }();
    Collection.List = List;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var LruCache = function () {
        function LruCache(size, toStringFunc, onDestroyFunc) {
            this._size = 0;
            this._maxSize = 1;
            this._keyToObj = {};
            this._maxSize = size;
            this._toStr = toStringFunc;
            this._onDestroy = onDestroyFunc;
            this._lruList = new Collection.List(toStringFunc);
        }
        LruCache.prototype.get = function (k) {
            return this._keyToObj[k];
        };
        LruCache.prototype.use = function (obj) {
            this._lruList.pushFront(obj);
            var key = this._toStr(obj);
            if (!this._keyToObj[key]) {
                this._keyToObj[key] = obj;
                this._size++;
                if (this._size > this._maxSize) {
                    this._tidy(this._size - this._maxSize);
                }
            }
        };
        LruCache.prototype._tidy = function (cnt) {
            for (var i = 0; i < cnt; ++i) {
                var obj = this._lruList.popBack();
                if (obj) {
                    this._onDestroy(obj);
                    delete this._keyToObj[this._toStr(obj)];
                    this._size--;
                }
            }
        };
        LruCache.prototype.clear = function (destroy) {
            var _this = this;
            if (destroy === void 0) {
                destroy = false;
            }
            this._size = 0;
            this._keyToObj = {};
            if (destroy) {
                this._lruList.forEach(function (obj) {
                    _this._onDestroy(obj);
                });
            }
            this._lruList.clear();
        };
        return LruCache;
    }();
    Collection.LruCache = LruCache;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var MultiDictionary = function () {
        function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {
            if (allowDuplicateValues === void 0) {
                allowDuplicateValues = false;
            }
            this.dict = new Collection.Dictionary(toStrFunction);
            this.equalsF = valuesEqualsFunction || Collection.defaultEquals;
            this.allowDuplicate = allowDuplicateValues;
        }
        MultiDictionary.prototype.getValue = function (key) {
            var values = this.dict.getValue(key);
            if (Collection.isUndefined(values)) {
                return [];
            }
            return Collection.copy(values);
        };
        MultiDictionary.prototype.setValue = function (key, value) {
            if (Collection.isUndefined(key) || Collection.isUndefined(value)) {
                return false;
            }
            var array = this.dict.getValue(key);
            if (Collection.isUndefined(array)) {
                this.dict.setValue(key, [value]);
                return true;
            }
            if (!this.allowDuplicate) {
                if (Collection.contains(array, value, this.equalsF)) {
                    return false;
                }
            }
            array.push(value);
            return true;
        };
        MultiDictionary.prototype.remove = function (key, value) {
            if (Collection.isUndefined(value)) {
                var v = this.dict.remove(key);
                return !Collection.isUndefined(v);
            }
            var array = this.dict.getValue(key);
            if (!Collection.isUndefined(array) && Collection.remove(array, value, this.equalsF)) {
                if (array.length === 0) {
                    this.dict.remove(key);
                }
                return true;
            }
            return false;
        };
        MultiDictionary.prototype.keys = function () {
            return this.dict.keys();
        };
        MultiDictionary.prototype.values = function () {
            var values = this.dict.values();
            var array = [];
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                var v = values_1[_i];
                for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {
                    var w = v_1[_a];
                    array.push(w);
                }
            }
            return array;
        };
        MultiDictionary.prototype.containsKey = function (key) {
            return this.dict.containsKey(key);
        };
        MultiDictionary.prototype.clear = function () {
            this.dict.clear();
        };
        MultiDictionary.prototype.size = function () {
            return this.dict.size();
        };
        MultiDictionary.prototype.isEmpty = function () {
            return this.dict.isEmpty();
        };
        return MultiDictionary;
    }();
    Collection.MultiDictionary = MultiDictionary;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var Queue = function () {
        function Queue() {
            this.items = null;
            this.items = new Array();
        }
        Queue.prototype.enqueue = function (data) {
            this.items.push(data);
        };
        Queue.prototype.dequeue = function () {
            return this.items.shift();
        };
        Queue.prototype.head = function () {
            return this.items[0];
        };
        Queue.prototype.size = function () {
            return this.items.length;
        };
        Queue.prototype.clear = function () {
            this.items = new Array();
        };
        Queue.prototype.isEmpty = function () {
            return this.items.length === 0;
        };
        Queue.prototype.tail = function () {
            return this.items[this.items.length - 1];
        };
        Queue.prototype.toArray = function () {
            return this.items;
        };
        return Queue;
    }();
    Collection.Queue = Queue;
})(Collection || (Collection = {}));
var Collection;
(function (Collection) {
    var Set = function () {
        function Set(toStringFunction) {
            this.dictionary = new Collection.Dictionary(toStringFunction);
        }
        Set.prototype.contains = function (element) {
            return this.dictionary.containsKey(element);
        };
        Set.prototype.add = function (element) {
            if (this.contains(element) || Collection.isUndefined(element)) {
                return false;
            } else {
                this.dictionary.setValue(element, element);
                return true;
            }
        };
        Set.prototype.intersection = function (otherSet) {
            var set = this;
            this.forEach(function (element) {
                if (!otherSet.contains(element)) {
                    set.remove(element);
                }
                return true;
            });
        };
        Set.prototype.union = function (otherSet) {
            var set = this;
            otherSet.forEach(function (element) {
                set.add(element);
                return true;
            });
        };
        Set.prototype.difference = function (otherSet) {
            var set = this;
            otherSet.forEach(function (element) {
                set.remove(element);
                return true;
            });
        };
        Set.prototype.isSubsetOf = function (otherSet) {
            if (this.size() > otherSet.size()) {
                return false;
            }
            var isSub = true;
            this.forEach(function (element) {
                if (!otherSet.contains(element)) {
                    isSub = false;
                    return false;
                }
                return true;
            });
            return isSub;
        };
        Set.prototype.remove = function (element) {
            if (!this.contains(element)) {
                return false;
            } else {
                this.dictionary.remove(element);
                return true;
            }
        };
        Set.prototype.forEach = function (callback) {
            this.dictionary.forEach(function (k, v) {
                return callback(v);
            });
        };
        Set.prototype.toArray = function () {
            return this.dictionary.values();
        };
        Set.prototype.isEmpty = function () {
            return this.dictionary.isEmpty();
        };
        Set.prototype.size = function () {
            return this.dictionary.size();
        };
        Set.prototype.clear = function () {
            this.dictionary.clear();
        };
        Set.prototype.toString = function () {
            return Collection.toString(this.toArray());
        };
        return Set;
    }();
    Collection.Set = Set;
})(Collection || (Collection = {}));
var Core;
(function (Core) {
    var Base64 = function () {
        function Base64() {}
        Object.defineProperty(Base64, "nativeBase64", {
            get: function get() {
                return typeof window.atob === "function";
            },
            enumerable: false,
            configurable: true
        });
        Base64.decode = function (input) {
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            if (this.nativeBase64) {
                return window.atob(input);
            } else {
                var output = [],
                    chr1,
                    chr2,
                    chr3,
                    enc1,
                    enc2,
                    enc3,
                    enc4,
                    i = 0;
                while (i < input.length) {
                    enc1 = this._keyStr.indexOf(input.charAt(i++));
                    enc2 = this._keyStr.indexOf(input.charAt(i++));
                    enc3 = this._keyStr.indexOf(input.charAt(i++));
                    enc4 = this._keyStr.indexOf(input.charAt(i++));
                    chr1 = enc1 << 2 | enc2 >> 4;
                    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                    chr3 = (enc3 & 3) << 6 | enc4;
                    output.push(String.fromCharCode(chr1));
                    if (enc3 !== 64) {
                        output.push(String.fromCharCode(chr2));
                    }
                    if (enc4 !== 64) {
                        output.push(String.fromCharCode(chr3));
                    }
                }
                output = output.join("");
                return output;
            }
        };
        Base64.encode = function (input) {
            input = input.replace(/\r\n/g, "\n");
            if (this.nativeBase64) {
                window.btoa(input);
            } else {
                var output = [],
                    chr1,
                    chr2,
                    chr3,
                    enc1,
                    enc2,
                    enc3,
                    enc4,
                    i = 0;
                while (i < input.length) {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);
                    enc1 = chr1 >> 2;
                    enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                    enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                    enc4 = chr3 & 63;
                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }
                    output.push(this._keyStr.charAt(enc1));
                    output.push(this._keyStr.charAt(enc2));
                    output.push(this._keyStr.charAt(enc3));
                    output.push(this._keyStr.charAt(enc4));
                }
                output = output.join("");
                return output;
            }
        };
        Base64.decodeBase64AsArray = function (input, bytes) {
            bytes = bytes || 1;
            var dec = Base64.decode(input),
                i,
                j,
                len;
            var ar = new Uint32Array(dec.length / bytes);
            for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;
                for (j = bytes - 1; j >= 0; --j) {
                    ar[i] += dec.charCodeAt(i * bytes + j) << (j << 3);
                }
            }
            return ar;
        };
        Base64.decompress = function (data, decoded, compression) {
            throw new Error("GZIP/ZLIB compressed TMX Tile Map not supported!");
        };
        Base64.decodeCSV = function (input) {
            var entries = input.replace("\n", "").trim().split(",");
            var result = [];
            for (var i = 0; i < entries.length; i++) {
                result.push(+entries[i]);
            }
            return result;
        };
        Base64._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        return Base64;
    }();
    Core.Base64 = Base64;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var ColorType;
    (function (ColorType) {
        ColorType["None"] = "";
        ColorType["Red"] = "red";
        ColorType["Green"] = "green";
        ColorType["Yellow"] = "yellow";
        ColorType["Gray"] = "gray";
        ColorType["Blue"] = "blue";
        ColorType["Black"] = "black";
        ColorType["White"] = "white";
        ColorType["Orange"] = "orange";
    })(ColorType = Core.ColorType || (Core.ColorType = {}));
    function str2ColorStrText(type, str) {
        if (type != "") {
            return "[color=" + type + "]" + str + "[/color]";
        }
        return "" + str;
    }
    Core.str2ColorStrText = str2ColorStrText;
    function toColor(colorValue) {
        return cc.color(colorValue >> 16 & 0xFF, colorValue >> 8 & 0xFF, colorValue & 0xFF);
    }
    Core.toColor = toColor;
    Core.TextColors = {
        white: toColor(0xFFFFFF),
        milkWhite: toColor(0xfbf1af),
        grayWhite: toColor(0xceb6a2),
        gray: toColor(0x333333),
        yellow: toColor(0xfcdb00),
        lightYellow: toColor(0xffd375),
        orangeYellow: toColor(0xff9900),
        orange: toColor(0xe08328),
        red: toColor(0xd33737),
        green: toColor(0x2fb431),
        blue: toColor(0x38a5e4),
        grayBlue: toColor(0x2f5177),
        purple: toColor(0xf13ad1),
        pink: toColor(0xFF3030),
        black: toColor(0x000000),
        golden: toColor(0xFFD700),
        brownness: toColor(0x691313)
    };
    Core.ColorsCode = {
        "g": 0x2fb431,
        "b": 0x38a5e4,
        "p": 0xf13ad1,
        "o": 0xe08328,
        "r": 0xd33737,
        "y": 0xFF9900,
        "m": 0xffd4a9,
        "z": 0x3b3421,
        "B": 0x000000,
        "w": 0xffffff,
        "l": 0x691313,
        "R": 0x5b2b0e,
        "G": 0x645c4d
    };
    Core.ColorsPrefix = {
        "g": "2fb431",
        "b": "38a5e4",
        "p": "f13ad1",
        "o": "e08328",
        "r": "d33737",
        "y": "ff9900",
        "m": "ffd4a9",
        "z": "3b3421",
        "B": "000000",
        "w": "ffffff",
        "l": "691313",
        "R": "5b2b0e",
        "G": "645c4d"
    };
})(Core || (Core = {}));
var Core;
(function (Core) {
    var EventCenter = function (_super) {
        __extends(EventCenter, _super);
        function EventCenter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(EventCenter, "inst", {
            get: function get() {
                if (!EventCenter._inst) {
                    EventCenter._inst = new EventCenter();
                }
                return EventCenter._inst;
            },
            enumerable: false,
            configurable: true
        });
        return EventCenter;
    }(egret.EventDispatcher);
    Core.EventCenter = EventCenter;
    var Event = function () {
        function Event() {}
        Event.CloseViewEvt = "CloseViewEvt";
        Event.OpenViewEvt = "OpenViewEvt";
        Event.OpenEnvChangeView = "OpenEnvChangeView";
        Event.CloseEnvChangeView = "CloseEnvChangeView";
        Event.LoginOnceEv = "LoginOnceEv";
        Event.ReLoginEv = "ReLoginEv";
        Event.AddTreasureEvt = "AddTreasureEv";
        Event.DelTreasureEvt = "DelTreasureEv";
        Event.UpdateTreasureEvt = "UpdateTreasureEvt";
        Event.UpdateDailyTreasureEvt = "UpdateDailyTreasureEvt";
        Event.UpdateADTreasureEvt = "UpdateADTreasureEvt";
        Event.HomeListChangedEvt = "HomeListChangeEvt";
        Event.CardHintNumChangeEv = "CardHintNumChangeEv";
        Event.LevelHintNumChangeEv = "LevelHintNumChangeEv";
        Event.AvatarHintNumChangeEv = "AvatarHintNumChangeEv";
        Event.ReConnectEv = "ReConnectEv";
        return Event;
    }();
    Core.Event = Event;
})(Core || (Core = {}));
var Core;
(function (Core) {
    function callJS(message) {
        console.log("callJS:" + message);
        var data = JSON.parse(message);
        var msg = data.msg;
        var items = NativeMsgCenter.inst.getListeners(msg);
        if (items) {
            items.forEach(function (item, _) {
                if (item.callback) {
                    if (item.thisArg) {
                        item.callback.apply(item.thisArg, [data.args]);
                    } else {
                        item.callback(data.args);
                    }
                    if (item.resolve) {
                        item.resolve(data.args);
                    }
                }
            });
        }
    }
    Core.callJS = callJS;
    var NativeMessage = function () {
        function NativeMessage() {}
        NativeMessage.GET_GAME_CONFIG = "getGameConfig";
        NativeMessage.INIT_SDK = "initSDK";
        NativeMessage.INIT_SDK_DONE = "initSDKDone";
        NativeMessage.LOGIN = "login";
        NativeMessage.LOGIN_DONE = "loginDone";
        NativeMessage.REPORT_USER_INFO = "reportUserInfo";
        NativeMessage.LOGOUT = "logout";
        NativeMessage.LOGOUT_DONE = "logoutDone";
        NativeMessage.IS_TOURIST = "isTourist";
        NativeMessage.BIND_ACC = "bindAcc";
        NativeMessage.BIND_ACC_DONE = "bindAccDone";
        NativeMessage.ON_START = "onStart";
        NativeMessage.ON_STOP = "onStop";
        NativeMessage.ON_RESUME = "onResume";
        NativeMessage.ON_PAUSE = "onPause";
        NativeMessage.ON_TICK = "onTick";
        NativeMessage.USE_NATIVE_SOUND = "useNativeSound";
        NativeMessage.PLAY_SOUND = "playSound";
        NativeMessage.STOP_SOUND = "stopSound";
        NativeMessage.PLAY_MUSIC = "playMusic";
        NativeMessage.STOP_MUSIC = "stopMusic";
        NativeMessage.SET_MUSIC_VOLUME = "setMusicVolume";
        NativeMessage.RELEASE_ALL_SOUND = "releaseAllSound";
        NativeMessage.ON_ENTER_GAME = "onEnterGame";
        NativeMessage.ON_CREATE_ROLE = "onCreateRole";
        NativeMessage.ON_LEVEL_UP = "onLevelUp";
        NativeMessage.GET_TD_CHANNEL_ID = "getTDChannelID";
        NativeMessage.START_RECORD = "startRecord";
        NativeMessage.STOP_RECORD = "stopRecord";
        NativeMessage.START_RECORD_COMPLETE = "startRecordComplete";
        NativeMessage.ADS_INIT = "initAds";
        NativeMessage.ADS_SHOW_RWD = "showRwdAds";
        NativeMessage.ADS_FINISH_RWD = "finishRwdAds";
        NativeMessage.ADS_IS_READY = "adsIsReady";
        NativeMessage.ADS_READY = "adsReady";
        NativeMessage.ON_START_MATCH = "onStartMatch";
        NativeMessage.SAVE_TO_PHOTO = "saveToPhoto";
        NativeMessage.SHARE_VIDEO = "shareVideo";
        NativeMessage.SHARE_LINK = "shareLink";
        NativeMessage.SHARE_LINK_COMPLETE = "shareLinkComplete";
        NativeMessage.SHARE_IMAGE = "shareImage";
        NativeMessage.SHARE_IMAGE_COMPLETE = "shareImageComplete";
        NativeMessage.INIT_APPSTORE_PAY = "initAppstorePay";
        NativeMessage.APPSTORE_REQ_PRODUCTS = "appstoreRequestProducts";
        NativeMessage.APPSTORE_GET_PRODUCTS = "appstoreGetProducts";
        NativeMessage.START_PAY = "startPay";
        NativeMessage.FINISH_PAY = "finishPay";
        NativeMessage.SET_SUPPORT_RECORD = "setSupportRecord";
        NativeMessage.OPEN_APP_COMMENT = "openAppComment";
        NativeMessage.ON_SHOW_LOADING = "onShowLoading";
        NativeMessage.SHARE_APP2WECHAT = "shareApp2Wechat";
        NativeMessage.SHARE_BY_PARAM = "shareByParam";
        NativeMessage.SHARE_IMG2WECHAT = "shareImage2Wechat";
        NativeMessage.LOGIN_GAME_CENTER = "loginGameCenter";
        NativeMessage.SCORE_TO_GAME_CENTER = "scoreToGameCenter";
        NativeMessage.SHOW_GAME_CENTER_RANK = "showGameCenterRank";
        NativeMessage.SHOW_GAME_CENTER_ACHIEVE = "showGameCenterAchievement";
        NativeMessage.PLATFORM_ACHIEVE_DONE = "platformAchieveDone";
        NativeMessage.CREATE_NOTIFY = "createNotify";
        NativeMessage.REMOVE_NOTIFY = "removeNotify";
        NativeMessage.SET_LOADING_PERCENT = "setLoadingPercent";
        NativeMessage.GOOGLEPLAY_REQ_PRODUCTS = "googleplayReqProducts";
        NativeMessage.GOOGLEPLAY_GET_PRODUCTS = "googleplayGetProducts";
        NativeMessage.SHARE_MINIPROGRAM2WECHAT = "shareMiniProgram2Wechat";
        NativeMessage.TD_ACCOUNT = "td_Account";
        NativeMessage.TD_ONPAGELEAVE = "td_onPageLeave";
        NativeMessage.TD_ONMISSIONBEGIN = "td_onMissionBegin";
        NativeMessage.TD_ONMISSIONCOMPLETED = "td_onMissionCompleted";
        NativeMessage.TD_ONMISSIONFAILED = "td_onMissionFailed";
        NativeMessage.TD_ONITEMPURCHASE = "td_onItemPurchase";
        NativeMessage.TD_ONITEMUSE = "td_onItemUse";
        NativeMessage.TD_ONEVENT = "td_onEvent";
        NativeMessage.TD_SETLEVEL = "td_setLevel";
        NativeMessage.SDK_STATISTIC = "sdkStatistic";
        NativeMessage.GET_LOCALE = "getLocale";
        NativeMessage.APPSTORE_CHECK_VERSION = "appStoreCheckVersion";
        NativeMessage.OPEN_URL = "openUrl";
        NativeMessage.VIBRATE = "vibrate";
        NativeMessage.PATCH = "patch";
        NativeMessage.PATCH_PROGRESS = "patchProgress";
        NativeMessage.PATCH_UNZIP_PROGRESS = "patchUnzipProgress";
        NativeMessage.PATCH_FINISH = "patchFinish";
        NativeMessage.APK_UPDATE_READY = "apkUpdateReady";
        NativeMessage.APK_UPDATE = "apkUpdate";
        NativeMessage.APK_UPDATE_PROGRESS = "apkUpdateProgress";
        NativeMessage.APK_UPDATE_FINISH = "apkUpdateFinish";
        NativeMessage.PUSH_SILENT_TIME = "pushSilentTime";
        NativeMessage.PUSH_CID = "pushCid";
        NativeMessage.COPY_TO_CLIPBOARD = "copyToClipboard";
        NativeMessage.IOS_ATT_REQ = "iOSAttReq";
        NativeMessage.ANDROID_DELAY_INIT_SDK = "delayInitSDK";
        return NativeMessage;
    }();
    Core.NativeMessage = NativeMessage;
    var ListenerItem = function () {
        function ListenerItem() {}
        return ListenerItem;
    }();
    Core.ListenerItem = ListenerItem;
    var NativeMsgCenter = function () {
        function NativeMsgCenter() {
            this._listeners = new Collection.Dictionary();
        }
        Object.defineProperty(NativeMsgCenter, "inst", {
            get: function get() {
                if (!NativeMsgCenter._inst) {
                    NativeMsgCenter._inst = new NativeMsgCenter();
                }
                return NativeMsgCenter._inst;
            },
            enumerable: false,
            configurable: true
        });
        NativeMsgCenter.prototype.getListeners = function (msg) {
            return this._listeners.getValue(msg);
        };
        NativeMsgCenter.prototype.addListener = function (name, callback, thisArg) {
            var item = new ListenerItem();
            item.callback = callback;
            item.thisArg = thisArg;
            item.resolve = null;
            if (!this._listeners.containsKey(name)) {
                this._listeners.setValue(name, new Collection.Dictionary());
            }
            var items = this._listeners.getValue(name);
            items.setValue(item, true);
            return item;
        };
        NativeMsgCenter.prototype.removeListener = function (name, callback, thisArg) {
            var items = this._listeners.getValue(name);
            if (items) {
                var dels_1 = Array();
                items.forEach(function (item, _) {
                    if (item.callback == callback && item.thisArg == thisArg) {
                        dels_1.push(item);
                    }
                });
                dels_1.forEach(function (item) {
                    items.remove(item);
                });
            }
        };
        NativeMsgCenter.prototype.callNative = function (name, args) {
            if (args === void 0) {
                args = {};
            }
            if (!Core.DeviceUtils.isNative()) {
                return;
            }
            var callArgs = {
                "msg": name,
                "args": args
            };
            var message = JSON.stringify(callArgs);
            try {
                return window["GameLogic"]["callNative"](message);
            } catch (e) {
                console.error("callNative error ", e);
            }
        };
        NativeMsgCenter.prototype._waitMessageCallback = function (arg) {};
        NativeMsgCenter.prototype.sendAndWaitNativeMessage = function (sendName, waitName, args) {
            return __awaiter(this, void 0, void 0, function () {
                var listener, self, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            listener = this.addListener(waitName, this._waitMessageCallback, this);
                            self = this;
                            return [4, new Promise(function (resolve) {
                                listener.resolve = resolve;
                                self.callNative(sendName, args);
                            })];
                        case 1:
                            ret = _a.sent();
                            this.removeListener(waitName, this._waitMessageCallback, this);
                            return [2, ret];
                    }
                });
            });
        };
        NativeMsgCenter._inst = null;
        return NativeMsgCenter;
    }();
    Core.NativeMsgCenter = NativeMsgCenter;
})(Core || (Core = {}));
var fgui;
(function (fgui) {
    fgui.NEW_ENGINE_VERSION = "2.2.2";
    var GObject = function () {
        function GObject() {
            this._x = 0;
            this._y = 0;
            this._alpha = 1;
            this._visible = true;
            this._originVisible = true;
            this._touchable = true;
            this._grayed = false;
            this._draggable = false;
            this._skewX = 0;
            this._skewY = 0;
            this._pivotAsAnchor = false;
            this._sortingOrder = 0;
            this._internalVisible = true;
            this._handlingController = false;
            this._pixelSnapping = false;
            this._dragTesting = false;
            this.sourceWidth = 0;
            this.sourceHeight = 0;
            this.initWidth = 0;
            this.initHeight = 0;
            this.minWidth = 0;
            this.minHeight = 0;
            this.maxWidth = 0;
            this.maxHeight = 0;
            this._width = 0;
            this._height = 0;
            this._rawWidth = 0;
            this._rawHeight = 0;
            this._sizePercentInGroup = 0;
            this._touchDisabled = false;
            this._delayAddFlag = false;
            this._node = new cc.Node();
            if (GObject._defaultGroupIndex == -1) {
                GObject._defaultGroupIndex = 0;
                var groups = cc.game.groupList;
                var cnt = groups.length;
                for (var i = 0; i < cnt; i++) {
                    if (groups[i].toLowerCase() == fgui.UIConfig.defaultUIGroup.toLowerCase()) {
                        GObject._defaultGroupIndex = i;
                        break;
                    }
                }
            }
            this._node["$gobj"] = this;
            this._node.groupIndex = GObject._defaultGroupIndex;
            this._node.setAnchorPoint(0, 1);
            this._node.on(cc.Node.EventType.ANCHOR_CHANGED, this.handleAnchorChanged, this);
            this._id = this._node.uuid;
            this._name = "";
            this._relations = new fgui.Relations(this);
            this._gears = new Array(10);
            this._blendMode = fgui.BlendMode.Normal;
            this._hashIdx = ++GObject._gHashIdx;
            this.genPartner();
        }
        GObject.addTouchEventListener = function (cbFunc, thisObj) {
            GObject._touchEventListener.push({ callback: cbFunc, obj: thisObj });
        };
        GObject.onDispatchEvent = function (event) {
            console.log("fgui.touch eventType", event);
            GObject._touchEventListener.forEach(function (listener) {
                var func = listener.callback;
                var obj = listener.thisObj;
                if (event == GObject._lastEvent) {
                    return;
                } else {
                    console.log("fgui.touch inner eventType", event);
                    func(event, event.touch.getLocation().x, event.touch.getLocation().y);
                }
                GObject._lastEvent = event;
            });
        };
        GObject.doDispatchEvent = function (event) {
            fgui.GRoot.inst._node.dispatchEvent(event);
        };
        GObject.prototype.genPartner = function () {
            this._partner = this._node.addComponent(GObjectPartner);
        };
        GObject.prototype.once = function (type, callback, target, useCapture) {
            this.node.once(type, callback, target, useCapture);
        };
        GObject.prototype.dispatchEventWith = function (type, bubble, data) {
            var event = new cc.Event.EventCustom(type, bubble);
            event.setUserData(data);
            this.node.dispatchEvent(event);
        };
        Object.defineProperty(GObject.prototype, "id", {
            get: function get() {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "hashIdx", {
            get: function get() {
                return this._hashIdx;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "name", {
            get: function get() {
                return this._name;
            },
            set: function set(value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "x", {
            get: function get() {
                return this._x;
            },
            set: function set(value) {
                this.setPosition(value, this._y);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "y", {
            get: function get() {
                return this._y;
            },
            set: function set(value) {
                this.setPosition(this._x, value);
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.setPosition = function (xv, yv) {
            if (this._x != xv || this._y != yv) {
                var dx = xv - this._x;
                var dy = yv - this._y;
                this._x = xv;
                this._y = yv;
                this.handlePositionChanged();
                if (this instanceof fgui.GGroup) this.moveChildren(dx, dy);
                this.updateGear(1);
                if (this._parent && !(this._parent instanceof fgui.GList)) {
                    this._parent.setBoundsChangedFlag();
                    if (this._group != null) this._group.setBoundsChangedFlag(true);
                    this._node.emit(fgui.Event.XY_CHANGED, this);
                }
                if (GObject.draggingObject == this && !GObject.sUpdateInDragging) this.localToGlobalRect(0, 0, this._width, this._height, GObject.sGlobalRect);
            }
        };
        Object.defineProperty(GObject.prototype, "xMin", {
            get: function get() {
                return this._pivotAsAnchor ? this._x - this._width * this.node.anchorX : this._x;
            },
            set: function set(value) {
                if (this._pivotAsAnchor) this.setPosition(value + this._width * this.node.anchorX, this._y);else this.setPosition(value, this._y);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "yMin", {
            get: function get() {
                return this._pivotAsAnchor ? this._y - this._height * (1 - this.node.anchorY) : this._y;
            },
            set: function set(value) {
                if (this._pivotAsAnchor) this.setPosition(this._x, value + this._height * (1 - this.node.anchorY));else this.setPosition(this._x, value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "pixelSnapping", {
            get: function get() {
                return this._pixelSnapping;
            },
            set: function set(value) {
                if (this._pixelSnapping != value) {
                    this._pixelSnapping = value;
                    this.handlePositionChanged();
                }
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.center = function (restraint) {
            var r;
            if (this._parent != null) r = this.parent;else r = this.root;
            this.setPosition((r.width - this._width) / 2, (r.height - this._height) / 2);
            if (restraint) {
                this.addRelation(r, fgui.RelationType.Center_Center);
                this.addRelation(r, fgui.RelationType.Middle_Middle);
            }
        };
        Object.defineProperty(GObject.prototype, "width", {
            get: function get() {
                this.ensureSizeCorrect();
                if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
                return this._width;
            },
            set: function set(value) {
                this.setSize(value, this._rawHeight);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "height", {
            get: function get() {
                this.ensureSizeCorrect();
                if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
                return this._height;
            },
            set: function set(value) {
                this.setSize(this._rawWidth, value);
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.setSize = function (wv, hv, ignorePivot) {
            if (this._rawWidth != wv || this._rawHeight != hv) {
                this._rawWidth = wv;
                this._rawHeight = hv;
                if (wv < this.minWidth) wv = this.minWidth;
                if (hv < this.minHeight) hv = this.minHeight;
                if (this.maxWidth > 0 && wv > this.maxWidth) wv = this.maxWidth;
                if (this.maxHeight > 0 && hv > this.maxHeight) hv = this.maxHeight;
                var dWidth = wv - this._width;
                var dHeight = hv - this._height;
                this._width = wv;
                this._height = hv;
                this.handleSizeChanged();
                if ((this.node.anchorX != 0 || this.node.anchorY != 1) && !this._pivotAsAnchor && !ignorePivot) this.setPosition(this.x - this.node.anchorX * dWidth, this.y - (1 - this.node.anchorY) * dHeight);else this.handlePositionChanged();
                if (this instanceof fgui.GGroup) this.resizeChildren(dWidth, dHeight);
                this.updateGear(2);
                if (this._parent) {
                    this._relations.onOwnerSizeChanged(dWidth, dHeight, this._pivotAsAnchor || !ignorePivot);
                    this._parent.setBoundsChangedFlag();
                    if (this._group != null) this._group.setBoundsChangedFlag();
                }
                this._node.emit(fgui.Event.SIZE_CHANGED, this);
            }
        };
        GObject.prototype.makeFullScreen = function () {
            this.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height);
        };
        GObject.prototype.ensureSizeCorrect = function () {};
        Object.defineProperty(GObject.prototype, "actualWidth", {
            get: function get() {
                return this.width * Math.abs(this._node.scaleX);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "actualHeight", {
            get: function get() {
                return this.height * Math.abs(this._node.scaleY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "scaleX", {
            get: function get() {
                return this._node.scaleX;
            },
            set: function set(value) {
                this.setScale(value, this._node.scaleY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "scaleY", {
            get: function get() {
                return this._node.scaleY;
            },
            set: function set(value) {
                this.setScale(this._node.scaleX, value);
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.setScale = function (sx, sy) {
            if (this._node.scaleX != sx || this._node.scaleY != sy) {
                this._node.setScale(sx, sy);
                this.updateGear(2);
            }
        };
        Object.defineProperty(GObject.prototype, "skewX", {
            get: function get() {
                return this._skewX;
            },
            set: function set(value) {
                this.setSkew(value, this._skewY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "skewY", {
            get: function get() {
                return this._skewY;
            },
            set: function set(value) {
                this.setSkew(this._skewX, value);
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.setSkew = function (xv, yv) {
            if (this._skewX != xv || this._skewY != yv) {
                this._skewX = xv;
                this._skewY = yv;
                this._node.skewX = xv;
                this._node.skewY = yv;
            }
        };
        Object.defineProperty(GObject.prototype, "pivotX", {
            get: function get() {
                return this.node.anchorX;
            },
            set: function set(value) {
                this.node.anchorX = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "pivotY", {
            get: function get() {
                return 1 - this.node.anchorY;
            },
            set: function set(value) {
                this.node.anchorY = 1 - value;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.setPivot = function (xv, yv, asAnchor) {
            if (this.node.anchorX != xv || this.node.anchorY != 1 - yv) {
                this._pivotAsAnchor = asAnchor;
                this.node.setAnchorPoint(xv, 1 - yv);
            } else if (this._pivotAsAnchor != asAnchor) {
                this._pivotAsAnchor = asAnchor;
                this.handlePositionChanged();
            }
        };
        Object.defineProperty(GObject.prototype, "pivotAsAnchor", {
            get: function get() {
                return this._pivotAsAnchor;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "touchable", {
            get: function get() {
                return this._touchable;
            },
            set: function set(value) {
                if (this._touchable != value) {
                    this._touchable = value;
                    this.updateGear(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "grayed", {
            get: function get() {
                return this._grayed;
            },
            set: function set(value) {
                if (this._grayed != value) {
                    this._grayed = value;
                    this.handleGrayedChanged();
                    this.updateGear(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "enabled", {
            get: function get() {
                return !this._grayed && this._touchable;
            },
            set: function set(value) {
                this.grayed = !value;
                this.touchable = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "rotation", {
            get: function get() {
                return -this._node.angle;
            },
            set: function set(value) {
                value = -value;
                if (this._node.angle != value) {
                    this._node.angle = value;
                    this.updateGear(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "alpha", {
            get: function get() {
                return this._alpha;
            },
            set: function set(value) {
                if (this._alpha != value) {
                    this._alpha = value;
                    this._node.opacity = this._alpha * 255;
                    if (this instanceof fgui.GGroup) this.handleAlphaChanged();
                    this.updateGear(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "visible", {
            get: function get() {
                return this._visible;
            },
            set: function set(value) {
                if (this._visible != value) {
                    this._visible = value;
                    this._originVisible = value;
                    this.handleVisibleChanged();
                    if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.saveAndSetVisible = function (value) {
            this._originVisible = this._visible;
            if (this._visible != value) {
                this._visible = value;
                this.handleVisibleChanged();
                if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
            }
        };
        GObject.prototype.recoverVisible = function () {
            this.visible = this._originVisible;
        };
        Object.defineProperty(GObject.prototype, "_finalVisible", {
            get: function get() {
                return this._visible && this._internalVisible && (!this._group || this._group._finalVisible);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "internalVisible3", {
            get: function get() {
                return this._visible && this._internalVisible;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "sortingOrder", {
            get: function get() {
                return this._sortingOrder;
            },
            set: function set(value) {
                if (value < 0) value = 0;
                if (this._sortingOrder != value) {
                    var old = this._sortingOrder;
                    this._sortingOrder = value;
                    if (this._parent != null) this._parent.childSortingOrderChanged(this, old, this._sortingOrder);
                }
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.requestFocus = function () {};
        Object.defineProperty(GObject.prototype, "tooltips", {
            get: function get() {
                return this._tooltips;
            },
            set: function set(value) {
                if (this._tooltips) {
                    this._node.off(fgui.Event.ROLL_OVER, this.onRollOver, this);
                    this._node.off(fgui.Event.ROLL_OUT, this.onRollOut, this);
                }
                this._tooltips = value;
                if (this._tooltips) {
                    this._node.on(fgui.Event.ROLL_OVER, this.onRollOver, this);
                    this._node.on(fgui.Event.ROLL_OUT, this.onRollOut, this);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "blendMode", {
            get: function get() {
                return this._blendMode;
            },
            set: function set(value) {
                if (this._blendMode != value) {
                    this._blendMode = value;
                    fgui.BlendModeUtils.apply(this._node, value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "onStage", {
            get: function get() {
                return this._node.activeInHierarchy;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "resourceURL", {
            get: function get() {
                if (this.packageItem != null) return "ui://" + this.packageItem.owner.id + this.packageItem.id;else return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "group", {
            get: function get() {
                return this._group;
            },
            set: function set(value) {
                if (this._group != value) {
                    if (this._group != null) this._group.setBoundsChangedFlag();
                    this._group = value;
                    if (this._group != null) this._group.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.getGear = function (index) {
            var gear = this._gears[index];
            if (gear == null) this._gears[index] = gear = fgui.GearBase.create(this, index);
            return gear;
        };
        GObject.prototype.updateGear = function (index) {
            if (this._underConstruct || this._gearLocked) return;
            var gear = this._gears[index];
            if (gear != null && gear.controller != null) gear.updateState();
        };
        GObject.prototype.checkGearController = function (index, c) {
            return this._gears[index] != null && this._gears[index].controller == c;
        };
        GObject.prototype.updateGearFromRelations = function (index, dx, dy) {
            if (this._gears[index] != null) this._gears[index].updateFromRelations(dx, dy);
        };
        GObject.prototype.addDisplayLock = function () {
            var gearDisplay = this._gears[0];
            if (gearDisplay && gearDisplay.controller) {
                var ret = gearDisplay.addLock();
                this.checkGearDisplay();
                return ret;
            } else return 0;
        };
        GObject.prototype.releaseDisplayLock = function (token) {
            var gearDisplay = this._gears[0];
            if (gearDisplay && gearDisplay.controller) {
                gearDisplay.releaseLock(token);
                this.checkGearDisplay();
            }
        };
        GObject.prototype.applyGearDisplay = function (connected) {
            if (connected != this._internalVisible) {
                this._internalVisible = connected;
                this.handleVisibleChanged();
                if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
            }
        };
        GObject.prototype.checkGearDisplay = function () {
            if (this._handlingController) return;
            var connected = this._gears[0] == null || this._gears[0].connected;
            if (this._gears[8]) connected = this._gears[8].evaluate(connected);
            this.applyGearDisplay(connected);
        };
        Object.defineProperty(GObject.prototype, "gearXY", {
            get: function get() {
                return this.getGear(1);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "gearSize", {
            get: function get() {
                return this.getGear(2);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "gearLook", {
            get: function get() {
                return this.getGear(3);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "relations", {
            get: function get() {
                return this._relations;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.addRelation = function (target, relationType, usePercent) {
            this._relations.add(target, relationType, usePercent);
        };
        GObject.prototype.removeRelation = function (target, relationType) {
            this._relations.remove(target, relationType);
        };
        Object.defineProperty(GObject.prototype, "node", {
            get: function get() {
                return this._node;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "parent", {
            get: function get() {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.removeFromParent = function () {
            if (this._parent) this._parent.removeChild(this);
        };
        GObject.prototype.findParent = function () {
            if (this._parent) return this._parent;
            var pn = this._node.parent;
            while (pn) {
                var gobj = pn["$gobj"];
                if (gobj) return gobj;
                pn = pn.parent;
            }
            return null;
        };
        Object.defineProperty(GObject.prototype, "root", {
            get: function get() {
                if (this instanceof fgui.GRoot) return this;
                var p = this._parent;
                while (p) {
                    if (p instanceof fgui.GRoot) return p;
                    p = p.parent;
                }
                return fgui.GRoot.inst;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asCom", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asButton", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asLabel", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asProgress", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asTextField", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asRichTextField", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asTextInput", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asLoader", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asList", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asTree", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asGraph", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asGroup", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asSlider", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asComboBox", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asImage", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "asMovieClip", {
            get: function get() {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        GObject.cast = function (obj) {
            return obj["$gobj"];
        };
        Object.defineProperty(GObject.prototype, "text", {
            get: function get() {
                return null;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "icon", {
            get: function get() {
                return null;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "treeNode", {
            get: function get() {
                return this._treeNode;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.dispose = function () {
            var n = this._node;
            if (!n) return;
            this.removeFromParent();
            this._relations.dispose();
            this._node = null;
            n.destroy();
            for (var i = 0; i < 10; i++) {
                var gear = this._gears[i];
                if (gear != null) gear.dispose();
            }
        };
        GObject.prototype.onEnable = function () {};
        GObject.prototype.onDisable = function () {};
        GObject.prototype.onUpdate = function () {};
        GObject.prototype.onDestroy = function () {};
        GObject.prototype.onClick = function (listener, target) {
            this._node.on(fgui.Event.CLICK, listener, target);
        };
        GObject.prototype.offClick = function (listener, target) {
            this._node.off(fgui.Event.CLICK, listener, target);
        };
        GObject.prototype.hasClickListener = function () {
            return this._node.hasEventListener(fgui.Event.CLICK);
        };
        GObject.prototype.on = function (type, listener, target) {
            if (type == fgui.Event.DISPLAY || type == fgui.Event.UNDISPLAY) this._partner._emitDisplayEvents = true;
            this._node.on(type, listener, target);
        };
        GObject.prototype.off = function (type, listener, target) {
            this._node.off(type, listener, target);
        };
        Object.defineProperty(GObject.prototype, "draggable", {
            get: function get() {
                return this._draggable;
            },
            set: function set(value) {
                if (this._draggable != value) {
                    this._draggable = value;
                    this.initDrag();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GObject.prototype, "dragBounds", {
            get: function get() {
                return this._dragBounds;
            },
            set: function set(value) {
                this._dragBounds = value;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.startDrag = function (touchId) {
            if (!this._node.activeInHierarchy) return;
            this.dragBegin(touchId);
        };
        GObject.prototype.stopDrag = function () {
            this.dragEnd();
        };
        Object.defineProperty(GObject.prototype, "dragging", {
            get: function get() {
                return GObject.draggingObject == this;
            },
            enumerable: false,
            configurable: true
        });
        GObject.prototype.localToGlobal = function (ax, ay, resultPoint) {
            if (ax == undefined) ax = 0;
            if (ay == undefined) ay = 0;
            var pt = resultPoint || new cc.Vec2();
            pt.x = ax;
            pt.y = ay;
            pt.y = -pt.y;
            pt.x -= this.node.anchorX * this._width;
            pt.y += (1 - this.node.anchorY) * this._height;
            var v3 = this._node.convertToWorldSpaceAR(pt);
            pt.x = v3.x;
            pt.y = fgui.GRoot.inst.height * fgui.GRoot.contentScaleFactor - v3.y;
            return pt;
        };
        GObject.prototype.globalToLocal = function (ax, ay, resultPoint) {
            if (ax == undefined) ax = 0;
            if (ay == undefined) ay = 0;
            var pt = resultPoint || new cc.Vec2();
            pt.x = ax;
            pt.y = fgui.GRoot.inst.height * fgui.GRoot.contentScaleFactor - ay;
            var v3 = this._node.convertToNodeSpaceAR(pt);
            pt.x = v3.x;
            pt.y = v3.y;
            pt.x -= this._node.anchorX * this._width;
            pt.y += (1 - this._node.anchorY) * this._height;
            pt.y = -pt.y;
            return pt;
        };
        GObject.prototype.localToRoot = function (ax, ay, resultPoint) {
            var pt = this.localToGlobal(ax, ay, resultPoint);
            pt.x /= fgui.GRoot.contentScaleFactor;
            pt.y /= fgui.GRoot.contentScaleFactor;
            pt.x -= fgui.GRoot.inst.x / fgui.GRoot.contentScaleFactor;
            pt.y -= fgui.GRoot.inst.y;
            return pt;
        };
        GObject.prototype.rootToLocal = function (ax, ay, resultPoint) {
            ax += fgui.GRoot.inst.x / fgui.GRoot.contentScaleFactor;
            ay += fgui.GRoot.inst.y;
            ax *= fgui.GRoot.contentScaleFactor;
            ay *= fgui.GRoot.contentScaleFactor;
            var pt = this.globalToLocal(ax, ay, resultPoint);
            return pt;
        };
        GObject.prototype.localToGlobalRect = function (ax, ay, aw, ah, resultRect) {
            if (ax == undefined) ax = 0;
            if (ay == undefined) ay = 0;
            if (aw == undefined) aw = 0;
            if (ah == undefined) ah = 0;
            var ret = resultRect || new cc.Rect();
            var pt = this.localToGlobal(ax, ay);
            ret.x = pt.x;
            ret.y = pt.y;
            pt = this.localToGlobal(ax + aw, ay + ah, pt);
            ret.xMax = pt.x;
            ret.yMax = pt.y;
            return ret;
        };
        GObject.prototype.globalToLocalRect = function (ax, ay, aw, ah, resultRect) {
            if (ax == undefined) ax = 0;
            if (ay == undefined) ay = 0;
            if (aw == undefined) aw = 0;
            if (ah == undefined) ah = 0;
            var ret = resultRect || new cc.Rect();
            var pt = this.globalToLocal(ax, ay);
            ret.x = pt.x;
            ret.y = pt.y;
            pt = this.globalToLocal(ax + aw, ay + ah, pt);
            ret.xMax = pt.x;
            ret.yMax = pt.y;
            return ret;
        };
        GObject.prototype.handleControllerChanged = function (c) {
            this._handlingController = true;
            for (var i = 0; i < 10; i++) {
                var gear = this._gears[i];
                if (gear != null && gear.controller == c) gear.apply();
            }
            this._handlingController = false;
            this.checkGearDisplay();
        };
        GObject.prototype.handleAnchorChanged = function () {
            this.handlePositionChanged();
        };
        GObject.prototype.handlePositionChanged = function () {
            var xv = this._x;
            var yv = -this._y;
            if (!this._pivotAsAnchor) {
                xv += this.node.anchorX * this._width;
                yv -= (1 - this.node.anchorY) * this._height;
            }
            if (this._pixelSnapping) {
                xv = Math.round(xv);
                yv = Math.round(yv);
            }
            this._node.setPosition(xv, yv, this._node.z);
        };
        GObject.prototype.handleSizeChanged = function () {
            this._node.setContentSize(this._width, this._height);
        };
        GObject.prototype.handleGrayedChanged = function () {};
        GObject.prototype.handleVisibleChanged = function () {
            this._node.active = this._finalVisible;
            if (this instanceof fgui.GGroup) this.handleVisibleChanged();
            if (this._parent) this._parent.setBoundsChangedFlag();
        };
        GObject.prototype.hitTest = function (globalPt) {
            if (this._touchDisabled || !this._touchable || !this._node.activeInHierarchy) return null;
            var pt = this._node.convertToNodeSpaceAR(globalPt);
            pt.x += this._node.anchorX * this._width;
            pt.y += this._node.anchorY * this._height;
            if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };
        GObject.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Text:
                    return this.text;
                case fgui.ObjectPropID.Icon:
                    return this.icon;
                case fgui.ObjectPropID.Color:
                    return null;
                case fgui.ObjectPropID.OutlineColor:
                    return null;
                case fgui.ObjectPropID.Playing:
                    return false;
                case fgui.ObjectPropID.Frame:
                    return 0;
                case fgui.ObjectPropID.DeltaTime:
                    return 0;
                case fgui.ObjectPropID.TimeScale:
                    return 1;
                case fgui.ObjectPropID.FontSize:
                    return 0;
                case fgui.ObjectPropID.Selected:
                    return false;
                default:
                    return undefined;
            }
        };
        GObject.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Text:
                    this.text = value;
                    break;
                case fgui.ObjectPropID.Icon:
                    this.icon = value;
                    break;
            }
        };
        GObject.prototype.constructFromResource = function () {};
        GObject.prototype.setup_beforeAdd = function (buffer, beginPos) {
            buffer.seek(beginPos, 0);
            buffer.skip(5);
            var f1;
            var f2;
            this._id = buffer.readS();
            this._name = buffer.readS();
            f1 = buffer.readInt();
            f2 = buffer.readInt();
            this.setPosition(f1, f2);
            if (buffer.readBool()) {
                this.initWidth = buffer.readInt();
                this.initHeight = buffer.readInt();
                this.setSize(this.initWidth, this.initHeight, true);
            }
            if (buffer.readBool()) {
                this.minWidth = buffer.readInt();
                this.maxWidth = buffer.readInt();
                this.minHeight = buffer.readInt();
                this.maxHeight = buffer.readInt();
            }
            if (buffer.readBool()) {
                f1 = buffer.readFloat();
                f2 = buffer.readFloat();
                this.setScale(f1, f2);
            }
            if (buffer.readBool()) {
                f1 = buffer.readFloat();
                f2 = buffer.readFloat();
                this.setSkew(f1, f2);
            }
            if (buffer.readBool()) {
                f1 = buffer.readFloat();
                f2 = buffer.readFloat();
                this.setPivot(f1, f2, buffer.readBool());
            }
            f1 = buffer.readFloat();
            if (f1 != 1) this.alpha = f1;
            f1 = buffer.readFloat();
            if (f1 != 0) this.rotation = f1;
            if (!buffer.readBool()) this.visible = false;
            if (!buffer.readBool()) this.touchable = false;
            if (buffer.readBool()) this.grayed = true;
            this.blendMode = buffer.readByte();
            var filter = buffer.readByte();
            if (filter == 1) {}
            var str = buffer.readS();
            if (str != null) this.data = str;
        };
        GObject.prototype.setup_afterAdd = function (buffer, beginPos) {
            buffer.seek(beginPos, 1);
            var str = buffer.readS();
            if (str != null) this.tooltips = str;
            var groupId = buffer.readShort();
            if (groupId >= 0) this.group = this.parent.getChildAt(groupId);
            buffer.seek(beginPos, 2);
            var cnt = buffer.readShort();
            for (var i = 0; i < cnt; i++) {
                var nextPos = buffer.readShort();
                nextPos += buffer.position;
                var gear = this.getGear(buffer.readByte());
                gear.setup(buffer);
                buffer.position = nextPos;
            }
        };
        GObject.prototype.onRollOver = function () {
            this.root.showTooltips(this.tooltips);
        };
        ;
        GObject.prototype.onRollOut = function () {
            this.root.hideTooltips();
        };
        ;
        GObject.prototype.initDrag = function () {
            if (this._draggable) {
                this.on(fgui.Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
                this.on(fgui.Event.TOUCH_MOVE, this.onTouchMove_0, this);
                this.on(fgui.Event.TOUCH_END, this.onTouchEnd_0, this);
            } else {
                this.off(fgui.Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
                this.off(fgui.Event.TOUCH_MOVE, this.onTouchMove_0, this);
                this.off(fgui.Event.TOUCH_END, this.onTouchEnd_0, this);
            }
        };
        GObject.prototype.dragBegin = function (touchId) {
            if (GObject.draggingObject != null) {
                var tmp = GObject.draggingObject;
                tmp.stopDrag();
                GObject.draggingObject = null;
                tmp._node.emit(fgui.Event.DRAG_END);
            }
            if (touchId == undefined) touchId = fgui.GRoot.inst.inputProcessor.getAllTouches()[0];
            GObject.sGlobalDragStart.set(fgui.GRoot.inst.getTouchPosition(touchId));
            this.localToGlobalRect(0, 0, this._width, this._height, GObject.sGlobalRect);
            GObject.draggingObject = this;
            this._dragTesting = true;
            fgui.GRoot.inst.inputProcessor.addTouchMonitor(touchId, this);
            this.on(fgui.Event.TOUCH_MOVE, this.onTouchMove_0, this);
            this.on(fgui.Event.TOUCH_END, this.onTouchEnd_0, this);
        };
        GObject.prototype.dragEnd = function () {
            if (GObject.draggingObject == this) {
                this._dragTesting = false;
                GObject.draggingObject = null;
            }
            GObject.sDragQuery = false;
        };
        GObject.prototype.onTouchBegin_0 = function (evt) {
            if (this._dragStartPoint == null && evt.pos) this._dragStartPoint = new cc.Vec2();
            if (this._dragStartPoint) {
                this._dragStartPoint.set(evt.pos);
                this._dragTesting = true;
                evt.captureTouch();
            }
        };
        GObject.prototype.onTouchMove_0 = function (evt) {
            if (GObject.draggingObject != this && this._draggable && this._dragTesting) {
                var sensitivity = fgui.UIConfig.touchDragSensitivity;
                if (Math.abs(this._dragStartPoint.x - evt.pos.x) < sensitivity && Math.abs(this._dragStartPoint.y - evt.pos.y) < sensitivity) return;
                this._dragTesting = false;
                GObject.sDragQuery = true;
                this._node.emit(fgui.Event.DRAG_START, evt);
                if (GObject.sDragQuery) this.dragBegin(evt.touchId);
            }
            if (GObject.draggingObject == this) {
                var xx = evt.pos.x - GObject.sGlobalDragStart.x + GObject.sGlobalRect.x;
                var yy = evt.pos.y - GObject.sGlobalDragStart.y + GObject.sGlobalRect.y;
                if (this._dragBounds != null) {
                    var rect = fgui.GRoot.inst.localToGlobalRect(this._dragBounds.x, this._dragBounds.y, this._dragBounds.width, this._dragBounds.height, GObject.sDragHelperRect);
                    if (xx < rect.x) xx = rect.x;else if (xx + GObject.sGlobalRect.width > rect.xMax) {
                        xx = rect.xMax - GObject.sGlobalRect.width;
                        if (xx < rect.x) xx = rect.x;
                    }
                    if (yy < rect.y) yy = rect.y;else if (yy + GObject.sGlobalRect.height > rect.yMax) {
                        yy = rect.yMax - GObject.sGlobalRect.height;
                        if (yy < rect.y) yy = rect.y;
                    }
                }
                GObject.sUpdateInDragging = true;
                var pt = this.parent.globalToLocal(xx, yy, GObject.sHelperPoint);
                this.setPosition(Math.round(pt.x), Math.round(pt.y));
                GObject.sUpdateInDragging = false;
                this._node.emit(fgui.Event.DRAG_MOVE, evt);
            }
        };
        GObject.prototype.onTouchEnd_0 = function (evt) {
            if (GObject.draggingObject == this) {
                GObject.draggingObject = null;
                this._node.emit(fgui.Event.DRAG_END, evt);
            }
            this._dragStartPoint = null;
        };
        GObject._eventListener = [];
        GObject._defaultGroupIndex = -1;
        GObject._gHashIdx = 0;
        GObject._touchEventListener = [];
        GObject._lastEvent = null;
        GObject.sGlobalDragStart = new cc.Vec2();
        GObject.sGlobalRect = new cc.Rect();
        GObject.sHelperPoint = new cc.Vec2();
        GObject.sDragHelperRect = new cc.Rect();
        GObject.sDragQuery = false;
        return GObject;
    }();
    fgui.GObject = GObject;
    var GObjectPartner = function (_super) {
        __extends(GObjectPartner, _super);
        function GObjectPartner() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._emitDisplayEvents = false;
            return _this;
        }
        GObjectPartner.prototype.callLater = function (callback, delay) {
            if (!cc.director.getScheduler().isScheduled(callback, this)) this.scheduleOnce(callback, delay);
        };
        GObjectPartner.prototype.onClickLink = function (evt, text) {
            this.node.emit(fgui.Event.LINK, text, evt);
        };
        GObjectPartner.prototype.onEnable = function () {};
        GObjectPartner.prototype.onDisable = function () {
            this.node["$gobj"].onDisable();
            if (this._emitDisplayEvents) this.node.emit(fgui.Event.UNDISPLAY);
        };
        GObjectPartner.prototype.update = function (dt) {};
        GObjectPartner.prototype.onDestroy = function () {
            this.node["$gobj"].onDestroy();
        };
        return GObjectPartner;
    }(cc.Component);
    fgui.GObjectPartner = GObjectPartner;
    var GActivatePartner = function (_super) {
        __extends(GActivatePartner, _super);
        function GActivatePartner() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GActivatePartner.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.node["$gobj"].onEnable();
            if (this._emitDisplayEvents) this.node.emit(fgui.Event.DISPLAY);
        };
        return GActivatePartner;
    }(GObjectPartner);
    fgui.GActivatePartner = GActivatePartner;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GComponent = function (_super) {
        __extends(GComponent, _super);
        function GComponent() {
            var _this = _super.call(this) || this;
            _this._sortingChildCount = 0;
            _this._childrenRenderOrder = fgui.ChildrenRenderOrder.Ascent;
            _this._apexIndex = 0;
            _this._node.name = "GComponent";
            _this._children = [];
            _this._childrenHash = {};
            _this._controllers = [];
            _this._transitions = [];
            _this._margin = new fgui.Margin();
            _this._alignOffset = new cc.Vec2();
            _this._container = new cc.Node("Container");
            _this._container.setAnchorPoint(0, 1);
            _this._node.addChild(_this._container);
            return _this;
        }
        GComponent.prototype.genPartner = function () {
            this._partner = this._node.addComponent(fgui.GActivatePartner);
        };
        GComponent.prototype.dispose = function () {
            var i;
            var cnt;
            cnt = this._transitions.length;
            for (i = 0; i < cnt; ++i) {
                var trans = this._transitions[i];
                trans.dispose();
            }
            cnt = this._controllers.length;
            for (i = 0; i < cnt; ++i) {
                var cc = this._controllers[i];
                cc.dispose();
            }
            if (this._scrollPane) this._scrollPane.destroy();
            cnt = this._children.length;
            for (i = cnt - 1; i >= 0; --i) {
                var obj = this._children[i];
                obj._parent = null;
                obj.dispose();
            }
            this._children = [];
            this._childrenHash = {};
            this._boundsChanged = false;
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(GComponent.prototype, "hidden", {
            get: function get() {
                return this.alpha == 0 && !this.touchable;
            },
            set: function set(b) {
                this.alpha = b ? 0 : 1;
                this.touchable = !b;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "displayListContainer", {
            get: function get() {
                return this._container;
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.addChildren = function (children) {
            if (!children) return;
            var len = children.length;
            if (len <= 0) return;
            var i = 0;
            for (i = 0; i < len; ++i) {
                var child = children[i];
                if (child.parent != this) {
                    child.removeFromParent();
                    child._parent = this;
                    this._children.push(child);
                    if (child.name != "") {
                        this._childrenHash[child.name] = child;
                    }
                    child.node.parent = this._container;
                    child.node.active = child._finalVisible;
                } else {
                    this.setChildIndex(child, this._children.length);
                }
            }
            this.setBoundsChangedFlag();
        };
        GComponent.prototype.addChild = function (child) {
            this.addChildAt(child, this._children.length);
            return child;
        };
        GComponent.prototype.addChildAt = function (child, index) {
            if (!child) throw "child is null";
            var numChildren = this._children.length;
            if (index >= 0 && index <= numChildren) {
                if (child.parent == this) {
                    this.setChildIndex(child, index);
                } else {
                    child.removeFromParent();
                    child._parent = this;
                    var cnt = this._children.length;
                    if (child.sortingOrder != 0) {
                        this._sortingChildCount++;
                        index = this.getInsertPosForSortingChild(child);
                    } else if (this._sortingChildCount > 0) {
                        if (index > cnt - this._sortingChildCount) index = cnt - this._sortingChildCount;
                    }
                    if (index == cnt) {
                        this._children.push(child);
                        ++index;
                    } else {
                        this._children.splice(index, 0, child);
                    }
                    this.onChildAdd(child, index);
                    if (child.name != "") {
                        this._childrenHash[child.name] = child;
                    }
                    this.setBoundsChangedFlag();
                }
                return child;
            } else {
                throw "Invalid child index";
            }
        };
        GComponent.prototype.getInsertPosForSortingChild = function (target) {
            var cnt = this._children.length;
            var i = 0;
            for (i = 0; i < cnt; i++) {
                var child = this._children[i];
                if (child == target) continue;
                if (target.sortingOrder < child.sortingOrder) break;
            }
            return i;
        };
        GComponent.prototype.removeChild = function (child, dispose) {
            var childIndex = this._children.indexOf(child);
            if (childIndex != -1) {
                this.removeChildAt(childIndex, dispose);
            }
            return child;
        };
        GComponent.prototype.removeChildAt = function (index, dispose) {
            if (index >= 0 && index < this.numChildren) {
                var child = this._children[index];
                child._parent = null;
                if (child.sortingOrder != 0) this._sortingChildCount--;
                this._children.splice(index, 1);
                child.group = null;
                this._container.removeChild(child.node);
                if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Arch) this._partner.callLater(this.buildNativeDisplayList);
                if (dispose) child.dispose();else child.node.parent = null;
                this.setBoundsChangedFlag();
                if (child.name != "") {
                    delete this._childrenHash[child.name];
                    this._childrenHash[child.name] = null;
                }
                return child;
            } else {
                throw "Invalid child index";
            }
        };
        GComponent.prototype.removeChildren = function (beginIndex, endIndex, dispose) {
            if (beginIndex == undefined) beginIndex = 0;
            if (endIndex == undefined) endIndex = -1;
            if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;
            for (var i = beginIndex; i <= endIndex; ++i) {
                this.removeChildAt(beginIndex, dispose);
            }
        };
        GComponent.prototype.getChildAt = function (index) {
            if (index >= 0 && index < this.numChildren) return this._children[index];else throw "Invalid child index";
        };
        GComponent.prototype.getChild = function (name) {
            if (this._childrenHash[name]) {
                return this._childrenHash[name];
            }
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                if (this._children[i].name == name) {
                    this._childrenHash[name] = this._children[i];
                    return this._children[i];
                }
            }
            return null;
        };
        GComponent.prototype.getChildByPath = function (path) {
            var arr = path.split(".");
            var cnt = arr.length;
            var gcom = this;
            var obj;
            for (var i = 0; i < cnt; ++i) {
                obj = gcom.getChild(arr[i]);
                if (!obj) break;
                if (i != cnt - 1) {
                    if (!(gcom instanceof GComponent)) {
                        obj = null;
                        break;
                    } else gcom = obj;
                }
            }
            return obj;
        };
        GComponent.prototype.getVisibleChild = function (name) {
            if (this._childrenHash[name]) {
                var child = this._childrenHash[name];
                if (child._finalVisible) {
                    return child;
                }
            }
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                var child = this._children[i];
                if (child._finalVisible && child.name == name) return child;
            }
            return null;
        };
        GComponent.prototype.getChildInGroup = function (name, group) {
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                var child = this._children[i];
                if (child.group == group && child.name == name) return child;
            }
            return null;
        };
        GComponent.prototype.getChildById = function (id) {
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                if (this._children[i]._id == id) return this._children[i];
            }
            return null;
        };
        GComponent.prototype.getChildIndex = function (child) {
            return this._children.indexOf(child);
        };
        GComponent.prototype.setChildIndex = function (child, index) {
            var oldIndex = this._children.indexOf(child);
            if (oldIndex == -1) throw "Not a child of this container";
            if (child.sortingOrder != 0) return;
            var cnt = this._children.length;
            if (this._sortingChildCount > 0) {
                if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
            }
            this._setChildIndex(child, oldIndex, index);
        };
        GComponent.prototype.setChildIndexBefore = function (child, index) {
            var oldIndex = this._children.indexOf(child);
            if (oldIndex == -1) throw "Not a child of this container";
            if (child.sortingOrder != 0) return oldIndex;
            var cnt = this._children.length;
            if (this._sortingChildCount > 0) {
                if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
            }
            if (oldIndex < index) return this._setChildIndex(child, oldIndex, index - 1);else return this._setChildIndex(child, oldIndex, index);
        };
        GComponent.prototype._setChildIndex = function (child, oldIndex, index) {
            var cnt = this._children.length;
            if (index > cnt) index = cnt;
            if (oldIndex == index) return oldIndex;
            this._children.splice(oldIndex, 1);
            this._children.splice(index, 0, child);
            if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
            this.setBoundsChangedFlag();
            return index;
        };
        GComponent.prototype.swapChildren = function (child1, child2) {
            var index1 = this._children.indexOf(child1);
            var index2 = this._children.indexOf(child2);
            if (index1 == -1 || index2 == -1) throw "Not a child of this container";
            this.swapChildrenAt(index1, index2);
        };
        GComponent.prototype.swapChildrenAt = function (index1, index2) {
            var child1 = this._children[index1];
            var child2 = this._children[index2];
            this.setChildIndex(child1, index2);
            this.setChildIndex(child2, index1);
        };
        Object.defineProperty(GComponent.prototype, "numChildren", {
            get: function get() {
                return this._children.length;
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.isAncestorOf = function (child) {
            if (child == null) return false;
            var p = child.parent;
            while (p) {
                if (p == this) return true;
                p = p.parent;
            }
            return false;
        };
        GComponent.prototype.addController = function (controller) {
            this._controllers.push(controller);
            controller.parent = this;
            this.applyController(controller);
        };
        GComponent.prototype.getControllerAt = function (index) {
            return this._controllers[index];
        };
        GComponent.prototype.getController = function (name) {
            var cnt = this._controllers.length;
            for (var i = 0; i < cnt; ++i) {
                var c = this._controllers[i];
                if (c.name == name) return c;
            }
            return null;
        };
        GComponent.prototype.removeController = function (c) {
            var index = this._controllers.indexOf(c);
            if (index == -1) throw "controller not exists";
            c.parent = null;
            this._controllers.splice(index, 1);
            var length = this._children.length;
            for (var i = 0; i < length; i++) {
                var child = this._children[i];
                child.handleControllerChanged(c);
            }
        };
        Object.defineProperty(GComponent.prototype, "controllers", {
            get: function get() {
                return this._controllers;
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.onChildAdd = function (child, index) {
            child.node.parent = this._container;
            child.node.active = child._finalVisible;
            if (this._buildingDisplayList) return;
            var cnt = this._children.length;
            if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
        };
        GComponent.prototype.buildNativeDisplayList = function (dt) {
            if (!isNaN(dt)) {
                var _t = this.node["$gobj"];
                _t.buildNativeDisplayList();
                return;
            }
            var cnt = this._children.length;
            if (cnt == 0) return;
            var child;
            switch (this._childrenRenderOrder) {
                case fgui.ChildrenRenderOrder.Ascent:
                    {
                        var j = 0;
                        for (var i = 0; i < cnt; i++) {
                            child = this._children[i];
                            child.node.setSiblingIndex(j++);
                        }
                    }
                    break;
                case fgui.ChildrenRenderOrder.Descent:
                    {
                        var j = 0;
                        for (var i = cnt - 1; i >= 0; i--) {
                            child = this._children[i];
                            child.node.setSiblingIndex(j++);
                        }
                    }
                    break;
                case fgui.ChildrenRenderOrder.Arch:
                    {
                        var j = 0;
                        for (var i = 0; i < this._apexIndex; i++) {
                            child = this._children[i];
                            child.node.setSiblingIndex(j++);
                        }
                        for (var i = cnt - 1; i >= this._apexIndex; i--) {
                            child = this._children[i];
                            child.node.setSiblingIndex(j++);
                        }
                    }
                    break;
            }
        };
        GComponent.prototype.applyController = function (c, callback) {
            this._applyingController = c;
            var child;
            var length = this._children.length;
            for (var i = 0; i < length; i++) {
                child = this._children[i];
                child.handleControllerChanged(c);
            }
            this._applyingController = null;
            c.runActions(callback);
        };
        GComponent.prototype.applyAllControllers = function () {
            var cnt = this._controllers.length;
            for (var i = 0; i < cnt; ++i) {
                this.applyController(this._controllers[i]);
            }
        };
        GComponent.prototype.adjustRadioGroupDepth = function (obj, c) {
            var cnt = this._children.length;
            var i;
            var child;
            var myIndex = -1,
                maxIndex = -1;
            for (i = 0; i < cnt; i++) {
                child = this._children[i];
                if (child == obj) {
                    myIndex = i;
                } else if (child instanceof fgui.GButton && child.relatedController == c) {
                    if (i > maxIndex) maxIndex = i;
                }
            }
            if (myIndex < maxIndex) {
                if (this._applyingController != null) this._children[maxIndex].handleControllerChanged(this._applyingController);
                this.swapChildrenAt(myIndex, maxIndex);
            }
        };
        GComponent.prototype.getTransitionAt = function (index) {
            return this._transitions[index];
        };
        GComponent.prototype.getTransition = function (transName) {
            var cnt = this._transitions.length;
            for (var i = 0; i < cnt; ++i) {
                var trans = this._transitions[i];
                if (trans.name == transName) return trans;
            }
            return null;
        };
        GComponent.prototype.isChildInView = function (child) {
            if (this._rectMask != null) {
                return child.x + child.width >= 0 && child.x <= this.width && child.y + child.height >= 0 && child.y <= this.height;
            } else if (this._scrollPane != null) {
                return this._scrollPane.isChildInView(child);
            } else return true;
        };
        GComponent.prototype.getFirstChildInView = function () {
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                var child = this._children[i];
                if (this.isChildInView(child)) return i;
            }
            return -1;
        };
        Object.defineProperty(GComponent.prototype, "scrollPane", {
            get: function get() {
                return this._scrollPane;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "opaque", {
            get: function get() {
                return this._opaque;
            },
            set: function set(value) {
                this._opaque = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "margin", {
            get: function get() {
                return this._margin;
            },
            set: function set(value) {
                this._margin.copy(value);
                this.handleSizeChanged();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "childrenRenderOrder", {
            get: function get() {
                return this._childrenRenderOrder;
            },
            set: function set(value) {
                if (this._childrenRenderOrder != value) {
                    this._childrenRenderOrder = value;
                    this.buildNativeDisplayList();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "apexIndex", {
            get: function get() {
                return this._apexIndex;
            },
            set: function set(value) {
                if (this._apexIndex != value) {
                    this._apexIndex = value;
                    if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Arch) this.buildNativeDisplayList();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "mask", {
            get: function get() {
                return this._maskContent;
            },
            set: function set(value) {
                this.setMask(value, false);
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.setMask = function (value, inverted) {
            if (this._maskContent) {
                this._maskContent.node.off(cc.Node.EventType.POSITION_CHANGED, this.onMaskContentChanged, this);
                this._maskContent.node.off(cc.Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);
                this._maskContent.node.off(cc.Node.EventType.SCALE_CHANGED, this.onMaskContentChanged, this);
                this._maskContent.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);
                this._maskContent.visible = true;
            }
            this._maskContent = value;
            if (this._maskContent) {
                if (!(value instanceof fgui.GImage) && !(value instanceof fgui.GGraph)) return;
                if (!this._customMask) {
                    var maskNode = new cc.Node("Mask");
                    maskNode.parent = this._node;
                    if (this._scrollPane) this._container.parent.parent = maskNode;else this._container.parent = maskNode;
                    this._customMask = maskNode.addComponent(cc.Mask);
                }
                value.visible = false;
                value.node.on(cc.Node.EventType.POSITION_CHANGED, this.onMaskContentChanged, this);
                value.node.on(cc.Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);
                value.node.on(cc.Node.EventType.SCALE_CHANGED, this.onMaskContentChanged, this);
                value.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);
                this._customMask.inverted = inverted;
                if (this._node.activeInHierarchy) this.onMaskReady();else this.on(fgui.Event.DISPLAY, this.onMaskReady, this);
                this.onMaskContentChanged();
                if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(0, 0);
            } else if (this._customMask) {
                if (this._scrollPane) this._container.parent.parent = this._node;else this._container.parent = this._node;
                this._customMask.node.destroy();
                this._customMask = null;
                if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
            }
        };
        GComponent.prototype.onMaskReady = function () {
            this.off(fgui.Event.DISPLAY, this.onMaskReady, this);
            if (this._maskContent instanceof fgui.GImage) {
                this._customMask.type = cc.Mask.Type.IMAGE_STENCIL;
                this._customMask.alphaThreshold = 0.0001;
                this._customMask.spriteFrame = this._maskContent._content.spriteFrame;
            } else {
                if (this._maskContent.type == fgui.GraphType.Ellipse) this._customMask.type = cc.Mask.Type.ELLIPSE;else this._customMask.type = cc.Mask.Type.RECT;
            }
        };
        GComponent.prototype.onMaskContentChanged = function () {
            var maskNode = this._customMask.node;
            var contentNode = this._maskContent.node;
            var w = contentNode.width * contentNode.scaleX;
            var h = contentNode.height * contentNode.scaleY;
            maskNode.setContentSize(w, h);
            var left = contentNode.x - contentNode.anchorX * w;
            var top = contentNode.y - contentNode.anchorY * h;
            maskNode.setAnchorPoint(-left / maskNode.width, -top / maskNode.height);
            maskNode.setPosition(this._pivotCorrectX, this._pivotCorrectY);
        };
        Object.defineProperty(GComponent.prototype, "_pivotCorrectX", {
            get: function get() {
                return -this.pivotX * this._width + this._margin.left;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "_pivotCorrectY", {
            get: function get() {
                return this.pivotY * this._height - this._margin.top;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "baseUserData", {
            get: function get() {
                var buffer = this.packageItem.rawData;
                buffer.seek(0, 4);
                return buffer.readS();
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.setupScroll = function (buffer) {
            this._scrollPane = this._node.addComponent(fgui.ScrollPane);
            this._scrollPane.setup(buffer);
        };
        GComponent.prototype.setupOverflow = function (overflow) {
            if (overflow == fgui.OverflowType.Hidden) this._rectMask = this._container.addComponent(cc.Mask);
            if (!this._margin.isNone) this.handleSizeChanged();
        };
        GComponent.prototype.handleAnchorChanged = function () {
            _super.prototype.handleAnchorChanged.call(this);
            if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
        };
        GComponent.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (!this._scrollPane) this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
            if (this._scrollPane) this._scrollPane.onOwnerSizeChanged();else this._container.setContentSize(this.viewWidth, this.viewHeight);
        };
        GComponent.prototype.handleGrayedChanged = function () {
            var c = this.getController("grayed");
            if (c != null) {
                c.selectedIndex = this.grayed ? 1 : 0;
                return;
            }
            var v = this.grayed;
            var cnt = this._children.length;
            for (var i = 0; i < cnt; ++i) {
                this._children[i].grayed = v;
            }
        };
        GComponent.prototype.handleControllerChanged = function (c) {
            _super.prototype.handleControllerChanged.call(this, c);
            if (this._scrollPane != null) this._scrollPane.handleControllerChanged(c);
        };
        GComponent.prototype.hitTest = function (globalPt) {
            if (this._touchDisabled || !this._touchable || !this._node.activeInHierarchy) return null;
            var target;
            if (this._customMask) {
                var b = this._customMask["_hitTest"](globalPt) || false;
                if (!b) return null;
            }
            var flag = 0;
            if (this.hitArea || this._rectMask) {
                var pt = this._node.convertToNodeSpaceAR(globalPt);
                pt.x += this._node.anchorX * this._width;
                pt.y += this._node.anchorY * this._height;
                if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) flag = 1;else flag = 2;
                if (this.hitArea && !this.hitArea.hitTest(this, pt.x, pt.y)) return null;
                if (this._rectMask) {
                    var clippingSize = this._container.getContentSize();
                    if (pt.x < 0 || pt.y < 0 || pt.x >= clippingSize.width || pt.y >= clippingSize.height) return null;
                }
            }
            if (this._scrollPane) {
                target = this._scrollPane.hitTest(globalPt);
                if (!target) return null;
                if (target != this) return target;
            }
            var cnt = this._children.length;
            for (var i = cnt - 1; i >= 0; i--) {
                target = this._children[i].hitTest(globalPt);
                if (target) return target;
            }
            if (this._opaque) {
                if (flag == 0) {
                    var pt = this._node.convertToNodeSpaceAR(globalPt);
                    pt.x += this._node.anchorX * this._width;
                    pt.y += this._node.anchorY * this._height;
                    if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) flag = 1;else flag = 2;
                }
                if (flag == 1) return this;else return null;
            } else return null;
        };
        GComponent.prototype.setBoundsChangedFlag = function () {
            if (!this._scrollPane && !this._trackBounds) return;
            if (!this._boundsChanged) {
                this._boundsChanged = true;
                this._partner.callLater(this.refresh);
            }
        };
        GComponent.prototype.refresh = function (dt) {
            if (!isNaN(dt)) {
                var _t = this.node["$gobj"];
                _t.refresh();
                return;
            }
            if (this._boundsChanged) {
                var len = this._children.length;
                if (len > 0) {
                    for (var i = 0; i < len; i++) {
                        var child = this._children[i];
                        child.ensureSizeCorrect();
                    }
                }
                this.updateBounds();
            }
        };
        GComponent.prototype.ensureBoundsCorrect = function () {
            var len = this._children.length;
            if (len > 0) {
                for (var i = 0; i < len; i++) {
                    var child = this._children[i];
                    child.ensureSizeCorrect();
                }
            }
            if (this._boundsChanged) this.updateBounds();
        };
        GComponent.prototype.updateBounds = function () {
            var ax = 0,
                ay = 0,
                aw = 0,
                ah = 0;
            var len = this._children.length;
            if (len > 0) {
                ax = Number.POSITIVE_INFINITY, ay = Number.POSITIVE_INFINITY;
                var ar = Number.NEGATIVE_INFINITY,
                    ab = Number.NEGATIVE_INFINITY;
                var tmp = 0;
                var i = 0;
                for (var i = 0; i < len; i++) {
                    var child = this._children[i];
                    tmp = child.x;
                    if (tmp < ax) ax = tmp;
                    tmp = child.y;
                    if (tmp < ay) ay = tmp;
                    tmp = child.x + child.actualWidth;
                    if (tmp > ar) ar = tmp;
                    tmp = child.y + child.actualHeight;
                    if (tmp > ab) ab = tmp;
                }
                aw = ar - ax;
                ah = ab - ay;
            }
            this.setBounds(ax, ay, aw, ah);
        };
        GComponent.prototype.setBounds = function (ax, ay, aw, ah) {
            if (ah === void 0) {
                ah = 0;
            }
            this._boundsChanged = false;
            if (this._scrollPane) this._scrollPane.setContentSize(Math.round(ax + aw), Math.round(ay + ah));
        };
        Object.defineProperty(GComponent.prototype, "viewWidth", {
            get: function get() {
                if (this._scrollPane != null) return this._scrollPane.viewWidth;else return this.width - this._margin.left - this._margin.right;
            },
            set: function set(value) {
                if (this._scrollPane != null) this._scrollPane.viewWidth = value;else this.width = value + this._margin.left + this._margin.right;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComponent.prototype, "viewHeight", {
            get: function get() {
                if (this._scrollPane != null) return this._scrollPane.viewHeight;else return this.height - this._margin.top - this._margin.bottom;
            },
            set: function set(value) {
                if (this._scrollPane != null) this._scrollPane.viewHeight = value;else this.height = value + this._margin.top + this._margin.bottom;
            },
            enumerable: false,
            configurable: true
        });
        GComponent.prototype.getSnappingPosition = function (xValue, yValue, resultPoint) {
            if (!resultPoint) resultPoint = new cc.Vec2();
            var cnt = this._children.length;
            if (cnt == 0) {
                resultPoint.x = 0;
                resultPoint.y = 0;
                return resultPoint;
            }
            this.ensureBoundsCorrect();
            var obj = null;
            var prev = null;
            var i = 0;
            if (yValue != 0) {
                for (; i < cnt; i++) {
                    obj = this._children[i];
                    if (yValue < obj.y) {
                        if (i == 0) {
                            yValue = 0;
                            break;
                        } else {
                            prev = this._children[i - 1];
                            if (yValue < prev.y + prev.actualHeight / 2) yValue = prev.y;else yValue = obj.y;
                            break;
                        }
                    }
                }
                if (i == cnt) yValue = obj.y;
            }
            if (xValue != 0) {
                if (i > 0) i--;
                for (; i < cnt; i++) {
                    obj = this._children[i];
                    if (xValue < obj.x) {
                        if (i == 0) {
                            xValue = 0;
                            break;
                        } else {
                            prev = this._children[i - 1];
                            if (xValue < prev.x + prev.actualWidth / 2) xValue = prev.x;else xValue = obj.x;
                            break;
                        }
                    }
                }
                if (i == cnt) xValue = obj.x;
            }
            resultPoint.x = xValue;
            resultPoint.y = yValue;
            return resultPoint;
        };
        GComponent.prototype.childSortingOrderChanged = function (child, oldValue, newValue) {
            if (newValue === void 0) {
                newValue = 0;
            }
            if (newValue == 0) {
                this._sortingChildCount--;
                this.setChildIndex(child, this._children.length);
            } else {
                if (oldValue == 0) this._sortingChildCount++;
                var oldIndex = this._children.indexOf(child);
                var index = this.getInsertPosForSortingChild(child);
                if (oldIndex < index) this._setChildIndex(child, oldIndex, index - 1);else this._setChildIndex(child, oldIndex, index);
            }
        };
        GComponent.prototype.constructFromResource = function () {
            this.constructFromResource2(null, 0);
        };
        GComponent.prototype.constructFromResource2 = function (objectPool, poolIndex) {
            if (!this.packageItem.decoded) {
                this.packageItem.decoded = true;
                fgui.TranslationHelper.translateComponent(this.packageItem);
            }
            var i;
            var dataLen;
            var curPos;
            var nextPos;
            var f1;
            var f2;
            var i1;
            var i2;
            var buffer = this.packageItem.rawData;
            buffer.seek(0, 0);
            this._underConstruct = true;
            this.sourceWidth = buffer.readInt();
            this.sourceHeight = buffer.readInt();
            this.initWidth = this.sourceWidth;
            this.initHeight = this.sourceHeight;
            this.setSize(this.sourceWidth, this.sourceHeight);
            if (buffer.readBool()) {
                this.minWidth = buffer.readInt();
                this.maxWidth = buffer.readInt();
                this.minHeight = buffer.readInt();
                this.maxHeight = buffer.readInt();
            }
            if (buffer.readBool()) {
                f1 = buffer.readFloat();
                f2 = buffer.readFloat();
                this.setPivot(f1, f2, buffer.readBool());
            }
            if (buffer.readBool()) {
                this._margin.top = buffer.readInt();
                this._margin.bottom = buffer.readInt();
                this._margin.left = buffer.readInt();
                this._margin.right = buffer.readInt();
            }
            var overflow = buffer.readByte();
            if (overflow == fgui.OverflowType.Scroll) {
                var savedPos = buffer.position;
                buffer.seek(0, 7);
                this.setupScroll(buffer);
                buffer.position = savedPos;
            } else this.setupOverflow(overflow);
            if (buffer.readBool()) buffer.skip(8);
            this._buildingDisplayList = true;
            buffer.seek(0, 1);
            var controllerCount = buffer.readShort();
            for (i = 0; i < controllerCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                var controller = new fgui.Controller();
                this._controllers.push(controller);
                controller.parent = this;
                controller.setup(buffer);
                buffer.position = nextPos;
            }
            buffer.seek(0, 2);
            var child;
            var childCount = buffer.readShort();
            for (i = 0; i < childCount; i++) {
                dataLen = buffer.readShort();
                curPos = buffer.position;
                if (objectPool != null) child = objectPool[poolIndex + i];else {
                    buffer.seek(curPos, 0);
                    var type = buffer.readByte();
                    var src = buffer.readS();
                    var pkgId = buffer.readS();
                    var pi = null;
                    if (src != null) {
                        var pkg;
                        if (pkgId != null) pkg = fgui.UIPackage.getById(pkgId);else pkg = this.packageItem.owner;
                        pi = pkg != null ? pkg.getItemById(src) : null;
                    }
                    if (pi != null) {
                        child = fgui.UIObjectFactory.newObject(pi);
                        child.packageItem = pi;
                        child.constructFromResource();
                    } else child = fgui.UIObjectFactory.newObject2(type);
                }
                child._underConstruct = true;
                child.setup_beforeAdd(buffer, curPos);
                child._parent = this;
                child.node.parent = this._container;
                this._children.push(child);
                if (child.name != "") {
                    this._childrenHash[child.name] = child;
                }
                buffer.position = curPos + dataLen;
            }
            buffer.seek(0, 3);
            this.relations.setup(buffer, true);
            buffer.seek(0, 2);
            buffer.skip(2);
            for (i = 0; i < childCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                buffer.seek(buffer.position, 3);
                this._children[i].relations.setup(buffer, false);
                buffer.position = nextPos;
            }
            buffer.seek(0, 2);
            buffer.skip(2);
            for (i = 0; i < childCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                child = this._children[i];
                child.setup_afterAdd(buffer, buffer.position);
                child._underConstruct = false;
                buffer.position = nextPos;
            }
            buffer.seek(0, 4);
            buffer.skip(2);
            this.opaque = buffer.readBool();
            var maskId = buffer.readShort();
            if (maskId != -1) {
                this.setMask(this.getChildAt(maskId), buffer.readBool());
            }
            buffer.seek(0, 5);
            var transitionCount = buffer.readShort();
            for (i = 0; i < transitionCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                var trans = new fgui.Transition(this);
                trans.setup(buffer);
                this._transitions.push(trans);
                buffer.position = nextPos;
            }
            this.applyAllControllers();
            this._buildingDisplayList = false;
            this._underConstruct = false;
            this.buildNativeDisplayList();
            this.setBoundsChangedFlag();
            if (this.packageItem.objectType != fgui.ObjectType.Component) this.constructExtension(buffer);
            this.onConstruct();
        };
        GComponent.prototype.constructExtension = function (buffer) {};
        GComponent.prototype.onConstruct = function () {};
        GComponent.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 4);
            var pageController = buffer.readShort();
            if (pageController != null && this._scrollPane != null) this._scrollPane.pageController = this._parent.getControllerAt(pageController);
            var cnt = buffer.readShort();
            for (var i = 0; i < cnt; i++) {
                var cc = this.getController(buffer.readS());
                var pageId = buffer.readS();
                if (cc != null) cc.selectedPageId = pageId;
            }
            if (buffer.version >= 2) {
                cnt = buffer.readShort();
                for (i = 0; i < cnt; i++) {
                    var target = buffer.readS();
                    var propertyId = buffer.readShort();
                    var value = buffer.readS();
                    var obj = this.getChildByPath(target);
                    if (obj) obj.setProp(propertyId, value);
                }
            }
        };
        GComponent.prototype.onEnable = function () {
            var cnt = this._transitions.length;
            for (var i = 0; i < cnt; ++i) {
                this._transitions[i].onEnable();
            }
        };
        GComponent.prototype.onDisable = function () {
            var cnt = this._transitions.length;
            for (var i = 0; i < cnt; ++i) {
                this._transitions[i].onDisable();
            }
        };
        return GComponent;
    }(fgui.GObject);
    fgui.GComponent = GComponent;
})(fgui || (fgui = {}));
var UI;
(function (UI) {
    var ListOrientation;
    (function (ListOrientation) {
        ListOrientation[ListOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";
        ListOrientation[ListOrientation["VERTICAL"] = 2] = "VERTICAL";
    })(ListOrientation = UI.ListOrientation || (UI.ListOrientation = {}));
    var ListType;
    (function (ListType) {
        ListType[ListType["NORMAL"] = 1] = "NORMAL";
        ListType[ListType["PAGE"] = 2] = "PAGE";
    })(ListType = UI.ListType || (UI.ListType = {}));
    var DragInfo = function () {
        function DragInfo() {
            this.start = null;
            this.last = null;
            this.cur = null;
            this.end = null;
            this.minPos = null;
            this.maxPos = new cc.Vec2(0, 0);
        }
        DragInfo.prototype.dragStart = function (pos) {
            this.start = pos;
            this.last = pos;
            this.cur = pos;
        };
        DragInfo.prototype.dragMove = function (pos) {
            this.last = this.cur;
            this.cur = pos;
        };
        DragInfo.prototype.dragEnd = function (pos) {
            this.end = pos;
        };
        DragInfo.prototype.getDelta = function () {
            return new cc.Vec2(this.cur.x - this.last.x, this.cur.y - this.last.y);
        };
        DragInfo.prototype.cleanup = function () {
            this.start = null;
            this.end = null;
        };
        return DragInfo;
    }();
    var ListItem = function () {
        function ListItem() {
            this.width = 0;
            this.height = 0;
            this.row = -1;
            this.col = -1;
            this.obj = null;
            this.index = -1;
            this.expired = true;
            this.orientation = ListOrientation.VERTICAL;
            this.hostList = null;
            this.advance = 0;
            this._x = -1;
            this._y = -1;
        }
        ListItem.prototype.setExpire = function (b) {
            if (this.expired == b) return;
            this.expired = b;
            if (b) {
                if (this.obj) {
                    this.obj.off(fgui.Event.CLICK, this._onClick, this);
                    this.obj.off(fgui.Event.TOUCH_BEGIN, this._onTouch, this);
                    this.parent.removeChild(this.obj);
                    this.pool.returnObject(this.obj);
                    this.obj = null;
                }
            } else {
                var t1 = new Date().getTime();
                this.obj = this.pool.getObject("");
                var t2 = new Date().getTime();
                this._render();
                var t3 = new Date().getTime();
                this.hostList.profiler.getObject += t2 - t1;
                this.hostList.profiler.renderItem += t3 - t2;
                this.width = this.obj.width;
                this.height = this.obj.height;
                if (this._x >= 0 && this._y >= 0) {
                    this.obj.setPosition(this._x, this._y);
                }
                this.parent.addChild(this.obj);
                this.obj.on(fgui.Event.CLICK, this._onClick, this);
                this.obj.on(fgui.Event.TOUCH_BEGIN, this._onTouch, this);
            }
        };
        ListItem.prototype._render = function () {
            this.obj.name = "$index_" + this.index;
            this.itemRenderer(this.index, this.obj);
        };
        ListItem.prototype._onClick = function (evt) {
            if (this.hostList) {
                this.hostList.node.emit(fgui.Event.CLICK_ITEM, this.obj, evt);
            }
        };
        ListItem.prototype._onTouch = function (evt) {
            if (this.hostList) {
                this.hostList.node.emit(fgui.Event.TOUCH, this.obj, evt);
            }
        };
        ListItem.prototype.checkInView = function (vw, vh) {
            var parent = this.parent;
            var px = parent.x,
                py = parent.y;
            if (this.orientation == ListOrientation.VERTICAL) {
                var my = 0;
                if (this.hostList) {
                    my = this.hostList.getTotalSizeToRowOrCol(this.row) + this.advance;
                } else {
                    my = this.row * (this.height + this.advance);
                }
                if (my + py + this.height > 0 && my + py < vh) {
                    return true;
                } else {
                    return false;
                }
            } else {
                var mx = 0;
                if (this.hostList) {
                    mx = this.hostList.getTotalSizeToRowOrCol(this.col) + this.advance;
                } else {
                    mx = this.col * (this.width + this.advance);
                }
                if (mx + px - this.width > 0 && mx + px < vw) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        Object.defineProperty(ListItem.prototype, "x", {
            get: function get() {
                return this._x;
            },
            set: function set(val) {
                this._x = val;
                if (this.obj) {
                    this.obj.x = val;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "y", {
            get: function get() {
                return this._y;
            },
            set: function set(val) {
                this._y = val;
                if (this.obj) {
                    this.obj.y = val;
                }
            },
            enumerable: false,
            configurable: true
        });
        return ListItem;
    }();
    var VirtualList = function (_super) {
        __extends(VirtualList, _super);
        function VirtualList(parent, holder) {
            var _this = _super.call(this) || this;
            _this.profiler = { getObject: 0, renderItem: 0 };
            _this.name = "$vlist";
            parent.addChild(_this);
            holder.enabled = false;
            _this.setPosition(holder.x, holder.y);
            _this.setSize(holder.width, holder.height);
            _this.addRelation(holder, fgui.RelationType.Width);
            _this.addRelation(holder, fgui.RelationType.Height);
            _this.displayListContainer.addComponent(cc.Mask);
            _this._conf = {
                orientation: ListOrientation.VERTICAL,
                type: ListType.NORMAL,
                xalign: fgui.AlignType.Center,
                yalign: fgui.VertAlignType.Middle,
                row: 1,
                rowGap: 10,
                col: 1,
                colGap: 10,
                itemSize: null,
                itemClass: fgui.GObject,
                itemPool: null,
                itemRenderer: null,
                inertia: true,
                resilience: true,
                loop: false
            };
            _this._numItems = 0;
            _this._listItems = [];
            _this._headCursor = -1;
            _this._tailCursor = -1;
            _this._dragInfo = new DragInfo();
            _this._itemHolder = new fgui.GComponent();
            _this._itemHolder.name = "$holder";
            _this.addChild(_this._itemHolder);
            _this._itemHolder.setPosition(0, 0);
            _this._itemHolder.setSize(0, 0);
            var self = _this;
            _this._itemHolder.hitTest = function (globalPt) {
                var itemHolder = self._itemHolder;
                var pt = itemHolder.node.convertToNodeSpaceAR(globalPt);
                pt.x += itemHolder.node.anchorX * itemHolder._width;
                pt.y += itemHolder.node.anchorY * itemHolder._height;
                pt.y = itemHolder.height - pt.y;
                if (pt.x + itemHolder.x > 0 && pt.x + itemHolder.x < self.width && pt.y + itemHolder.y > 0 && pt.y + itemHolder.y < self.height) {
                    var children = itemHolder._children;
                    var i = 0;
                    var numChildren = children.length;
                    for (; i < numChildren; ++i) {
                        var target = children[i].hitTest(globalPt);
                        if (target) {
                            return target;
                        }
                    }
                    return null;
                } else {
                    return null;
                }
            };
            _this._start = new cc.Vec2(0, 0);
            _this._rowOrCol2Size = {};
            _this._rowOrCol2TotalSize = {};
            _this._itemHolder.on(fgui.Event.TOUCH_BEGIN, _this._onDragStart, _this);
            _this._itemHolder.on(fgui.Event.TOUCH_MOVE, _this._onDragMove, _this);
            _this._itemHolder.on(fgui.Event.TOUCH_END, _this._onDragEnd, _this);
            _this._itemHolder.node.on(cc.Node.EventType.MOUSE_WHEEL, _this._onMouseWheel, _this);
            return _this;
        }
        VirtualList.prototype.getTotalSizeToRowOrCol = function (idx) {
            if (!this._rowOrCol2TotalSize[idx]) {
                var ret = 0;
                for (var i = 0; i < idx; ++i) {
                    ret += this._rowOrCol2Size[i] || 0;
                    if (i > 0) {
                        if (this._conf.orientation == ListOrientation.VERTICAL) {
                            ret += this._conf.rowGap;
                        } else {
                            ret += this._conf.colGap;
                        }
                    }
                }
                this._rowOrCol2TotalSize[idx] = ret;
            }
            return this._rowOrCol2TotalSize[idx];
        };
        VirtualList.prototype.enableEvent = function (b) {
            if (b) {
                this.node.resumeSystemEvents(true);
            } else {
                this.node.pauseSystemEvents(true);
            }
        };
        VirtualList.prototype.getItem = function (index) {
            return this._listItems[index];
        };
        VirtualList.prototype.getLastItem = function () {
            return this._listItems[this._numItems - 1];
        };
        Object.defineProperty(VirtualList.prototype, "conf", {
            set: function set(conf) {
                var _this = this;
                var keys = Object.keys(conf);
                keys.forEach(function (k) {
                    _this._conf[k] = conf[k];
                });
                this._calcMetaInfo();
            },
            enumerable: false,
            configurable: true
        });
        VirtualList.prototype._calcMetaInfo = function () {
            var conf = this._conf;
            var orientation = conf.orientation,
                itemSize = conf.itemSize;
            if (orientation == ListOrientation.VERTICAL) {
                var col = conf.col;
                var colGap = conf.colGap;
                if (conf.xalign == fgui.AlignType.Center) {
                    this._start.x = (this.width - itemSize.width * col - colGap * (col - 1)) / 2;
                } else if (conf.xalign == fgui.AlignType.Left) {
                    this._start.x = 0;
                } else {
                    this._start.x = this.width - itemSize.width * col - colGap * (col - 1);
                }
                if (this._itemHolder.width == 0) {
                    this._itemHolder.setSize(this.width, 0);
                }
            } else {
                var row = conf.row;
                var rowGap = conf.rowGap;
                if (conf.yalign == fgui.VertAlignType.Middle) {
                    this._start.y = (this.height - itemSize.height * row - rowGap * (row - 1)) / 2;
                } else if (conf.yalign == fgui.VertAlignType.Top) {
                    this._start.y = 0;
                } else {
                    this._start.y = this.height - itemSize.height * row - rowGap * (row - 1);
                }
                if (this._itemHolder.height == 0) {
                    this._itemHolder.setSize(0, this.height);
                }
            }
        };
        VirtualList.prototype._calcNumItemInfo = function () {
            var numItems = this._numItems;
            if (this._conf.orientation == ListOrientation.VERTICAL) {
                this._totalRow = Math.ceil(numItems / this._conf.col);
                this._itemHolder.setSize(this.width, this._conf.itemSize.height * this._totalRow + this._conf.rowGap * (this._totalRow - 1));
                this._dragInfo.minPos = new cc.Vec2(0, Math.min(0, -(this._itemHolder.height - this.height)));
            } else {
                this._totalCol = Math.ceil(numItems / this._conf.row);
                this._itemHolder.setSize(this._conf.itemSize.width * this._totalCol + this._conf.colGap * (this._totalCol - 1), this.height);
                this._dragInfo.minPos = new cc.Vec2(Math.min(0, -(this._itemHolder.width - this.width)), 0);
            }
        };
        VirtualList.prototype._expireItemsWithSameRowOrCol = function (item, expired) {
            var orientation = this._conf.orientation;
            var itemSize = this._conf.itemSize;
            var self = this;
            function adjustPos(item) {
                if (item.x < 0 || item.y < 0) {
                    var rowOrColIdx = -1;
                    var itemWidthOrHeight = -1;
                    if (item.index == 0) {
                        item.x = self._start.x;
                        item.y = self._start.y;
                        if (orientation == ListOrientation.VERTICAL) {
                            self._itemHolder.height += item.height - itemSize.height;
                            self._dragInfo.minPos.y = Math.min(0, -(self._itemHolder.height - self.height));
                            rowOrColIdx = item.row;
                            itemWidthOrHeight = item.height;
                        } else {
                            self._itemHolder.width += item.width - itemSize.width;
                            self._dragInfo.minPos.x = Math.min(0, -(self._itemHolder.width - self.width));
                            rowOrColIdx = item.col;
                            itemWidthOrHeight = item.width;
                        }
                    } else {
                        var prevItem = self._listItems[item.index - 1];
                        if (orientation == ListOrientation.VERTICAL) {
                            if (prevItem.row == item.row) {
                                item.x = prevItem.x + prevItem.width + self._conf.colGap;
                                item.y = prevItem.y;
                            } else {
                                item.x = self._start.x;
                                item.y = prevItem.y + self._rowOrCol2Size[prevItem.row] + self._conf.rowGap;
                                self._itemHolder.height += item.height - itemSize.height;
                                self._dragInfo.minPos.y = Math.min(0, -(self._itemHolder.height - self.height));
                            }
                            rowOrColIdx = item.row;
                            itemWidthOrHeight = item.height;
                        } else {
                            if (prevItem.col == item.col) {
                                item.x = prevItem.x;
                                item.y = prevItem.y + prevItem.height + self._conf.rowGap;
                            } else {
                                item.x = prevItem.x + self._rowOrCol2Size[prevItem.col] + self._conf.colGap;
                                item.y = self._start.y;
                                self._itemHolder.width += item.width - itemSize.width;
                                self._dragInfo.minPos.x = Math.min(0, -(self._itemHolder.width - self.width));
                            }
                            rowOrColIdx = item.col;
                            itemWidthOrHeight = item.width;
                        }
                    }
                    var size = self._rowOrCol2Size[rowOrColIdx] || 0;
                    self._rowOrCol2Size[rowOrColIdx] = Math.max(size, itemWidthOrHeight);
                }
            }
            function handle(idx) {
                var li = self._listItems[idx];
                if (!li) {
                    return false;
                }
                if (li.expired == false && expired == false) return true;
                if (orientation == ListOrientation.VERTICAL) {
                    if (li.row == item.row) {
                        li.setExpire(expired);
                        if (!expired) {
                            adjustPos(li);
                        }
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (li.col == item.col) {
                        li.setExpire(expired);
                        if (!expired) {
                            adjustPos(li);
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            }
            handle(item.index);
            if (orientation == ListOrientation.VERTICAL && this._conf.col == 1) return;else if (orientation == ListOrientation.HORIZONTAL && this._conf.row == 1) return;
            var i = item.index - 1;
            for (; i >= 0; --i) {
                if (!handle(i)) {
                    break;
                }
            }
            i = item.index + 1;
            for (; i < this._numItems; ++i) {
                if (!handle(i)) {
                    break;
                }
            }
        };
        VirtualList.prototype._checkList = function () {
            var orientation = this._conf.orientation;
            var vw = this.width;
            var vh = this.height;
            var itemSize = this._conf.itemSize;
            var realWidth = 0,
                realHeight = 0;
            var sizeDirty = false;
            var row = this._conf.row,
                col = this._conf.col;
            var numItems = this._numItems;
            var step = 0,
                step1;
            if (orientation == ListOrientation.VERTICAL) {
                step = col;
                step1 = this._totalRow;
            } else {
                step = row;
                step1 = this._totalCol;
            }
            function moveHeadForwardCursor(i) {
                return i + step;
            }
            function moveHeadBackwardCursor(i) {
                return i - step;
            }
            function moveTailForwardCursor(i) {
                return Math.min(numItems, i + step);
            }
            function moveTailBackwardCursor(i) {
                if (orientation == ListOrientation.VERTICAL) {
                    return Math.floor((i - col) / col) * (row - 1) + col;
                } else {
                    return Math.floor((i - row) / row) * (col - 1) + row;
                }
            }
            if (this._headCursor < 0 || this._tailCursor < 0) {
                this._headCursor = this._tailCursor = 0;
                var i = 0;
                for (; i < this._numItems; ++i) {
                    var li = this._listItems[i];
                    if (i == 0 || li.checkInView(vw, vh)) {
                        if (li.expired) {
                            this._expireItemsWithSameRowOrCol(li, false);
                        }
                        this._headCursor = Math.min(this._headCursor, i);
                        this._tailCursor = Math.max(this._tailCursor, i);
                        if (itemSize.width != li.width || itemSize.height != li.height) {
                            sizeDirty = true;
                            realWidth = li.width;
                            realHeight = li.height;
                        }
                        if (sizeDirty) {
                            var j = i,
                                cnt = this._listItems.length;
                            for (; j < cnt; ++j) {
                                var li_1 = this._listItems[j];
                                li_1.width = realWidth;
                                li_1.height = realHeight;
                            }
                            sizeDirty = false;
                        }
                    } else {
                        break;
                    }
                }
            } else {
                var i1 = this._headCursor;
                for (; i1 < this._numItems;) {
                    var li = this._listItems[i1];
                    if (li.checkInView(vw, vh)) {
                        this._expireItemsWithSameRowOrCol(li, false);
                        this._headCursor = i1;
                        break;
                    } else {
                        this._expireItemsWithSameRowOrCol(li, true);
                        i1 = moveHeadForwardCursor(i1);
                    }
                }
                var firstHitInViewItem = false;
                var i2 = this._headCursor;
                for (; i2 >= 0;) {
                    var li = this._listItems[i2];
                    if (li.checkInView(vw, vh)) {
                        this._expireItemsWithSameRowOrCol(li, false);
                        this._headCursor = i2;
                        firstHitInViewItem = true;
                    } else {
                        this._expireItemsWithSameRowOrCol(li, true);
                        if (firstHitInViewItem) {
                            break;
                        }
                    }
                    i2 = moveHeadBackwardCursor(i2);
                }
                var i3 = Math.floor(this._tailCursor / step) * step;
                for (; i3 >= 0;) {
                    var li = this._listItems[i3];
                    if (li.checkInView(vw, vh)) {
                        this._expireItemsWithSameRowOrCol(li, false);
                        this._tailCursor = Math.min(numItems - 1, i3 + step - 1);
                        break;
                    } else {
                        this._expireItemsWithSameRowOrCol(li, true);
                        i3 = moveHeadBackwardCursor(i3);
                    }
                }
                firstHitInViewItem = false;
                var i4 = Math.floor(this._tailCursor / step) * step;
                for (; i4 < this._numItems;) {
                    var li = this._listItems[i4];
                    if (li.checkInView(vw, vh)) {
                        this._expireItemsWithSameRowOrCol(li, false);
                        this._tailCursor = Math.min(numItems - 1, i4 + step - 1);
                        firstHitInViewItem = true;
                    } else {
                        this._expireItemsWithSameRowOrCol(li, true);
                        if (firstHitInViewItem) {
                            break;
                        }
                    }
                    i4 = moveHeadForwardCursor(i4);
                }
            }
        };
        Object.defineProperty(VirtualList.prototype, "numItems", {
            get: function get() {
                return this._numItems;
            },
            set: function set(n) {
                if (!this._conf.itemRenderer) {
                    throw Error("You have to provide item renderer callback func!!");
                }
                if (!this._conf.itemPool) {
                    throw Error("You have to provide item pool object!!");
                }
                if (n < 0) {
                    throw Error("are you kidding me?");
                }
                if (this._numItems != n) {
                    var conf = this._conf;
                    var oldNum = this._listItems.length;
                    this._numItems = n;
                    var col = conf.col,
                        row = conf.row;
                    var isVertical = conf.orientation == ListOrientation.VERTICAL;
                    if (oldNum < this._numItems) {
                        for (var i = oldNum; i < this._numItems; ++i) {
                            var item = new ListItem();
                            item.width = conf.itemSize.width;
                            item.height = conf.itemSize.height;
                            item.pool = conf.itemPool;
                            item.parent = this._itemHolder;
                            item.index = i;
                            item.itemRenderer = conf.itemRenderer;
                            item.orientation = conf.orientation;
                            item.hostList = this;
                            if (isVertical) {
                                item.row = Math.floor(i / col);
                                item.col = i % col;
                                item.advance = this._conf.rowGap;
                            } else {
                                item.row = i % row;
                                item.col = Math.floor(i / row);
                                item.advance = this._conf.colGap;
                            }
                            this._listItems.push(item);
                        }
                    } else {
                        for (var i = this._numItems; i < oldNum; ++i) {
                            var item = this._listItems[i];
                            if (item) {
                                item.setExpire(true);
                                item.x = -1;
                                item.y = -1;
                            }
                        }
                        if (this._numItems == 0) {
                            this._reset();
                            return;
                        }
                    }
                    this._calcNumItemInfo();
                    this._checkList();
                }
            },
            enumerable: false,
            configurable: true
        });
        VirtualList.prototype._reset = function () {
            this._listItems = [];
            this._headCursor = this._tailCursor = -1;
            this._itemHolder.setPosition(0, 0);
            this._dragInfo.minPos = null;
            this.profiler.getObject = this.profiler.renderItem = 0;
            this._rowOrCol2Size = {};
            this._rowOrCol2TotalSize = {};
        };
        VirtualList.prototype._onMouseWheel = function (evt) {
            console.log("virtual list mouse wheel1", evt);
            var scroll = evt.getScrollY() / Math.abs(evt.getScrollY()) * 120 * 0.10;
            this._moveListByOffset(new cc.Vec2(0, scroll));
            this._rollBack();
            evt.stopPropagation();
        };
        VirtualList.prototype._onDragStart = function (evt) {
            var touch = evt.touch;
            if (this.numItems <= 0 || !touch) return;
            this._dragInfo.dragStart(touch.getLocation());
            evt.captureTouch();
            egret.Tween.removeTweens(this._itemHolder);
        };
        VirtualList.prototype._moveListByOffset = function (offset) {
            if (this._conf.orientation == ListOrientation.VERTICAL) {
                var diffy = -offset.y / fgui.GRoot.contentScaleFactor;
                if (diffy != 0) {
                    if (this._conf.resilience) {
                        var y = this._itemHolder.y + diffy;
                        if (y > this._dragInfo.maxPos.y) {
                            this._itemHolder.y = this._itemHolder.y + diffy / 3;
                        } else if (y < this._dragInfo.minPos.y) {
                            this._itemHolder.y = this._itemHolder.y + diffy / 3;
                        } else {
                            this._itemHolder.y = y;
                            this._checkList();
                        }
                    } else {
                        var y = this._itemHolder.y + diffy;
                        this._itemHolder.y = Math.min(Math.max(this._dragInfo.minPos.y, y), this._dragInfo.maxPos.y);
                        this._checkList();
                    }
                }
            } else {
                var diffx = -offset.x / fgui.GRoot.contentScaleFactor;
                if (diffx != 0) {
                    if (this._conf.resilience) {
                        var x = this._itemHolder.y + diffx;
                        if (x > this._dragInfo.maxPos.x) {
                            this._itemHolder.x = this._itemHolder.x + diffx / 3;
                        } else if (x < this._dragInfo.minPos.y) {
                            this._itemHolder.x = this._itemHolder.x + diffx / 3;
                        } else {
                            this._itemHolder.x = x;
                            this._checkList();
                        }
                    } else {
                        var x = this._itemHolder.x + diffx;
                        this._itemHolder.x = Math.min(Math.max(this._dragInfo.minPos.x, x), this._dragInfo.maxPos.x);
                        this._checkList();
                    }
                }
            }
        };
        VirtualList.prototype._onDragMove = function (evt) {
            var touch = evt.touch;
            if (this.numItems <= 0 || !touch) return;
            this._dragInfo.dragMove(touch.getLocation());
            this._moveListByOffset(this._dragInfo.getDelta());
        };
        VirtualList.prototype._onDragEnd = function (evt) {
            var touch = evt.touch;
            if (this.numItems <= 0 || !touch) return;
            this._dragInfo.dragEnd(touch.getLocation());
            this._rollBack();
            this._dragInfo.cleanup();
        };
        VirtualList.prototype._rollBack = function () {
            if (this._conf.resilience) {
                if (this._conf.orientation == ListOrientation.VERTICAL) {
                    var y = this._itemHolder.y;
                    if (y > this._dragInfo.maxPos.y) {
                        egret.Tween.get(this._itemHolder).to({ y: this._dragInfo.maxPos.y }, 100);
                    } else if (y < this._dragInfo.minPos.y) {
                        egret.Tween.get(this._itemHolder).to({ y: this._dragInfo.minPos.y }, 100);
                    }
                } else {
                    var x = this._itemHolder.x;
                    if (x > this._dragInfo.maxPos.x) {
                        egret.Tween.get(this._itemHolder).to({ x: this._dragInfo.maxPos.x }, 100);
                    } else if (x < this._dragInfo.minPos.x) {
                        egret.Tween.get(this._itemHolder).to({ x: this._dragInfo.minPos.x }, 100);
                    }
                }
            }
        };
        VirtualList.prototype.scrollToView = function (idx) {
            if (this.numItems <= 0) return;
            var targetCursor = 0,
                maxTailCursor = this._numItems - 1,
                orientation = this._conf.orientation;
            if (orientation == ListOrientation.VERTICAL) {
                targetCursor = idx / this._conf.col;
            } else {
                targetCursor = idx / this._conf.row;
            }
            this._checkList();
            if (this._headCursor < targetCursor) {
                while (this._headCursor < targetCursor && this._tailCursor < maxTailCursor) {
                    var item = this._listItems[this._headCursor];
                    if (orientation == ListOrientation.VERTICAL) {
                        this._moveListByOffset(cc.v2(0, (item.height + this._conf.rowGap) * fgui.GRoot.contentScaleFactor));
                    } else {
                        this._moveListByOffset(cc.v2((item.width + this._conf.colGap) * fgui.GRoot.contentScaleFactor, 0));
                    }
                    this._checkList();
                }
                if (this._tailCursor == maxTailCursor && idx == maxTailCursor) {
                    if (orientation == ListOrientation.VERTICAL) {
                        this._itemHolder.y = this._dragInfo.minPos.y;
                    } else {
                        this._itemHolder.x = this._dragInfo.minPos.x;
                    }
                }
            } else if (this._headCursor > targetCursor) {
                while (this._headCursor > targetCursor && this._headCursor > 0) {
                    var item = this._listItems[this._headCursor - 1];
                    if (orientation == ListOrientation.VERTICAL) {
                        this._moveListByOffset(cc.v2(0, -(item.height + this._conf.rowGap) * fgui.GRoot.contentScaleFactor));
                    } else {
                        this._moveListByOffset(cc.v2(-(item.width + this._conf.colGap) * fgui.GRoot.contentScaleFactor, 0));
                    }
                    this._checkList();
                }
                if (this._headCursor == 0) {
                    if (orientation == ListOrientation.VERTICAL) {
                        this._itemHolder.y = this._dragInfo.maxPos.y;
                    } else {
                        this._itemHolder.x = this._dragInfo.maxPos.x;
                    }
                } else if (this._headCursor == targetCursor) {
                    if (orientation == ListOrientation.VERTICAL) {
                        var y = this._listItems[targetCursor].y;
                        var offset = this._itemHolder.y + y;
                        this._moveListByOffset(cc.v2(0, offset * fgui.GRoot.contentScaleFactor));
                    } else {
                        var x = this._listItems[targetCursor].x;
                        var offset = this._itemHolder.x + x;
                        this._moveListByOffset(cc.v2(offset * fgui.GRoot.contentScaleFactor, 0));
                    }
                    this._checkList();
                }
            } else {
                if (orientation == ListOrientation.VERTICAL) {
                    var y = this._listItems[targetCursor].y;
                    var offset = this._itemHolder.y + y;
                    this._moveListByOffset(cc.v2(0, offset * fgui.GRoot.contentScaleFactor));
                } else {
                    var x = this._listItems[targetCursor].x;
                    var offset = this._itemHolder.x + x;
                    this._moveListByOffset(cc.v2(offset * fgui.GRoot.contentScaleFactor, 0));
                }
                this._checkList();
            }
        };
        VirtualList.prototype._cleanupItems = function () {
            this._listItems.forEach(function (item) {
                item.setExpire(true);
            });
            this._listItems = [];
            this._tailCursor = this._headCursor = 0;
            this.profiler.getObject = this.profiler.renderItem = 0;
        };
        VirtualList.prototype.dispose = function () {
            this._cleanupItems();
            _super.prototype.dispose.call(this);
        };
        return VirtualList;
    }(fgui.GComponent);
    UI.VirtualList = VirtualList;
})(UI || (UI = {}));
var egret;
(function (egret) {
    var Endian = function () {
        function Endian() {}
        Endian.LITTLE_ENDIAN = "littleEndian";
        Endian.BIG_ENDIAN = "bigEndian";
        return Endian;
    }();
    egret.Endian = Endian;
    var ByteArray = function () {
        function ByteArray(buffer, bufferExtSize) {
            if (bufferExtSize === void 0) {
                bufferExtSize = 0;
            }
            this.bufferExtSize = 0;
            this.EOF_byte = -1;
            this.EOF_code_point = -1;
            if (bufferExtSize < 0) {
                bufferExtSize = 0;
            }
            this.bufferExtSize = bufferExtSize;
            var bytes,
                wpos = 0;
            if (buffer) {
                var uint8 = void 0;
                if (buffer instanceof Uint8Array) {
                    uint8 = buffer;
                    wpos = buffer.length;
                } else {
                    wpos = buffer.byteLength;
                    uint8 = new Uint8Array(buffer);
                }
                if (bufferExtSize == 0) {
                    bytes = new Uint8Array(wpos);
                } else {
                    var multi = (wpos / bufferExtSize | 0) + 1;
                    bytes = new Uint8Array(multi * bufferExtSize);
                }
                bytes.set(uint8);
            } else {
                bytes = new Uint8Array(bufferExtSize);
            }
            this.write_position = wpos;
            this._position = 0;
            this._bytes = bytes;
            this.data = new DataView(bytes.buffer);
            this.endian = Endian.BIG_ENDIAN;
        }
        Object.defineProperty(ByteArray.prototype, "endian", {
            get: function get() {
                return this.$endian == 0 ? Endian.LITTLE_ENDIAN : Endian.BIG_ENDIAN;
            },
            set: function set(value) {
                this.$endian = value == Endian.LITTLE_ENDIAN ? 0 : 1;
            },
            enumerable: false,
            configurable: true
        });
        ByteArray.prototype.setArrayBuffer = function (buffer) {};
        Object.defineProperty(ByteArray.prototype, "readAvailable", {
            get: function get() {
                return this.write_position - this._position;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "buffer", {
            get: function get() {
                return this.data.buffer.slice(0, this.write_position);
            },
            set: function set(value) {
                var wpos = value.byteLength;
                var uint8 = new Uint8Array(value);
                var bufferExtSize = this.bufferExtSize;
                var bytes;
                if (bufferExtSize == 0) {
                    bytes = new Uint8Array(wpos);
                } else {
                    var multi = (wpos / bufferExtSize | 0) + 1;
                    bytes = new Uint8Array(multi * bufferExtSize);
                }
                bytes.set(uint8);
                this.write_position = wpos;
                this._bytes = bytes;
                this.data = new DataView(bytes.buffer);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "rawBuffer", {
            get: function get() {
                return this.data.buffer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "bytes", {
            get: function get() {
                return this._bytes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "dataView", {
            get: function get() {
                return this.data;
            },
            set: function set(value) {
                this.buffer = value.buffer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "bufferOffset", {
            get: function get() {
                return this.data.byteOffset;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "position", {
            get: function get() {
                return this._position;
            },
            set: function set(value) {
                this._position = value;
                if (value > this.write_position) {
                    this.write_position = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "length", {
            get: function get() {
                return this.write_position;
            },
            set: function set(value) {
                this.write_position = value;
                if (this.data.byteLength > value) {
                    this._position = value;
                }
                this._validateBuffer(value);
            },
            enumerable: false,
            configurable: true
        });
        ByteArray.prototype._validateBuffer = function (value) {
            if (this.data.byteLength < value) {
                var be = this.bufferExtSize;
                var tmp = void 0;
                if (be == 0) {
                    tmp = new Uint8Array(value);
                } else {
                    var nLen = ((value / be >> 0) + 1) * be;
                    tmp = new Uint8Array(nLen);
                }
                tmp.set(this._bytes);
                this._bytes = tmp;
                this.data = new DataView(tmp.buffer);
            }
        };
        Object.defineProperty(ByteArray.prototype, "bytesAvailable", {
            get: function get() {
                return this.data.byteLength - this._position;
            },
            enumerable: false,
            configurable: true
        });
        ByteArray.prototype.clear = function () {
            var buffer = new ArrayBuffer(this.bufferExtSize);
            this.data = new DataView(buffer);
            this._bytes = new Uint8Array(buffer);
            this._position = 0;
            this.write_position = 0;
        };
        ByteArray.prototype.readBoolean = function () {
            if (this.validate(1)) return !!this._bytes[this.position++];
        };
        ByteArray.prototype.readByte = function () {
            if (this.validate(1)) return this.data.getInt8(this.position++);
        };
        ByteArray.prototype.readBytes = function (bytes, offset, length) {
            if (offset === void 0) {
                offset = 0;
            }
            if (length === void 0) {
                length = 0;
            }
            if (!bytes) {
                return;
            }
            var pos = this._position;
            var available = this.write_position - pos;
            if (available < 0) {
                egret.$error(1025);
                return;
            }
            if (length == 0) {
                length = available;
            } else if (length > available) {
                egret.$error(1025);
                return;
            }
            var position = bytes._position;
            bytes._position = 0;
            bytes.validateBuffer(offset + length);
            bytes._position = position;
            bytes._bytes.set(this._bytes.subarray(pos, pos + length), offset);
            this.position += length;
        };
        ByteArray.prototype.readDouble = function () {
            if (this.validate(8)) {
                var value = this.data.getFloat64(this._position, this.$endian == 0);
                this.position += 8;
                return value;
            }
        };
        ByteArray.prototype.readFloat = function () {
            if (this.validate(4)) {
                var value = this.data.getFloat32(this._position, this.$endian == 0);
                this.position += 4;
                return value;
            }
        };
        ByteArray.prototype.readInt = function () {
            if (this.validate(4)) {
                var value = this.data.getInt32(this._position, this.$endian == 0);
                this.position += 4;
                return value;
            }
        };
        ByteArray.prototype.readShort = function () {
            if (this.validate(2)) {
                var value = this.data.getInt16(this._position, this.$endian == 0);
                this.position += 2;
                return value;
            }
        };
        ByteArray.prototype.readUnsignedByte = function () {
            if (this.validate(1)) return this._bytes[this.position++];
        };
        ByteArray.prototype.readUnsignedInt = function () {
            if (this.validate(4)) {
                var value = this.data.getUint32(this._position, this.$endian == 0);
                this.position += 4;
                return value;
            }
        };
        ByteArray.prototype.readUnsignedShort = function () {
            if (this.validate(2)) {
                var value = this.data.getUint16(this._position, this.$endian == 0);
                this.position += 2;
                return value;
            }
        };
        ByteArray.prototype.readUTF = function () {
            var length = this.readUnsignedShort();
            if (length > 0) {
                return this.readUTFBytes(length);
            } else {
                return "";
            }
        };
        ByteArray.prototype.readUTFBytes = function (length) {
            if (!this.validate(length)) {
                return;
            }
            var data = this.data;
            var bytes = new Uint8Array(data.buffer, data.byteOffset + this._position, length);
            this.position += length;
            return this.decodeUTF8(bytes);
        };
        ByteArray.prototype.writeBoolean = function (value) {
            this.validateBuffer(1);
            this._bytes[this.position++] = +value;
        };
        ByteArray.prototype.writeByte = function (value) {
            this.validateBuffer(1);
            this._bytes[this.position++] = value & 0xff;
        };
        ByteArray.prototype.writeBytes = function (bytes, offset, length) {
            if (offset === void 0) {
                offset = 0;
            }
            if (length === void 0) {
                length = 0;
            }
            var writeLength;
            if (offset < 0) {
                return;
            }
            if (length < 0) {
                return;
            } else if (length == 0) {
                writeLength = bytes.length - offset;
            } else {
                writeLength = Math.min(bytes.length - offset, length);
            }
            if (writeLength > 0) {
                this.validateBuffer(writeLength);
                this._bytes.set(bytes._bytes.subarray(offset, offset + writeLength), this._position);
                this.position = this._position + writeLength;
            }
        };
        ByteArray.prototype.writeDouble = function (value) {
            this.validateBuffer(8);
            this.data.setFloat64(this._position, value, this.$endian == 0);
            this.position += 8;
        };
        ByteArray.prototype.writeFloat = function (value) {
            this.validateBuffer(4);
            this.data.setFloat32(this._position, value, this.$endian == 0);
            this.position += 4;
        };
        ByteArray.prototype.writeInt = function (value) {
            this.validateBuffer(4);
            this.data.setInt32(this._position, value, this.$endian == 0);
            this.position += 4;
        };
        ByteArray.prototype.writeShort = function (value) {
            this.validateBuffer(2);
            this.data.setInt16(this._position, value, this.$endian == 0);
            this.position += 2;
        };
        ByteArray.prototype.writeUnsignedInt = function (value) {
            this.validateBuffer(4);
            this.data.setUint32(this._position, value, this.$endian == 0);
            this.position += 4;
        };
        ByteArray.prototype.writeUnsignedShort = function (value) {
            this.validateBuffer(2);
            this.data.setUint16(this._position, value, this.$endian == 0);
            this.position += 2;
        };
        ByteArray.prototype.writeUTF = function (value) {
            var utf8bytes = this.encodeUTF8(value);
            var length = utf8bytes.length;
            this.validateBuffer(2 + length);
            this.data.setUint16(this._position, length, this.$endian == 0);
            this.position += 2;
            this._writeUint8Array(utf8bytes, false);
        };
        ByteArray.prototype.writeUTFBytes = function (value) {
            this._writeUint8Array(this.encodeUTF8(value));
        };
        ByteArray.prototype.toString = function () {
            return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable;
        };
        ByteArray.prototype._writeUint8Array = function (bytes, validateBuffer) {
            if (validateBuffer === void 0) {
                validateBuffer = true;
            }
            var pos = this._position;
            var npos = pos + bytes.length;
            if (validateBuffer) {
                this.validateBuffer(npos);
            }
            this.bytes.set(bytes, pos);
            this.position = npos;
        };
        ByteArray.prototype.validate = function (len) {
            var bl = this._bytes.length;
            if (bl > 0 && this._position + len <= bl) {
                return true;
            } else {
                egret.$error(1025);
            }
        };
        ByteArray.prototype.validateBuffer = function (len) {
            this.write_position = len > this.write_position ? len : this.write_position;
            len += this._position;
            this._validateBuffer(len);
        };
        ByteArray.prototype.encodeUTF8 = function (str) {
            var pos = 0;
            var codePoints = this.stringToCodePoints(str);
            var outputBytes = [];
            while (codePoints.length > pos) {
                var code_point = codePoints[pos++];
                if (this.inRange(code_point, 0xD800, 0xDFFF)) {
                    this.encoderError(code_point);
                } else if (this.inRange(code_point, 0x0000, 0x007f)) {
                    outputBytes.push(code_point);
                } else {
                    var count = void 0,
                        offset = void 0;
                    if (this.inRange(code_point, 0x0080, 0x07FF)) {
                        count = 1;
                        offset = 0xC0;
                    } else if (this.inRange(code_point, 0x0800, 0xFFFF)) {
                        count = 2;
                        offset = 0xE0;
                    } else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {
                        count = 3;
                        offset = 0xF0;
                    }
                    outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);
                    while (count > 0) {
                        var temp = this.div(code_point, Math.pow(64, count - 1));
                        outputBytes.push(0x80 + temp % 64);
                        count -= 1;
                    }
                }
            }
            return new Uint8Array(outputBytes);
        };
        ByteArray.prototype.decodeUTF8 = function (data) {
            var fatal = false;
            var pos = 0;
            var result = "";
            var code_point;
            var utf8_code_point = 0;
            var utf8_bytes_needed = 0;
            var utf8_bytes_seen = 0;
            var utf8_lower_boundary = 0;
            while (data.length > pos) {
                var _byte = data[pos++];
                if (_byte == this.EOF_byte) {
                    if (utf8_bytes_needed != 0) {
                        code_point = this.decoderError(fatal);
                    } else {
                        code_point = this.EOF_code_point;
                    }
                } else {
                    if (utf8_bytes_needed == 0) {
                        if (this.inRange(_byte, 0x00, 0x7F)) {
                            code_point = _byte;
                        } else {
                            if (this.inRange(_byte, 0xC2, 0xDF)) {
                                utf8_bytes_needed = 1;
                                utf8_lower_boundary = 0x80;
                                utf8_code_point = _byte - 0xC0;
                            } else if (this.inRange(_byte, 0xE0, 0xEF)) {
                                utf8_bytes_needed = 2;
                                utf8_lower_boundary = 0x800;
                                utf8_code_point = _byte - 0xE0;
                            } else if (this.inRange(_byte, 0xF0, 0xF4)) {
                                utf8_bytes_needed = 3;
                                utf8_lower_boundary = 0x10000;
                                utf8_code_point = _byte - 0xF0;
                            } else {
                                this.decoderError(fatal);
                            }
                            utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
                            code_point = null;
                        }
                    } else if (!this.inRange(_byte, 0x80, 0xBF)) {
                        utf8_code_point = 0;
                        utf8_bytes_needed = 0;
                        utf8_bytes_seen = 0;
                        utf8_lower_boundary = 0;
                        pos--;
                        code_point = this.decoderError(fatal, _byte);
                    } else {
                        utf8_bytes_seen += 1;
                        utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
                        if (utf8_bytes_seen !== utf8_bytes_needed) {
                            code_point = null;
                        } else {
                            var cp = utf8_code_point;
                            var lower_boundary = utf8_lower_boundary;
                            utf8_code_point = 0;
                            utf8_bytes_needed = 0;
                            utf8_bytes_seen = 0;
                            utf8_lower_boundary = 0;
                            if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {
                                code_point = cp;
                            } else {
                                code_point = this.decoderError(fatal, _byte);
                            }
                        }
                    }
                }
                if (code_point !== null && code_point !== this.EOF_code_point) {
                    if (code_point <= 0xFFFF) {
                        if (code_point > 0) result += String.fromCharCode(code_point);
                    } else {
                        code_point -= 0x10000;
                        result += String.fromCharCode(0xD800 + (code_point >> 10 & 0x3ff));
                        result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));
                    }
                }
            }
            return result;
        };
        ByteArray.prototype.encoderError = function (code_point) {
            egret.$error(1026, code_point);
        };
        ByteArray.prototype.decoderError = function (fatal, opt_code_point) {
            if (fatal) {
                egret.$error(1027);
            }
            return opt_code_point || 0xFFFD;
        };
        ByteArray.prototype.inRange = function (a, min, max) {
            return min <= a && a <= max;
        };
        ByteArray.prototype.div = function (n, d) {
            return Math.floor(n / d);
        };
        ByteArray.prototype.stringToCodePoints = function (string) {
            var cps = [];
            var i = 0,
                n = string.length;
            while (i < string.length) {
                var c = string.charCodeAt(i);
                if (!this.inRange(c, 0xD800, 0xDFFF)) {
                    cps.push(c);
                } else if (this.inRange(c, 0xDC00, 0xDFFF)) {
                    cps.push(0xFFFD);
                } else {
                    if (i == n - 1) {
                        cps.push(0xFFFD);
                    } else {
                        var d = string.charCodeAt(i + 1);
                        if (this.inRange(d, 0xDC00, 0xDFFF)) {
                            var a = c & 0x3FF;
                            var b = d & 0x3FF;
                            i += 1;
                            cps.push(0x10000 + (a << 10) + b);
                        } else {
                            cps.push(0xFFFD);
                        }
                    }
                }
                i += 1;
            }
            return cps;
        };
        return ByteArray;
    }();
    egret.ByteArray = ByteArray;
})(egret || (egret = {}));
var egret;
(function (egret) {
    egret.$callLaterFunctionList = [];
    egret.$callLaterThisList = [];
    egret.$callLaterArgsList = [];
    function callLater(method, thisObject) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        egret.$callLaterFunctionList.push(method);
        egret.$callLaterThisList.push(thisObject);
        egret.$callLaterArgsList.push(args);
    }
    egret.callLater = callLater;
})(egret || (egret = {}));
var egret;
(function (egret) {})(egret || (egret = {}));
var egret;
(function (egret) {
    var pointPool = [];
    var DEG_TO_RAD = Math.PI / 180;
    var Point = function (_super) {
        __extends(Point, _super);
        function Point(x, y) {
            if (x === void 0) {
                x = 0;
            }
            if (y === void 0) {
                y = 0;
            }
            var _this = _super.call(this) || this;
            _this.x = x;
            _this.y = y;
            return _this;
        }
        Point.release = function (point) {
            if (!point) {
                return;
            }
            pointPool.push(point);
        };
        Point.create = function (x, y) {
            var point = pointPool.pop();
            if (!point) {
                point = new Point();
            }
            return point.setTo(x, y);
        };
        Object.defineProperty(Point.prototype, "length", {
            get: function get() {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            },
            enumerable: false,
            configurable: true
        });
        Point.prototype.setTo = function (x, y) {
            this.x = x;
            this.y = y;
            return this;
        };
        Point.prototype.clone = function () {
            return new Point(this.x, this.y);
        };
        Point.prototype.equals = function (toCompare) {
            return this.x == toCompare.x && this.y == toCompare.y;
        };
        Point.distance = function (p1, p2) {
            return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
        };
        Point.prototype.copyFrom = function (sourcePoint) {
            this.x = sourcePoint.x;
            this.y = sourcePoint.y;
        };
        Point.prototype.add = function (v) {
            return new Point(this.x + v.x, this.y + v.y);
        };
        Point.interpolate = function (pt1, pt2, f) {
            var f1 = 1 - f;
            return new Point(pt1.x * f + pt2.x * f1, pt1.y * f + pt2.y * f1);
        };
        Point.prototype.normalize = function (thickness) {
            if (this.x != 0 || this.y != 0) {
                var relativeThickness = thickness / this.length;
                this.x *= relativeThickness;
                this.y *= relativeThickness;
            }
        };
        Point.prototype.offset = function (dx, dy) {
            this.x += dx;
            this.y += dy;
        };
        Point.polar = function (len, angle) {
            return new Point(len * Math.cos(angle / DEG_TO_RAD), len * Math.sin(angle / DEG_TO_RAD));
        };
        Point.prototype.subtract = function (v) {
            return new Point(this.x - v.x, this.y - v.y);
        };
        Point.prototype.toString = function () {
            return "(x=" + this.x + ", y=" + this.y + ")";
        };
        return Point;
    }(egret.HashObject);
    egret.Point = Point;
    egret.$TempPoint = new Point();
})(egret || (egret = {}));
var RES;
(function (RES) {
    var s_resourcePool = {};
    RES.s_crossSiteResource = {};
    var s_getResAsyncPromise = {};
    function isHttpRes(url) {
        return url.indexOf("http://") == 0 || url.indexOf("https://") == 0;
    }
    RES.isHttpRes = isHttpRes;
    function hasResLoaded(url) {
        return s_resourcePool[url] && s_resourcePool[url] > 0;
    }
    var ResReleaseWatchDog = function () {
        function ResReleaseWatchDog() {
            this._urlLocks = {};
            this._url2Release = [];
            fgui.GTimers.inst.add(2000, -1, this._heartbeat, this);
        }
        Object.defineProperty(ResReleaseWatchDog, "inst", {
            get: function get() {
                if (this._inst == null) {
                    this._inst = new ResReleaseWatchDog();
                }
                return this._inst;
            },
            enumerable: false,
            configurable: true
        });
        ResReleaseWatchDog.prototype._heartbeat = function () {
            var urls = this._url2Release;
            this._url2Release = [];
            var locked = [];
            for (var i = 0; i < urls.length; ++i) {
                var urlInfo = urls[i];
                var url = urlInfo.url;
                if (this._urlLocks[url]) {
                    locked.push(urlInfo);
                } else if (!hasResLoaded(url)) {
                    this._doReleaseAssets(url, urlInfo.t);
                }
            }
            this._url2Release = this._url2Release.concat(locked);
        };
        ResReleaseWatchDog.prototype._doReleaseAssets = function (url, t) {
            var asset = cc.loader.getRes(url, t);
            if (asset) {
                var dependencies = cc.loader.getDependsRecursively(asset);
                if (dependencies) {
                    cc.loader.release(dependencies);
                } else {
                    if (asset.nativeUrl) {
                        cc.loader.release(asset.nativeUrl);
                    }
                    asset.destroy();
                }
            }
        };
        ResReleaseWatchDog.prototype.lockRes = function (url) {
            var cnt = this._urlLocks[url] | 0;
            this._urlLocks[url] = cnt + 1;
        };
        ResReleaseWatchDog.prototype.unlockRes = function (url) {
            var cnt = this._urlLocks[url];
            if (cnt && cnt > 0) {
                cnt--;
                if (cnt <= 0) {
                    delete this._urlLocks[url];
                } else {
                    this._urlLocks[url] = cnt;
                }
            }
        };
        ResReleaseWatchDog.prototype.addReleaseRes = function (url, t) {
            this._url2Release.push({ url: url, t: t });
        };
        ResReleaseWatchDog._inst = null;
        return ResReleaseWatchDog;
    }();
    function retain(url, asset) {
        if (!url) {
            return;
        }
        if (isHttpRes(url)) {
            if (asset) {
                var info = RES.s_crossSiteResource[url];
                if (!info) {
                    info = [];
                    info.push(asset);
                    info.push(0);
                    RES.s_crossSiteResource[url] = info;
                }
                info[1]++;
            }
        } else {
            if (!fgui.ToolSet.startsWith(url, "ui://")) {
                var count = s_resourcePool[url] || 0;
                s_resourcePool[url] = count + 1;
            }
        }
        ResReleaseWatchDog.inst.unlockRes(url);
    }
    RES.retain = retain;
    function release(url, type) {
        if (!url || url == "") return;
        if (isHttpRes(url)) {
            var info = RES.s_crossSiteResource[url];
            if (info) {
                info[1]--;
                if (info[1] <= 0) {
                    var asset = info[0];
                    if (asset) {
                        cc.loader.releaseAsset(asset);
                    }
                    RES.s_crossSiteResource[url] = null;
                    delete RES.s_crossSiteResource[url];
                }
            }
            return info[1];
        } else if (!fgui.ToolSet.startsWith(url, "ui://")) {
            var count = s_resourcePool[url] || 0;
            count--;
            if (count <= 0) {
                s_resourcePool[url] = null;
                delete s_resourcePool[url];
                if (!fgui.ToolSet.startsWith(url, "ui://")) {
                    ResReleaseWatchDog.inst.addReleaseRes(url, type);
                }
            } else {
                s_resourcePool[url] = count;
            }
            return count;
        }
    }
    RES.release = release;
    function getResAsync(url, type, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var res, item, loader, p, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isHttpRes(url)) return [3, 2];
                        return [4, getImageCrossSiteAsync(url, type)];
                    case 1:
                        return [2, _a.sent()];
                    case 2:
                        if (hasResLoaded(url)) {
                            res = cc.loader.getRes(url, type);
                        }
                        if (!res) return [3, 3];
                        return [2, res];
                    case 3:
                        if (url.indexOf("ui://") == 0) {
                            if (type == cc.SpriteFrame) {
                                item = fgui.UIPackage.getItemByURL(url);
                                if (item == null) {
                                    return [2, null];
                                } else {
                                    item.load();
                                    if (item.asset == null) {
                                        return [2, null];
                                    } else {
                                        return [2, item.asset];
                                    }
                                }
                            } else {
                                loader = new fgui.GLoader();
                                loader.url = url;
                                return [2, loader.texture];
                            }
                        }
                        if (!s_getResAsyncPromise[url]) return [3, 5];
                        return [4, s_getResAsyncPromise[url]];
                    case 4:
                        _a.sent();
                        return [2, cc.loader.getRes(url, type)];
                    case 5:
                        ResReleaseWatchDog.inst.lockRes(url);
                        p = new Promise(function (resolve) {
                            function onLoadComplete(err, asset) {
                                if (!asset || !asset.loaded) {
                                    console.log("getResAsync error: ", err);
                                    resolve(null);
                                } else {
                                    if (asset instanceof cc.SpriteFrame) {
                                        resolve(asset);
                                    } else if (asset instanceof cc.Texture2D) {
                                        asset.packable = false;
                                        var spriteFrame = new cc.SpriteFrame(asset);
                                        resolve(spriteFrame);
                                    } else {
                                        resolve(asset);
                                    }
                                }
                            }
                            if (!type) {
                                type = cc.Asset;
                            }
                            if (progressCallback) {
                                cc.loader.loadRes(url, type, progressCallback, onLoadComplete);
                            } else {
                                cc.loader.loadRes(url, type, onLoadComplete);
                            }
                        });
                        s_getResAsyncPromise[url] = p;
                        return [4, p];
                    case 6:
                        ret = _a.sent();
                        s_getResAsyncPromise[url] = null;
                        return [2, ret];
                }
            });
        });
    }
    RES.getResAsync = getResAsync;
    function getJsonAsync(name, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var asset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4, getResAsync(name, cc.JsonAsset, progressCallback)];
                    case 1:
                        asset = _a.sent();
                        if (!asset || !asset.loaded) {
                            return [2, null];
                        } else {
                            return [2, asset.json];
                        }
                        return [2];
                }
            });
        });
    }
    RES.getJsonAsync = getJsonAsync;
    function getImageCrossSiteAsync(url, type) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4, new Promise(function (resolve) {
                            function onLoadComplete(err, asset) {
                                if (!asset || !asset.loaded) {
                                    console.log("getResAsync error: ", err);
                                    resolve(null);
                                }
                                if (asset instanceof cc.SpriteFrame) {
                                    resolve(asset);
                                } else if (asset instanceof cc.Texture2D) {
                                    asset.packable = false;
                                    var ret = new cc.SpriteFrame(asset);
                                    resolve(ret);
                                } else {
                                    resolve(null);
                                }
                            }
                            console.log("[getResAsync] loading external image: ", url);
                            cc.loader.load({ url: url + "?file=a.png", type: "png" }, onLoadComplete);
                        })];
                    case 1:
                        return [2, _a.sent()];
                }
            });
        });
    }
    RES.getImageCrossSiteAsync = getImageCrossSiteAsync;
    function getRes(url, type) {
        return cc.loader.getRes(url, type);
    }
    RES.getRes = getRes;
    function destroyRes(asset) {
        cc.loader.releaseAsset(asset);
    }
    RES.destroyRes = destroyRes;
    function loadGroup(name, pri, reporter, temp) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    }
    RES.loadGroup = loadGroup;
    function loadPackage(name, loadingMask, loadRes, showMask) {
        if (loadingMask === void 0) {
            loadingMask = false;
        }
        if (loadRes === void 0) {
            loadRes = false;
        }
        if (showMask === void 0) {
            showMask = true;
        }
        return __awaiter(this, void 0, void 0, function () {
            var ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4, new Promise(function (resolve) {
                            function onLoaded(err) {
                                if (!err) {
                                    var pkg = fgui.UIPackage.addPackage(name);
                                    resolve(pkg);
                                } else {
                                    console.log(err);
                                    resolve(null);
                                }
                            }
                            try {
                                fgui.UIPackage.loadPackage(name, loadRes, onLoaded);
                            } catch (e) {
                                console.log(e);
                                resolve(null);
                            }
                        })];
                    case 1:
                        ret = _a.sent();
                        return [2, ret];
                }
            });
        });
    }
    RES.loadPackage = loadPackage;
    function unloadPackage(name) {
        fgui.UIPackage.removePackage(name);
    }
    RES.unloadPackage = unloadPackage;
})(RES || (RES = {}));
var egret;
(function (egret) {
    var Ease = function () {
        function Ease() {
            egret.$error(1014);
        }
        Ease.get = function (amount) {
            if (amount < -1) {
                amount = -1;
            }
            if (amount > 1) {
                amount = 1;
            }
            return function (t) {
                if (amount == 0) {
                    return t;
                }
                if (amount < 0) {
                    return t * (t * -amount + 1 + amount);
                }
                return t * ((2 - t) * amount + (1 - amount));
            };
        };
        Ease.getPowIn = function (pow) {
            return function (t) {
                return Math.pow(t, pow);
            };
        };
        Ease.getPowOut = function (pow) {
            return function (t) {
                return 1 - Math.pow(1 - t, pow);
            };
        };
        Ease.getPowInOut = function (pow) {
            return function (t) {
                if ((t *= 2) < 1) return 0.5 * Math.pow(t, pow);
                return 1 - 0.5 * Math.abs(Math.pow(2 - t, pow));
            };
        };
        Ease.sineIn = function (t) {
            return 1 - Math.cos(t * Math.PI / 2);
        };
        Ease.sineOut = function (t) {
            return Math.sin(t * Math.PI / 2);
        };
        Ease.sineInOut = function (t) {
            return -0.5 * (Math.cos(Math.PI * t) - 1);
        };
        Ease.getBackIn = function (amount) {
            return function (t) {
                return t * t * ((amount + 1) * t - amount);
            };
        };
        Ease.getBackOut = function (amount) {
            return function (t) {
                return --t * t * ((amount + 1) * t + amount) + 1;
            };
        };
        Ease.getBackInOut = function (amount) {
            amount *= 1.525;
            return function (t) {
                if ((t *= 2) < 1) return 0.5 * (t * t * ((amount + 1) * t - amount));
                return 0.5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);
            };
        };
        Ease.circIn = function (t) {
            return -(Math.sqrt(1 - t * t) - 1);
        };
        Ease.circOut = function (t) {
            return Math.sqrt(1 - --t * t);
        };
        Ease.circInOut = function (t) {
            if ((t *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - t * t) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        };
        Ease.bounceIn = function (t) {
            return 1 - Ease.bounceOut(1 - t);
        };
        Ease.bounceOut = function (t) {
            if (t < 1 / 2.75) {
                return 7.5625 * t * t;
            } else if (t < 2 / 2.75) {
                return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
            } else if (t < 2.5 / 2.75) {
                return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
            } else {
                return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
            }
        };
        Ease.bounceInOut = function (t) {
            if (t < 0.5) return Ease.bounceIn(t * 2) * .5;
            return Ease.bounceOut(t * 2 - 1) * 0.5 + 0.5;
        };
        Ease.getElasticIn = function (amplitude, period) {
            var pi2 = Math.PI * 2;
            return function (t) {
                if (t == 0 || t == 1) return t;
                var s = period / pi2 * Math.asin(1 / amplitude);
                return -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
            };
        };
        Ease.getElasticOut = function (amplitude, period) {
            var pi2 = Math.PI * 2;
            return function (t) {
                if (t == 0 || t == 1) return t;
                var s = period / pi2 * Math.asin(1 / amplitude);
                return amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1;
            };
        };
        Ease.getElasticInOut = function (amplitude, period) {
            var pi2 = Math.PI * 2;
            return function (t) {
                var s = period / pi2 * Math.asin(1 / amplitude);
                if ((t *= 2) < 1) return -0.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
                return amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * 0.5 + 1;
            };
        };
        Ease.quadIn = Ease.getPowIn(2);
        Ease.quadOut = Ease.getPowOut(2);
        Ease.quadInOut = Ease.getPowInOut(2);
        Ease.cubicIn = Ease.getPowIn(3);
        Ease.cubicOut = Ease.getPowOut(3);
        Ease.cubicInOut = Ease.getPowInOut(3);
        Ease.quartIn = Ease.getPowIn(4);
        Ease.quartOut = Ease.getPowOut(4);
        Ease.quartInOut = Ease.getPowInOut(4);
        Ease.quintIn = Ease.getPowIn(5);
        Ease.quintOut = Ease.getPowOut(5);
        Ease.quintInOut = Ease.getPowInOut(5);
        Ease.backIn = Ease.getBackIn(1.7);
        Ease.backOut = Ease.getBackOut(1.7);
        Ease.backInOut = Ease.getBackInOut(1.7);
        Ease.elasticIn = Ease.getElasticIn(1, 0.3);
        Ease.elasticOut = Ease.getElasticOut(1, 0.3);
        Ease.elasticInOut = Ease.getElasticInOut(1, 0.3 * 1.5);
        return Ease;
    }();
    egret.Ease = Ease;
})(egret || (egret = {}));
var egret;
(function (egret) {
    var Tween = function (_super) {
        __extends(Tween, _super);
        function Tween(target, props, pluginData) {
            var _this = _super.call(this) || this;
            _this._target = null;
            _this._useTicks = false;
            _this.ignoreGlobalPause = false;
            _this.loop = false;
            _this.pluginData = null;
            _this._steps = null;
            _this.paused = false;
            _this.duration = 0;
            _this._prevPos = -1;
            _this.position = null;
            _this._prevPosition = 0;
            _this._stepPosition = 0;
            _this.passive = false;
            _this.initialize(target, props, pluginData);
            return _this;
        }
        Tween.get = function (target, props, pluginData, override) {
            if (pluginData === void 0) {
                pluginData = null;
            }
            if (override === void 0) {
                override = false;
            }
            if (override) {
                Tween.removeTweens(target);
            }
            return new Tween(target, props, pluginData);
        };
        Tween.removeTweens = function (target) {
            if (!target.tween_count) {
                return;
            }
            var tweens = Tween._tweens;
            for (var i = tweens.length - 1; i >= 0; i--) {
                if (tweens[i]._target == target) {
                    tweens[i].paused = true;
                    tweens.splice(i, 1);
                }
            }
            target.tween_count = 0;
        };
        Tween.pauseTweens = function (target) {
            if (!target.tween_count) {
                return;
            }
            var tweens = egret.Tween._tweens;
            for (var i = tweens.length - 1; i >= 0; i--) {
                if (tweens[i]._target == target) {
                    tweens[i].paused = true;
                }
            }
        };
        Tween.resumeTweens = function (target) {
            if (!target.tween_count) {
                return;
            }
            var tweens = egret.Tween._tweens;
            for (var i = tweens.length - 1; i >= 0; i--) {
                if (tweens[i]._target == target) {
                    tweens[i].paused = false;
                }
            }
        };
        Tween.tick = function (dt, paused) {
            if (paused === void 0) {
                paused = false;
            }
            var delta = dt * 1000;
            Tween._lastTime += dt;
            var tweens = Tween._tweens.concat();
            for (var i = tweens.length - 1; i >= 0; i--) {
                var tween_1 = tweens[i];
                if (paused && !tween_1.ignoreGlobalPause || tween_1.paused) {
                    continue;
                }
                tween_1.$tick(tween_1._useTicks ? 1 : delta);
            }
            return false;
        };
        Tween._register = function (tween, value) {
            var target = tween._target;
            var tweens = Tween._tweens;
            if (value) {
                if (target) {
                    target.tween_count = target.tween_count > 0 ? target.tween_count + 1 : 1;
                }
                tweens.push(tween);
                if (!Tween._inited) {
                    Tween._lastTime = new Date().getTime();
                    if (!Tween._root) {
                        Tween._root = new cc.Node("[Tween]");
                        cc.game["addPersistRootNode"](Tween._root);
                    }
                    cc.director.getScheduler().schedule(this.tick, Tween._root, 0, false);
                    Tween._inited = true;
                }
            } else {
                if (target) {
                    target.tween_count--;
                }
                var i = tweens.length;
                while (i--) {
                    if (tweens[i] == tween) {
                        tweens.splice(i, 1);
                        return;
                    }
                }
            }
        };
        Tween.removeAllTweens = function () {
            var tweens = Tween._tweens;
            for (var i = 0, l = tweens.length; i < l; i++) {
                var tween_2 = tweens[i];
                tween_2.paused = true;
                tween_2._target.tween_count = 0;
            }
            tweens.length = 0;
        };
        Tween.prototype.initialize = function (target, props, pluginData) {
            this._target = target;
            if (props) {
                this._useTicks = props.useTicks;
                this.ignoreGlobalPause = props.ignoreGlobalPause;
                this.loop = props.loop;
                props.onChange && this.addEventListener("change", props.onChange, props.onChangeObj);
                if (props.override) {
                    Tween.removeTweens(target);
                }
            }
            this.pluginData = pluginData || {};
            this._curQueueProps = {};
            this._initQueueProps = {};
            this._steps = [];
            if (props && props.paused) {
                this.paused = true;
            } else {
                Tween._register(this, true);
            }
            if (props && props.position != null) {
                this.setPosition(props.position, Tween.NONE);
            }
        };
        Tween.prototype.setPosition = function (value, actionsMode) {
            if (actionsMode === void 0) {
                actionsMode = 1;
            }
            if (value < 0) {
                value = 0;
            }
            var t = value;
            var end = false;
            if (t >= this.duration) {
                if (this.loop) {
                    var newTime = t % this.duration;
                    if (t > 0 && newTime === 0) {
                        t = this.duration;
                    } else {
                        t = newTime;
                    }
                } else {
                    t = this.duration;
                    end = true;
                }
            }
            if (t == this._prevPos) {
                return end;
            }
            if (end) {
                this.setPaused(true);
            }
            var prevPos = this._prevPos;
            this.position = this._prevPos = t;
            this._prevPosition = value;
            if (this._target) {
                if (this._steps.length > 0) {
                    var l = this._steps.length;
                    var stepIndex = -1;
                    for (var i = 0; i < l; i++) {
                        if (this._steps[i].type == "step") {
                            stepIndex = i;
                            if (this._steps[i].t <= t && this._steps[i].t + this._steps[i].d >= t) {
                                break;
                            }
                        }
                    }
                    for (var i = 0; i < l; i++) {
                        if (this._steps[i].type == "action") {
                            if (actionsMode != 0) {
                                if (this._useTicks) {
                                    this._runAction(this._steps[i], t, t);
                                } else if (actionsMode == 1 && t < prevPos) {
                                    if (prevPos != this.duration) {
                                        this._runAction(this._steps[i], prevPos, this.duration);
                                    }
                                    this._runAction(this._steps[i], 0, t, true);
                                } else {
                                    this._runAction(this._steps[i], prevPos, t);
                                }
                            }
                        } else if (this._steps[i].type == "step") {
                            if (stepIndex == i) {
                                var step = this._steps[stepIndex];
                                this._updateTargetProps(step, Math.min((this._stepPosition = t - step.t) / step.d, 1));
                            }
                        }
                    }
                }
            }
            this.dispatchEventWith("change");
            return end;
        };
        Tween.prototype._runAction = function (action, startPos, endPos, includeStart) {
            if (includeStart === void 0) {
                includeStart = false;
            }
            var sPos = startPos;
            var ePos = endPos;
            if (startPos > endPos) {
                sPos = endPos;
                ePos = startPos;
            }
            var pos = action.t;
            if (pos == ePos || pos > sPos && pos < ePos || includeStart && pos == startPos) {
                action.f.apply(action.o, action.p);
            }
        };
        Tween.prototype._updateTargetProps = function (step, ratio) {
            var p0, p1, v, v0, v1, arr;
            if (!step && ratio == 1) {
                this.passive = false;
                p0 = p1 = this._curQueueProps;
            } else {
                this.passive = !!step.v;
                if (this.passive) {
                    return;
                }
                if (step.e) {
                    ratio = step.e(ratio, 0, 1, 1);
                }
                p0 = step.p0;
                p1 = step.p1;
            }
            for (var n in this._initQueueProps) {
                if ((v0 = p0[n]) == null) {
                    p0[n] = v0 = this._initQueueProps[n];
                }
                if ((v1 = p1[n]) == null) {
                    p1[n] = v1 = v0;
                }
                if (v0 == v1 || ratio == 0 || ratio == 1 || typeof v0 != "number") {
                    v = ratio == 1 ? v1 : v0;
                } else {
                    v = v0 + (v1 - v0) * ratio;
                }
                var ignore = false;
                if (arr = Tween._plugins[n]) {
                    for (var i = 0, l = arr.length; i < l; i++) {
                        var v2 = arr[i].tween(this, n, v, p0, p1, ratio, !!step && p0 == p1, !step);
                        if (v2 == Tween.IGNORE) {
                            ignore = true;
                        } else {
                            v = v2;
                        }
                    }
                }
                if (!ignore) {
                    this._target[n] = v;
                }
            }
        };
        Tween.prototype.setPaused = function (value) {
            if (this.paused == value) {
                return this;
            }
            this.paused = value;
            Tween._register(this, !value);
            return this;
        };
        Tween.prototype._cloneProps = function (props) {
            var o = {};
            for (var n in props) {
                o[n] = props[n];
            }
            return o;
        };
        Tween.prototype._addStep = function (o) {
            if (o.d > 0) {
                o.type = "step";
                this._steps.push(o);
                o.t = this.duration;
                this.duration += o.d;
            }
            return this;
        };
        Tween.prototype._appendQueueProps = function (o) {
            var arr, oldValue, i, l, injectProps;
            for (var n in o) {
                if (this._initQueueProps[n] === undefined) {
                    oldValue = this._target[n];
                    if (arr = Tween._plugins[n]) {
                        for (i = 0, l = arr.length; i < l; i++) {
                            oldValue = arr[i].init(this, n, oldValue);
                        }
                    }
                    this._initQueueProps[n] = this._curQueueProps[n] = oldValue === undefined ? null : oldValue;
                } else {
                    oldValue = this._curQueueProps[n];
                }
            }
            for (var n in o) {
                oldValue = this._curQueueProps[n];
                if (arr = Tween._plugins[n]) {
                    injectProps = injectProps || {};
                    for (i = 0, l = arr.length; i < l; i++) {
                        if (arr[i].step) {
                            arr[i].step(this, n, oldValue, o[n], injectProps);
                        }
                    }
                }
                this._curQueueProps[n] = o[n];
            }
            if (injectProps) {
                this._appendQueueProps(injectProps);
            }
            return this._curQueueProps;
        };
        Tween.prototype._addAction = function (o) {
            o.t = this.duration;
            o.type = "action";
            this._steps.push(o);
            return this;
        };
        Tween.prototype._set = function (props, o) {
            for (var n in props) {
                o[n] = props[n];
            }
        };
        Tween.prototype.wait = function (duration, passive) {
            if (duration == null || duration <= 0) {
                return this;
            }
            var o = this._cloneProps(this._curQueueProps);
            return this._addStep({ d: duration, p0: o, p1: o, v: passive });
        };
        Tween.prototype.to = function (props, duration, ease) {
            if (ease === void 0) {
                ease = undefined;
            }
            if (isNaN(duration) || duration < 0) {
                duration = 0;
            }
            this._addStep({ d: duration || 0, p0: this._cloneProps(this._curQueueProps), e: ease, p1: this._cloneProps(this._appendQueueProps(props)) });
            return this.set(props);
        };
        Tween.prototype.call = function (callback, thisObj, params) {
            if (thisObj === void 0) {
                thisObj = undefined;
            }
            if (params === void 0) {
                params = undefined;
            }
            return this._addAction({ f: callback, p: params ? params : [], o: thisObj ? thisObj : this._target });
        };
        Tween.prototype.set = function (props, target) {
            if (target === void 0) {
                target = null;
            }
            this._appendQueueProps(props);
            return this._addAction({ f: this._set, o: this, p: [props, target ? target : this._target] });
        };
        Tween.prototype.play = function (tween) {
            if (!tween) {
                tween = this;
            }
            return this.call(tween.setPaused, tween, [false]);
        };
        Tween.prototype.pause = function (tween) {
            if (!tween) {
                tween = this;
            }
            return this.call(tween.setPaused, tween, [true]);
        };
        Tween.prototype.$tick = function (delta) {
            if (this.paused) {
                return;
            }
            this.setPosition(this._prevPosition + delta);
        };
        Tween.NONE = 0;
        Tween.LOOP = 1;
        Tween.REVERSE = 2;
        Tween._tweens = [];
        Tween.IGNORE = {};
        Tween._plugins = {};
        Tween._inited = false;
        Tween._root = null;
        Tween._lastTime = 0;
        return Tween;
    }(egret.EventDispatcher);
    egret.Tween = Tween;
})(egret || (egret = {}));
var egret;
(function (egret) {
    var tween;
    (function (tween) {
        var BasePath = function (_super) {
            __extends(BasePath, _super);
            function BasePath() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.name = "";
                return _this;
            }
            return BasePath;
        }(egret.EventDispatcher);
        tween.BasePath = BasePath;
        var To = function (_super) {
            __extends(To, _super);
            function To() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.props = undefined;
                _this.duration = 500;
                _this.ease = undefined;
                return _this;
            }
            return To;
        }(BasePath);
        tween.To = To;
        var Wait = function (_super) {
            __extends(Wait, _super);
            function Wait() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.duration = 500;
                _this.passive = undefined;
                return _this;
            }
            return Wait;
        }(BasePath);
        tween.Wait = Wait;
        var Set = function (_super) {
            __extends(Set, _super);
            function Set() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.props = undefined;
                return _this;
            }
            return Set;
        }(BasePath);
        tween.Set = Set;
        var Tick = function (_super) {
            __extends(Tick, _super);
            function Tick() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.delta = 0;
                return _this;
            }
            return Tick;
        }(BasePath);
        tween.Tick = Tick;
        function convertEase(ease) {
            if (typeof ease === 'function') {
                return ease;
            } else {
                var func = egret.Ease[ease];
                if (typeof func === 'function') {
                    return func;
                }
            }
            return null;
        }
        var TweenItem = function (_super) {
            __extends(TweenItem, _super);
            function TweenItem() {
                var _this = _super.call(this) || this;
                _this.isStop = false;
                return _this;
            }
            Object.defineProperty(TweenItem.prototype, "props", {
                get: function get() {
                    return this._props;
                },
                set: function set(value) {
                    this._props = value;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(TweenItem.prototype, "target", {
                get: function get() {
                    return this._target;
                },
                set: function set(value) {
                    this._target = value;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(TweenItem.prototype, "paths", {
                get: function get() {
                    return this._paths;
                },
                set: function set(value) {
                    this._paths = value || [];
                },
                enumerable: false,
                configurable: true
            });
            TweenItem.prototype.play = function (position) {
                if (!this.tween) {
                    this.createTween(position);
                } else {
                    this.tween.setPaused(false);
                    if (this.isStop && position == undefined) {
                        position = 0;
                        this.isStop = false;
                    }
                    if (position !== undefined && position !== null) {
                        this.tween.setPosition(position);
                    }
                }
            };
            TweenItem.prototype.pause = function () {
                if (this.tween) {
                    this.tween.setPaused(true);
                }
            };
            TweenItem.prototype.stop = function () {
                this.pause();
                this.isStop = true;
            };
            TweenItem.prototype.createTween = function (position) {
                this.tween = egret.Tween.get(this._target, this._props);
                if (this._paths) {
                    this.applyPaths();
                }
                if (position !== undefined && position !== null) {
                    this.tween.setPosition(position);
                }
            };
            TweenItem.prototype.applyPaths = function () {
                for (var i = 0; i < this._paths.length; i++) {
                    var path = this._paths[i];
                    this.applyPath(path);
                }
            };
            TweenItem.prototype.applyPath = function (path) {
                var _this = this;
                if (path instanceof To) {
                    this.tween.to(path.props, path.duration, convertEase(path.ease));
                } else if (path instanceof Wait) {
                    this.tween.wait(path.duration, path.passive);
                } else if (path instanceof Set) {
                    this.tween.set(path.props);
                } else if (path instanceof Tick) {
                    this.tween.$tick(path.delta);
                }
                this.tween.call(function () {
                    return _this.pathComplete(path);
                });
            };
            TweenItem.prototype.pathComplete = function (path) {
                path.dispatchEventWith('complete');
                this.dispatchEventWith('pathComplete', false, path);
                var index = this._paths.indexOf(path);
                if (index >= 0 && index === this._paths.length - 1) {
                    this.dispatchEventWith('complete');
                }
            };
            return TweenItem;
        }(egret.EventDispatcher);
        tween.TweenItem = TweenItem;
        registerProperty(TweenItem, 'paths', 'Array', true);
        var TweenGroup = function (_super) {
            __extends(TweenGroup, _super);
            function TweenGroup() {
                var _this = _super.call(this) || this;
                _this.completeCount = 0;
                return _this;
            }
            Object.defineProperty(TweenGroup.prototype, "items", {
                get: function get() {
                    return this._items;
                },
                set: function set(value) {
                    this.completeCount = 0;
                    this.registerEvent(false);
                    this._items = value;
                    this.registerEvent(true);
                },
                enumerable: false,
                configurable: true
            });
            TweenGroup.prototype.registerEvent = function (add) {
                var _this = this;
                this._items && this._items.forEach(function (item) {
                    if (add) {
                        item.addEventListener('complete', _this.itemComplete, _this);
                    } else {
                        item.removeEventListener('complete', _this.itemComplete, _this);
                    }
                });
            };
            TweenGroup.prototype.play = function (time) {
                if (!this._items) {
                    return;
                }
                for (var i = 0; i < this._items.length; i++) {
                    var item = this._items[i];
                    item.play(time);
                }
            };
            TweenGroup.prototype.pause = function () {
                if (!this._items) {
                    return;
                }
                for (var i = 0; i < this._items.length; i++) {
                    var item = this._items[i];
                    item.pause();
                }
            };
            TweenGroup.prototype.stop = function () {
                if (!this._items) {
                    return;
                }
                for (var i = 0; i < this._items.length; i++) {
                    var item = this._items[i];
                    item.stop();
                }
            };
            TweenGroup.prototype.itemComplete = function (e) {
                var item = e.currentTarget;
                this.completeCount++;
                this.dispatchEventWith('itemComplete', false, item);
                if (this.completeCount === this.items.length) {
                    this.dispatchEventWith('complete');
                    this.completeCount = 0;
                }
            };
            return TweenGroup;
        }(egret.EventDispatcher);
        tween.TweenGroup = TweenGroup;
        registerProperty(TweenGroup, 'items', 'Array', true);
        function registerProperty(classDefinition, property, type, asDefault) {
            var prototype = classDefinition.prototype;
            prototype.__meta__ = prototype.__meta__ || {};
            prototype.__meta__[property] = type;
            if (asDefault) {
                prototype.__defaultProperty__ = property;
            }
        }
    })(tween = egret.tween || (egret.tween = {}));
})(egret || (egret = {}));
var fgui;
(function (fgui) {
    var AsyncOperation = function () {
        function AsyncOperation() {
            this._runner = null;
        }
        AsyncOperation.updateRunners = function () {
            if (this._asyncRunners.length <= 0) {
                return;
            }
            var rest = [];
            var i = 0;
            var cnt = this._asyncRunners.length;
            for (; i < cnt; ++i) {
                var runner = this._asyncRunners[i];
                if (!runner.update()) {
                    rest.push(runner);
                }
            }
            this._asyncRunners.length = 0;
            this._asyncRunners = rest;
        };
        AsyncOperation.prototype.createObject = function (pkgName, resName, userClass) {
            if (userClass === void 0) {
                userClass = null;
            }
            if (this._runner) throw 'Already running';
            var pkg = fgui.UIPackage.getByName(pkgName);
            if (pkg) {
                var pi = pkg.getItemByName(resName);
                if (!pi) throw new Error("resource not found: " + resName);
                this.internalCreateObject(pi, userClass, resName);
            } else throw new Error("package not found: " + pkgName);
        };
        AsyncOperation.prototype.createObjectFromURL = function (url) {
            if (this._runner) throw 'Already running';
            var pi = fgui.UIPackage.getItemByURL(url);
            if (pi) this.internalCreateObject(pi, null, url);else throw new Error("resource not found: " + url);
        };
        AsyncOperation.prototype.cancel = function () {
            if (this._runner) {
                this._runner.onDestroy();
                this._runner = null;
            }
        };
        AsyncOperation.prototype.internalCreateObject = function (item, userClass, name) {
            if (userClass === void 0) {
                userClass = null;
            }
            this._runner = new AsyncOperationRunner();
            this._runner.init(item, this, userClass, name);
            AsyncOperation._asyncRunners.push(this._runner);
        };
        AsyncOperation.prototype.completed = function (result) {
            if (this.callback) {
                this.callback(result);
            }
            this.cancel();
        };
        AsyncOperation._asyncRunners = [];
        return AsyncOperation;
    }();
    fgui.AsyncOperation = AsyncOperation;
    var AsyncOperationRunner = function () {
        function AsyncOperationRunner() {
            this._itemList = new Array();
            this._objectPool = new Array();
            this._host = null;
        }
        AsyncOperationRunner.prototype.init = function (item, host, userClass, name) {
            if (userClass === void 0) {
                userClass = null;
            }
            this._itemList.length = 0;
            this._objectPool.length = 0;
            this._host = host;
            var di = new DisplayListItem(item, 0);
            di.userClass = userClass;
            di.name = name;
            di.childCount = this.collectComponentChildren(item);
            this._itemList.push(di);
            this._index = 0;
        };
        AsyncOperationRunner.prototype.onDestroy = function () {
            this._itemList.length = 0;
            var cnt = this._objectPool.length;
            if (cnt > 0) {
                for (var i = 0; i < cnt; i++) {
                    this._objectPool[i].dispose();
                }this._objectPool.length = 0;
            }
        };
        AsyncOperationRunner.prototype.collectComponentChildren = function (item) {
            var buffer = item.rawData;
            buffer.seek(0, 2);
            var di;
            var pi;
            var i;
            var dataLen;
            var curPos;
            var pkg;
            var dcnt = buffer.readShort();
            for (i = 0; i < dcnt; i++) {
                dataLen = buffer.readShort();
                curPos = buffer.position;
                buffer.seek(curPos, 0);
                var type = buffer.readByte();
                var src = buffer.readS();
                var pkgId = buffer.readS();
                buffer.position = curPos;
                if (src != null) {
                    if (pkgId != null) pkg = fgui.UIPackage.getById(pkgId);else pkg = item.owner;
                    pi = pkg != null ? pkg.getItemById(src) : null;
                    di = new DisplayListItem(pi, type);
                    if (pi != null && pi.type == fgui.PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);
                } else {
                    di = new DisplayListItem(null, type);
                    if (type == fgui.ObjectType.List) di.listItemCount = this.collectListChildren(buffer);
                }
                this._itemList.push(di);
                buffer.position = curPos + dataLen;
            }
            return dcnt;
        };
        AsyncOperationRunner.prototype.collectListChildren = function (buffer) {
            buffer.seek(buffer.position, 8);
            var listItemCount = 0;
            var i;
            var nextPos;
            var url;
            var pi;
            var di;
            var defaultItem = buffer.readS();
            var itemCount = buffer.readShort();
            for (i = 0; i < itemCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                url = buffer.readS();
                if (url == null) url = defaultItem;
                if (url) {
                    pi = fgui.UIPackage.getItemByURL(url);
                    if (pi != null) {
                        di = new DisplayListItem(pi, pi.objectType);
                        if (pi.type == fgui.PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);
                        this._itemList.push(di);
                        listItemCount++;
                    }
                }
                buffer.position = nextPos;
            }
            return listItemCount;
        };
        AsyncOperationRunner.prototype.update = function () {
            var obj;
            var di;
            var poolStart;
            var k;
            var t = fgui.ToolSet.getTime();
            var frameTime = fgui.UIConfig.frameTimeForAsyncUIConstruction;
            var totalItems = this._itemList.length;
            while (this._index < totalItems) {
                di = this._itemList[this._index];
                if (di.packageItem != null) {
                    if (di.userClass) {
                        obj = new di.userClass();
                    } else {
                        obj = fgui.UIObjectFactory.newObject(di.packageItem);
                    }
                    obj.packageItem = di.packageItem;
                    obj.name = di.name;
                    this._objectPool.push(obj);
                    fgui.UIPackage._constructing++;
                    if (di.packageItem.type == fgui.PackageItemType.Component) {
                        poolStart = this._objectPool.length - di.childCount - 1;
                        obj.constructFromResource2(this._objectPool, poolStart);
                        this._objectPool.splice(poolStart, di.childCount);
                    } else {
                        obj.constructFromResource();
                    }
                    fgui.UIPackage._constructing--;
                } else {
                    obj = fgui.UIObjectFactory.newObject2(di.type);
                    this._objectPool.push(obj);
                    if (di.type == fgui.ObjectType.List && di.listItemCount > 0) {
                        poolStart = this._objectPool.length - di.listItemCount - 1;
                        for (k = 0; k < di.listItemCount; k++) {
                            obj.itemPool.returnObject(this._objectPool[k + poolStart]);
                        }this._objectPool.splice(poolStart, di.listItemCount);
                    }
                }
                this._index++;
                if (this._index % 5 == 0 && fgui.ToolSet.getTime() - t >= frameTime) return false;
            }
            var result = this._objectPool[0];
            this._itemList.length = 0;
            this._objectPool.length = 0;
            if (this._host) {
                this._host.completed(result);
            }
            return true;
        };
        return AsyncOperationRunner;
    }();
    var DisplayListItem = function () {
        function DisplayListItem(packageItem, type) {
            this.userClass = null;
            this.packageItem = packageItem;
            this.type = type;
        }
        return DisplayListItem;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Controller = function (_super) {
        __extends(Controller, _super);
        function Controller() {
            var _this = _super.call(this) || this;
            _this._selectedIndex = 0;
            _this._previousIndex = 0;
            _this.changing = false;
            _this._runningActions = 0;
            _this._pageIds = [];
            _this._pageNames = [];
            _this._selectedIndex = -1;
            _this._previousIndex = -1;
            return _this;
        }
        Controller.prototype.addAction = function (act) {
            if (!this._actions) {
                this._actions = [];
            }
            this._actions.push(act);
        };
        Controller.prototype.dispose = function () {};
        Object.defineProperty(Controller.prototype, "selectedIndex", {
            get: function get() {
                return this._selectedIndex;
            },
            set: function set(value) {
                if (this._selectedIndex != value) {
                    if (value > this._pageIds.length - 1) throw "index out of bounds: " + value;
                    this.changing = true;
                    this._previousIndex = this._selectedIndex;
                    this._selectedIndex = value;
                    this.parent.applyController(this);
                    this.emit(fgui.Event.STATUS_CHANGED, this);
                    this.changing = false;
                }
            },
            enumerable: false,
            configurable: true
        });
        Controller.prototype.onChanged = function (callback, target) {
            this.on(fgui.Event.STATUS_CHANGED, callback, target);
        };
        Controller.prototype.offChanged = function (callback, target) {
            this.off(fgui.Event.STATUS_CHANGED, callback, target);
        };
        Controller.prototype.setSelectedIndex = function (value) {
            if (this._selectedIndex != value) {
                if (value > this._pageIds.length - 1) throw "index out of bounds: " + value;
                this.changing = true;
                this._previousIndex = this._selectedIndex;
                this._selectedIndex = value;
                this.parent.applyController(this);
                this.changing = false;
            }
        };
        Controller.prototype.setAndWaitSelectedIndex = function (value, callback) {
            if (value > this._pageIds.length - 1) throw "index out of bounds: " + value;
            this.changing = true;
            this._previousIndex = this._selectedIndex;
            this._selectedIndex = value;
            this.parent.applyController(this, callback);
            this.emit(fgui.Event.STATUS_CHANGED, this);
            this.changing = false;
        };
        Object.defineProperty(Controller.prototype, "previsousIndex", {
            get: function get() {
                return this._previousIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Controller.prototype, "selectedPage", {
            get: function get() {
                if (this._selectedIndex == -1) return null;else return this._pageNames[this._selectedIndex];
            },
            set: function set(val) {
                var i = this._pageNames.indexOf(val);
                if (i == -1) i = 0;
                this.selectedIndex = i;
            },
            enumerable: false,
            configurable: true
        });
        Controller.prototype.setSelectedPage = function (value) {
            var i = this._pageNames.indexOf(value);
            if (i == -1) i = 0;
            this.setSelectedIndex(i);
        };
        Object.defineProperty(Controller.prototype, "previousPage", {
            get: function get() {
                if (this._previousIndex == -1) return null;else return this._pageNames[this._previousIndex];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Controller.prototype, "pageCount", {
            get: function get() {
                return this._pageIds.length;
            },
            enumerable: false,
            configurable: true
        });
        Controller.prototype.getPageName = function (index) {
            return this._pageNames[index];
        };
        Controller.prototype.addPage = function (name) {
            if (name === void 0) {
                name = "";
            }
            this.addPageAt(name, this._pageIds.length);
        };
        Controller.prototype.addPageAt = function (name, index) {
            var nid = "" + Controller._nextPageId++;
            if (index == this._pageIds.length) {
                this._pageIds.push(nid);
                this._pageNames.push(name);
            } else {
                this._pageIds.splice(index, 0, nid);
                this._pageNames.splice(index, 0, name);
            }
        };
        Controller.prototype.removePage = function (name) {
            var i = this._pageNames.indexOf(name);
            if (i != -1) {
                this._pageIds.splice(i, 1);
                this._pageNames.splice(i, 1);
                if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
            }
        };
        Controller.prototype.removePageAt = function (index) {
            this._pageIds.splice(index, 1);
            this._pageNames.splice(index, 1);
            if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
        };
        Controller.prototype.clearPages = function () {
            this._pageIds.length = 0;
            this._pageNames.length = 0;
            if (this._selectedIndex != -1) this.selectedIndex = -1;else this.parent.applyController(this);
        };
        Controller.prototype.hasPage = function (aName) {
            return this._pageNames.indexOf(aName) != -1;
        };
        Controller.prototype.getPageIndexById = function (aId) {
            return this._pageIds.indexOf(aId);
        };
        Controller.prototype.getPageIdByName = function (aName) {
            var i = this._pageNames.indexOf(aName);
            if (i != -1) return this._pageIds[i];else return null;
        };
        Controller.prototype.getPageNameById = function (aId) {
            var i = this._pageIds.indexOf(aId);
            if (i != -1) return this._pageNames[i];else return null;
        };
        Controller.prototype.getPageId = function (index) {
            return this._pageIds[index];
        };
        Object.defineProperty(Controller.prototype, "selectedPageId", {
            get: function get() {
                if (this._selectedIndex == -1) return null;else return this._pageIds[this._selectedIndex];
            },
            set: function set(val) {
                var i = this._pageIds.indexOf(val);
                this.selectedIndex = i;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Controller.prototype, "oppositePageId", {
            set: function set(val) {
                var i = this._pageIds.indexOf(val);
                if (i > 0) this.selectedIndex = 0;else if (this._pageIds.length > 1) this.selectedIndex = 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Controller.prototype, "previousPageId", {
            get: function get() {
                if (this._previousIndex == -1) return null;else return this._pageIds[this._previousIndex];
            },
            enumerable: false,
            configurable: true
        });
        Controller.prototype.runActions = function (callback) {
            if (this._actions) {
                var cnt = this._actions.length;
                this._runningActions = cnt;
                this._runningCallback = callback;
                for (var i = 0; i < cnt; i++) {
                    this._actions[i].run(this, this.previousPageId, this.selectedPageId);
                }
            }
        };
        Controller.prototype.onActionRunDone = function () {
            --this._runningActions;
            if (this._runningActions <= 0) {
                if (this._runningCallback) {
                    this._runningCallback();
                    this._runningCallback = null;
                }
                this._runningActions = 0;
            }
        };
        Controller.prototype.setup = function (buffer) {
            var beginPos = buffer.position;
            buffer.seek(beginPos, 0);
            this.name = buffer.readS();
            this.autoRadioGroupDepth = buffer.readBool();
            buffer.seek(beginPos, 1);
            var i;
            var nextPos;
            var cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                this._pageIds.push(buffer.readS());
                this._pageNames.push(buffer.readS());
            }
            var homePageIndex = 0;
            if (buffer.version >= 2) {
                var homePageType = buffer.readByte();
                switch (homePageType) {
                    case 1:
                        homePageIndex = buffer.readShort();
                        break;
                    case 2:
                        homePageIndex = this._pageNames.indexOf(fgui.UIPackage.branch);
                        if (homePageIndex == -1) homePageIndex = 0;
                        break;
                    case 3:
                        homePageIndex = this._pageNames.indexOf(fgui.UIPackage.getVar(buffer.readS()));
                        if (homePageIndex == -1) homePageIndex = 0;
                        break;
                }
            }
            buffer.seek(beginPos, 2);
            cnt = buffer.readShort();
            if (cnt > 0) {
                if (this._actions == null) this._actions = new Array();
                for (i = 0; i < cnt; i++) {
                    nextPos = buffer.readShort();
                    nextPos += buffer.position;
                    var action = fgui.ControllerAction.createAction(buffer.readByte());
                    action.setup(buffer);
                    this._actions.push(action);
                    buffer.position = nextPos;
                }
            }
            if (this.parent != null && this._pageIds.length > 0) this._selectedIndex = homePageIndex;else this._selectedIndex = -1;
        };
        Controller._nextPageId = 0;
        return Controller;
    }(cc.EventTarget);
    fgui.Controller = Controller;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var DragDropManager = function () {
        function DragDropManager() {
            this._agent = new fgui.GLoader();
            this._agent.draggable = true;
            this._agent.touchable = false;
            this._agent.setSize(100, 100);
            this._agent.setPivot(0.5, 0.5, true);
            this._agent.align = fgui.AlignType.Center;
            this._agent.verticalAlign = fgui.VertAlignType.Middle;
            this._agent.sortingOrder = 1000000;
            this._agent.on(fgui.Event.DRAG_END, this.onDragEnd, this);
        }
        Object.defineProperty(DragDropManager, "inst", {
            get: function get() {
                if (DragDropManager._inst == null) DragDropManager._inst = new DragDropManager();
                return DragDropManager._inst;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DragDropManager.prototype, "dragAgent", {
            get: function get() {
                return this._agent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DragDropManager.prototype, "dragging", {
            get: function get() {
                return this._agent.parent != null;
            },
            enumerable: false,
            configurable: true
        });
        DragDropManager.prototype.startDrag = function (source, icon, sourceData, touchId) {
            if (this._agent.parent != null) return;
            this._sourceData = sourceData;
            this._agent.url = icon;
            fgui.GRoot.inst.addChild(this._agent);
            var pt = fgui.GRoot.inst.getTouchPosition(touchId);
            pt = fgui.GRoot.inst.globalToLocal(pt.x, pt.y);
            this._agent.setPosition(pt.x, pt.y);
            this._agent.startDrag(touchId);
        };
        DragDropManager.prototype.cancel = function () {
            if (this._agent.parent != null) {
                this._agent.stopDrag();
                fgui.GRoot.inst.removeChild(this._agent);
                this._sourceData = null;
            }
        };
        DragDropManager.prototype.onDragEnd = function () {
            if (this._agent.parent == null) return;
            fgui.GRoot.inst.removeChild(this._agent);
            var sourceData = this._sourceData;
            this._sourceData = null;
            var obj = fgui.GRoot.inst.touchTarget;
            while (obj != null) {
                if (obj.node.hasEventListener(fgui.Event.DROP)) {
                    obj.requestFocus();
                    obj.node.emit(fgui.Event.DROP, obj, sourceData);
                    return;
                }
                obj = obj.parent;
            }
        };
        return DragDropManager;
    }();
    fgui.DragDropManager = DragDropManager;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ButtonMode;
    (function (ButtonMode) {
        ButtonMode[ButtonMode["Common"] = 0] = "Common";
        ButtonMode[ButtonMode["Check"] = 1] = "Check";
        ButtonMode[ButtonMode["Radio"] = 2] = "Radio";
    })(ButtonMode = fgui.ButtonMode || (fgui.ButtonMode = {}));
    var AutoSizeType;
    (function (AutoSizeType) {
        AutoSizeType[AutoSizeType["None"] = 0] = "None";
        AutoSizeType[AutoSizeType["Both"] = 1] = "Both";
        AutoSizeType[AutoSizeType["Height"] = 2] = "Height";
        AutoSizeType[AutoSizeType["Shrink"] = 3] = "Shrink";
    })(AutoSizeType = fgui.AutoSizeType || (fgui.AutoSizeType = {}));
    var AlignType;
    (function (AlignType) {
        AlignType[AlignType["Left"] = 0] = "Left";
        AlignType[AlignType["Center"] = 1] = "Center";
        AlignType[AlignType["Right"] = 2] = "Right";
    })(AlignType = fgui.AlignType || (fgui.AlignType = {}));
    var VertAlignType;
    (function (VertAlignType) {
        VertAlignType[VertAlignType["Top"] = 0] = "Top";
        VertAlignType[VertAlignType["Middle"] = 1] = "Middle";
        VertAlignType[VertAlignType["Bottom"] = 2] = "Bottom";
    })(VertAlignType = fgui.VertAlignType || (fgui.VertAlignType = {}));
    var LoaderFillType;
    (function (LoaderFillType) {
        LoaderFillType[LoaderFillType["None"] = 0] = "None";
        LoaderFillType[LoaderFillType["Scale"] = 1] = "Scale";
        LoaderFillType[LoaderFillType["ScaleMatchHeight"] = 2] = "ScaleMatchHeight";
        LoaderFillType[LoaderFillType["ScaleMatchWidth"] = 3] = "ScaleMatchWidth";
        LoaderFillType[LoaderFillType["ScaleFree"] = 4] = "ScaleFree";
        LoaderFillType[LoaderFillType["ScaleNoBorder"] = 5] = "ScaleNoBorder";
    })(LoaderFillType = fgui.LoaderFillType || (fgui.LoaderFillType = {}));
    var ListLayoutType;
    (function (ListLayoutType) {
        ListLayoutType[ListLayoutType["SingleColumn"] = 0] = "SingleColumn";
        ListLayoutType[ListLayoutType["SingleRow"] = 1] = "SingleRow";
        ListLayoutType[ListLayoutType["FlowHorizontal"] = 2] = "FlowHorizontal";
        ListLayoutType[ListLayoutType["FlowVertical"] = 3] = "FlowVertical";
        ListLayoutType[ListLayoutType["Pagination"] = 4] = "Pagination";
    })(ListLayoutType = fgui.ListLayoutType || (fgui.ListLayoutType = {}));
    var ListSelectionMode;
    (function (ListSelectionMode) {
        ListSelectionMode[ListSelectionMode["Single"] = 0] = "Single";
        ListSelectionMode[ListSelectionMode["Multiple"] = 1] = "Multiple";
        ListSelectionMode[ListSelectionMode["Multiple_SingleClick"] = 2] = "Multiple_SingleClick";
        ListSelectionMode[ListSelectionMode["None"] = 3] = "None";
    })(ListSelectionMode = fgui.ListSelectionMode || (fgui.ListSelectionMode = {}));
    var OverflowType;
    (function (OverflowType) {
        OverflowType[OverflowType["Visible"] = 0] = "Visible";
        OverflowType[OverflowType["Hidden"] = 1] = "Hidden";
        OverflowType[OverflowType["Scroll"] = 2] = "Scroll";
    })(OverflowType = fgui.OverflowType || (fgui.OverflowType = {}));
    var PackageItemType;
    (function (PackageItemType) {
        PackageItemType[PackageItemType["Image"] = 0] = "Image";
        PackageItemType[PackageItemType["MovieClip"] = 1] = "MovieClip";
        PackageItemType[PackageItemType["Sound"] = 2] = "Sound";
        PackageItemType[PackageItemType["Component"] = 3] = "Component";
        PackageItemType[PackageItemType["Atlas"] = 4] = "Atlas";
        PackageItemType[PackageItemType["Font"] = 5] = "Font";
        PackageItemType[PackageItemType["Swf"] = 6] = "Swf";
        PackageItemType[PackageItemType["Misc"] = 7] = "Misc";
        PackageItemType[PackageItemType["Unknown"] = 8] = "Unknown";
        PackageItemType[PackageItemType["Spine"] = 9] = "Spine";
        PackageItemType[PackageItemType["DragonBones"] = 10] = "DragonBones";
    })(PackageItemType = fgui.PackageItemType || (fgui.PackageItemType = {}));
    var ObjectType;
    (function (ObjectType) {
        ObjectType[ObjectType["Image"] = 0] = "Image";
        ObjectType[ObjectType["MovieClip"] = 1] = "MovieClip";
        ObjectType[ObjectType["Swf"] = 2] = "Swf";
        ObjectType[ObjectType["Graph"] = 3] = "Graph";
        ObjectType[ObjectType["Loader"] = 4] = "Loader";
        ObjectType[ObjectType["Group"] = 5] = "Group";
        ObjectType[ObjectType["Text"] = 6] = "Text";
        ObjectType[ObjectType["RichText"] = 7] = "RichText";
        ObjectType[ObjectType["InputText"] = 8] = "InputText";
        ObjectType[ObjectType["Component"] = 9] = "Component";
        ObjectType[ObjectType["List"] = 10] = "List";
        ObjectType[ObjectType["Label"] = 11] = "Label";
        ObjectType[ObjectType["Button"] = 12] = "Button";
        ObjectType[ObjectType["ComboBox"] = 13] = "ComboBox";
        ObjectType[ObjectType["ProgressBar"] = 14] = "ProgressBar";
        ObjectType[ObjectType["Slider"] = 15] = "Slider";
        ObjectType[ObjectType["ScrollBar"] = 16] = "ScrollBar";
        ObjectType[ObjectType["Tree"] = 17] = "Tree";
        ObjectType[ObjectType["Loader3D"] = 18] = "Loader3D";
    })(ObjectType = fgui.ObjectType || (fgui.ObjectType = {}));
    var ProgressTitleType;
    (function (ProgressTitleType) {
        ProgressTitleType[ProgressTitleType["Percent"] = 0] = "Percent";
        ProgressTitleType[ProgressTitleType["ValueAndMax"] = 1] = "ValueAndMax";
        ProgressTitleType[ProgressTitleType["Value"] = 2] = "Value";
        ProgressTitleType[ProgressTitleType["Max"] = 3] = "Max";
    })(ProgressTitleType = fgui.ProgressTitleType || (fgui.ProgressTitleType = {}));
    var ScrollBarDisplayType;
    (function (ScrollBarDisplayType) {
        ScrollBarDisplayType[ScrollBarDisplayType["Default"] = 0] = "Default";
        ScrollBarDisplayType[ScrollBarDisplayType["Visible"] = 1] = "Visible";
        ScrollBarDisplayType[ScrollBarDisplayType["Auto"] = 2] = "Auto";
        ScrollBarDisplayType[ScrollBarDisplayType["Hidden"] = 3] = "Hidden";
    })(ScrollBarDisplayType = fgui.ScrollBarDisplayType || (fgui.ScrollBarDisplayType = {}));
    var ScrollType;
    (function (ScrollType) {
        ScrollType[ScrollType["Horizontal"] = 0] = "Horizontal";
        ScrollType[ScrollType["Vertical"] = 1] = "Vertical";
        ScrollType[ScrollType["Both"] = 2] = "Both";
    })(ScrollType = fgui.ScrollType || (fgui.ScrollType = {}));
    var FlipType;
    (function (FlipType) {
        FlipType[FlipType["None"] = 0] = "None";
        FlipType[FlipType["Horizontal"] = 1] = "Horizontal";
        FlipType[FlipType["Vertical"] = 2] = "Vertical";
        FlipType[FlipType["Both"] = 3] = "Both";
    })(FlipType = fgui.FlipType || (fgui.FlipType = {}));
    var ChildrenRenderOrder;
    (function (ChildrenRenderOrder) {
        ChildrenRenderOrder[ChildrenRenderOrder["Ascent"] = 0] = "Ascent";
        ChildrenRenderOrder[ChildrenRenderOrder["Descent"] = 1] = "Descent";
        ChildrenRenderOrder[ChildrenRenderOrder["Arch"] = 2] = "Arch";
    })(ChildrenRenderOrder = fgui.ChildrenRenderOrder || (fgui.ChildrenRenderOrder = {}));
    var GroupLayoutType;
    (function (GroupLayoutType) {
        GroupLayoutType[GroupLayoutType["None"] = 0] = "None";
        GroupLayoutType[GroupLayoutType["Horizontal"] = 1] = "Horizontal";
        GroupLayoutType[GroupLayoutType["Vertical"] = 2] = "Vertical";
    })(GroupLayoutType = fgui.GroupLayoutType || (fgui.GroupLayoutType = {}));
    var PopupDirection;
    (function (PopupDirection) {
        PopupDirection[PopupDirection["Auto"] = 0] = "Auto";
        PopupDirection[PopupDirection["Up"] = 1] = "Up";
        PopupDirection[PopupDirection["Down"] = 2] = "Down";
    })(PopupDirection = fgui.PopupDirection || (fgui.PopupDirection = {}));
    var RelationType;
    (function (RelationType) {
        RelationType[RelationType["Left_Left"] = 0] = "Left_Left";
        RelationType[RelationType["Left_Center"] = 1] = "Left_Center";
        RelationType[RelationType["Left_Right"] = 2] = "Left_Right";
        RelationType[RelationType["Center_Center"] = 3] = "Center_Center";
        RelationType[RelationType["Right_Left"] = 4] = "Right_Left";
        RelationType[RelationType["Right_Center"] = 5] = "Right_Center";
        RelationType[RelationType["Right_Right"] = 6] = "Right_Right";
        RelationType[RelationType["Top_Top"] = 7] = "Top_Top";
        RelationType[RelationType["Top_Middle"] = 8] = "Top_Middle";
        RelationType[RelationType["Top_Bottom"] = 9] = "Top_Bottom";
        RelationType[RelationType["Middle_Middle"] = 10] = "Middle_Middle";
        RelationType[RelationType["Bottom_Top"] = 11] = "Bottom_Top";
        RelationType[RelationType["Bottom_Middle"] = 12] = "Bottom_Middle";
        RelationType[RelationType["Bottom_Bottom"] = 13] = "Bottom_Bottom";
        RelationType[RelationType["Width"] = 14] = "Width";
        RelationType[RelationType["Height"] = 15] = "Height";
        RelationType[RelationType["LeftExt_Left"] = 16] = "LeftExt_Left";
        RelationType[RelationType["LeftExt_Right"] = 17] = "LeftExt_Right";
        RelationType[RelationType["RightExt_Left"] = 18] = "RightExt_Left";
        RelationType[RelationType["RightExt_Right"] = 19] = "RightExt_Right";
        RelationType[RelationType["TopExt_Top"] = 20] = "TopExt_Top";
        RelationType[RelationType["TopExt_Bottom"] = 21] = "TopExt_Bottom";
        RelationType[RelationType["BottomExt_Top"] = 22] = "BottomExt_Top";
        RelationType[RelationType["BottomExt_Bottom"] = 23] = "BottomExt_Bottom";
        RelationType[RelationType["Size"] = 24] = "Size";
    })(RelationType = fgui.RelationType || (fgui.RelationType = {}));
    var GraphType;
    (function (GraphType) {
        GraphType[GraphType["PlaceHolder"] = 0] = "PlaceHolder";
        GraphType[GraphType["Rect"] = 1] = "Rect";
        GraphType[GraphType["Ellipse"] = 2] = "Ellipse";
    })(GraphType = fgui.GraphType || (fgui.GraphType = {}));
    var FillMethod;
    (function (FillMethod) {
        FillMethod[FillMethod["None"] = 0] = "None";
        FillMethod[FillMethod["Horizontal"] = 1] = "Horizontal";
        FillMethod[FillMethod["Vertical"] = 2] = "Vertical";
        FillMethod[FillMethod["Radial90"] = 3] = "Radial90";
        FillMethod[FillMethod["Radial180"] = 4] = "Radial180";
        FillMethod[FillMethod["Radial360"] = 5] = "Radial360";
    })(FillMethod = fgui.FillMethod || (fgui.FillMethod = {}));
    var FillOrigin;
    (function (FillOrigin) {
        FillOrigin[FillOrigin["Top"] = 0] = "Top";
        FillOrigin[FillOrigin["Bottom"] = 1] = "Bottom";
        FillOrigin[FillOrigin["Left"] = 2] = "Left";
        FillOrigin[FillOrigin["Right"] = 3] = "Right";
    })(FillOrigin = fgui.FillOrigin || (fgui.FillOrigin = {}));
    var ObjectPropID;
    (function (ObjectPropID) {
        ObjectPropID[ObjectPropID["Text"] = 0] = "Text";
        ObjectPropID[ObjectPropID["Icon"] = 1] = "Icon";
        ObjectPropID[ObjectPropID["Color"] = 2] = "Color";
        ObjectPropID[ObjectPropID["OutlineColor"] = 3] = "OutlineColor";
        ObjectPropID[ObjectPropID["Playing"] = 4] = "Playing";
        ObjectPropID[ObjectPropID["Frame"] = 5] = "Frame";
        ObjectPropID[ObjectPropID["DeltaTime"] = 6] = "DeltaTime";
        ObjectPropID[ObjectPropID["TimeScale"] = 7] = "TimeScale";
        ObjectPropID[ObjectPropID["FontSize"] = 8] = "FontSize";
        ObjectPropID[ObjectPropID["Selected"] = 9] = "Selected";
    })(ObjectPropID = fgui.ObjectPropID || (fgui.ObjectPropID = {}));
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GButton = function (_super) {
        __extends(GButton, _super);
        function GButton() {
            var _this = _super.call(this) || this;
            _this._node.name = "GButton";
            _this._mode = fgui.ButtonMode.Common;
            _this._title = "";
            _this._icon = "";
            _this._sound = fgui.UIConfig.buttonSound;
            _this._soundVolumeScale = fgui.UIConfig.buttonSoundVolumeScale;
            _this._changeStateOnClick = true;
            _this._downEffect = 0;
            _this._downEffectValue = 0.8;
            return _this;
        }
        Object.defineProperty(GButton.prototype, "icon", {
            get: function get() {
                return this._icon;
            },
            set: function set(value) {
                this._icon = value;
                value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
                if (this._iconObject != null) this._iconObject.icon = value;
                this.updateGear(7);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "selectedIcon", {
            get: function get() {
                return this._selectedIcon;
            },
            set: function set(value) {
                this._selectedIcon = value;
                value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
                if (this._iconObject != null) this._iconObject.icon = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "title", {
            get: function get() {
                return this._title;
            },
            set: function set(value) {
                this._title = value;
                if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
                this.updateGear(6);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "text", {
            get: function get() {
                return this.title;
            },
            set: function set(value) {
                this.title = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "selectedTitle", {
            get: function get() {
                return this._selectedTitle;
            },
            set: function set(value) {
                this._selectedTitle = value;
                if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "titleColor", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.color;else return cc.Color.BLACK;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "titleFontSize", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.fontSize;else return 0;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.fontSize = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "sound", {
            get: function get() {
                return this._sound;
            },
            set: function set(val) {
                this._sound = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "soundVolumeScale", {
            get: function get() {
                return this._soundVolumeScale;
            },
            set: function set(value) {
                this._soundVolumeScale = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "selected", {
            get: function get() {
                return this._selected;
            },
            set: function set(val) {
                if (this._mode == fgui.ButtonMode.Common) return;
                if (this._selected != val) {
                    this._selected = val;
                    this.setCurrentState();
                    if (this._selectedTitle && this._titleObject) this._titleObject.text = this._selected ? this._selectedTitle : this._title;
                    if (this._selectedIcon) {
                        var str = this._selected ? this._selectedIcon : this._icon;
                        if (this._iconObject != null) this._iconObject.icon = str;
                    }
                    if (this._relatedController && this._parent && !this._parent._buildingDisplayList) {
                        if (this._selected) {
                            this._relatedController.selectedPageId = this._relatedPageId;
                            if (this._relatedController.autoRadioGroupDepth) this._parent.adjustRadioGroupDepth(this, this._relatedController);
                        } else if (this._mode == fgui.ButtonMode.Check && this._relatedController.selectedPageId == this._relatedPageId) this._relatedController.oppositePageId = this._relatedPageId;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "mode", {
            get: function get() {
                return this._mode;
            },
            set: function set(value) {
                if (this._mode != value) {
                    if (value == fgui.ButtonMode.Common) this.selected = false;
                    this._mode = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "relatedController", {
            get: function get() {
                return this._relatedController;
            },
            set: function set(val) {
                this._relatedController = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "relatedPageId", {
            get: function get() {
                return this._relatedPageId;
            },
            set: function set(val) {
                this._relatedPageId = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "changeStateOnClick", {
            get: function get() {
                return this._changeStateOnClick;
            },
            set: function set(value) {
                this._changeStateOnClick = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GButton.prototype, "linkedPopup", {
            get: function get() {
                return this._linkedPopup;
            },
            set: function set(value) {
                this._linkedPopup = value;
            },
            enumerable: false,
            configurable: true
        });
        GButton.prototype.getTextField = function () {
            if (this._titleObject instanceof fgui.GTextField) return this._titleObject;else if (this._titleObject instanceof fgui.GLabel) return this._titleObject.getTextField();else if (this._titleObject instanceof GButton) return this._titleObject.getTextField();else return null;
        };
        GButton.prototype.fireClick = function () {
            fgui.GRoot.inst.inputProcessor.simulateClick(this);
        };
        GButton.prototype.setState = function (val) {
            if (this._buttonController) this._buttonController.selectedPage = val;
            if (this._downEffect == 1) {
                var cnt = this.numChildren;
                if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
                    if (!this._downColor) this._downColor = new cc.Color();
                    var r = this._downEffectValue * 255;
                    this._downColor.setR(r).setG(r).setB(r);
                    for (var i = 0; i < cnt; i++) {
                        var obj = this.getChildAt(i);
                        if (obj["color"] != undefined && !(obj instanceof fgui.GTextField)) obj.color = this._downColor;
                    }
                } else {
                    for (var i = 0; i < cnt; i++) {
                        var obj = this.getChildAt(i);
                        if (obj["color"] != undefined && !(obj instanceof fgui.GTextField)) obj.color = cc.Color.WHITE;
                    }
                }
            } else if (this._downEffect == 2) {
                if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
                    if (!this._downScaled) {
                        this._downScaled = true;
                        this.setScale(this.scaleX * this._downEffectValue, this.scaleY * this._downEffectValue);
                    }
                } else {
                    if (this._downScaled) {
                        this._downScaled = false;
                        this.setScale(this.scaleX / this._downEffectValue, this.scaleY / this._downEffectValue);
                    }
                }
            }
        };
        GButton.prototype.setCurrentState = function () {
            if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
                if (this._selected) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
            } else {
                if (this._selected) this.setState(this._over ? GButton.SELECTED_OVER : GButton.DOWN);else this.setState(this._over ? GButton.OVER : GButton.UP);
            }
        };
        GButton.prototype.handleControllerChanged = function (c) {
            _super.prototype.handleControllerChanged.call(this, c);
            if (this._relatedController == c) this.selected = this._relatedPageId == c.selectedPageId;
        };
        GButton.prototype.handleGrayedChanged = function () {
            if (this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
                if (this.grayed) {
                    if (this._selected && this._buttonController.hasPage(GButton.SELECTED_DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
                } else if (this._selected) this.setState(GButton.DOWN);else this.setState(GButton.UP);
            } else _super.prototype.handleGrayedChanged.call(this);
        };
        GButton.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.titleColor;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) return tf.strokeColor;else return 0;
                    }
                case fgui.ObjectPropID.FontSize:
                    return this.titleFontSize;
                case fgui.ObjectPropID.Selected:
                    return this.selected;
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GButton.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.titleColor = value;
                    break;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) tf.strokeColor = value;
                    }
                    break;
                case fgui.ObjectPropID.FontSize:
                    this.titleFontSize = value;
                    break;
                case fgui.ObjectPropID.Selected:
                    this.selected = value;
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GButton.prototype.constructExtension = function (buffer) {
            buffer.seek(0, 6);
            this._mode = buffer.readByte();
            var str = buffer.readS();
            if (str) this._sound = str;
            this._soundVolumeScale = buffer.readFloat();
            this._downEffect = buffer.readByte();
            this._downEffectValue = buffer.readFloat();
            if (this._downEffect == 2) this.setPivot(0.5, 0.5, this.pivotAsAnchor);
            this._buttonController = this.getController("button");
            this._titleObject = this.getChild("title");
            this._iconObject = this.getChild("icon");
            if (this._titleObject != null) this._title = this._titleObject.text;
            if (this._iconObject != null) this._icon = this._iconObject.icon;
            if (this._mode == fgui.ButtonMode.Common) this.setState(GButton.UP);
            this._node.on(fgui.Event.TOUCH_BEGIN, this.onTouchBegin_1, this);
            this._node.on(fgui.Event.TOUCH_END, this.onTouchEnd_1, this);
            this._node.on(fgui.Event.ROLL_OVER, this.onRollOver_1, this);
            this._node.on(fgui.Event.ROLL_OUT, this.onRollOut_1, this);
            this._node.on(fgui.Event.CLICK, this.onClick_1, this);
        };
        GButton.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!buffer.seek(beginPos, 6)) return;
            if (buffer.readByte() != this.packageItem.objectType) return;
            var str;
            var iv;
            str = buffer.readS();
            if (str != null) this.title = str;
            str = buffer.readS();
            if (str != null) this.selectedTitle = str;
            str = buffer.readS();
            if (str != null) this.icon = str;
            str = buffer.readS();
            if (str != null) this.selectedIcon = str;
            if (buffer.readBool()) this.titleColor = buffer.readColor();
            iv = buffer.readInt();
            if (iv != 0) this.titleFontSize = iv;
            iv = buffer.readShort();
            if (iv >= 0) this._relatedController = this.parent.getControllerAt(iv);
            this._relatedPageId = buffer.readS();
            str = buffer.readS();
            if (str != null) this._sound = str;
            if (buffer.readBool()) this._soundVolumeScale = buffer.readFloat();
            this.selected = buffer.readBool();
        };
        GButton.prototype.onRollOver_1 = function () {
            if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
            this._over = true;
            if (this._down) return;
            if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
            this.setState(this._selected ? GButton.SELECTED_OVER : GButton.OVER);
        };
        GButton.prototype.onRollOut_1 = function () {
            if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
            this._over = false;
            if (this._down) return;
            if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
            this.setState(this._selected ? GButton.DOWN : GButton.UP);
        };
        GButton.prototype.onTouchBegin_1 = function (evt) {
            if (evt.button != cc.Event.EventMouse.BUTTON_LEFT) return;
            this._down = true;
            evt.captureTouch();
            if (this._mode == fgui.ButtonMode.Common) {
                if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DOWN);
            }
            if (this._linkedPopup != null) {
                if (this._linkedPopup instanceof fgui.Window) this._linkedPopup.toggleStatus();else this.root.togglePopup(this._linkedPopup, this);
            }
        };
        GButton.prototype.onTouchEnd_1 = function (evt) {
            if (evt.button != cc.Event.EventMouse.BUTTON_LEFT) return;
            if (this._down) {
                this._down = false;
                if (this._node == null) return;
                if (this._mode == fgui.ButtonMode.Common) {
                    if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.DISABLED);else if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
                } else {
                    if (!this._over && this._buttonController != null && (this._buttonController.selectedPage == GButton.OVER || this._buttonController.selectedPage == GButton.SELECTED_OVER)) {
                        this.setCurrentState();
                    }
                }
            }
        };
        GButton.prototype.onClick_1 = function () {
            if (this._sound) {
                var pi = fgui.UIPackage.getItemByURL(this._sound);
                if (pi) {
                    var sound = pi.owner.getItemAsset(pi);
                    if (sound) fgui.GRoot.inst.playOneShotSound(sound, this._soundVolumeScale);
                }
            }
            if (this._mode == fgui.ButtonMode.Check) {
                if (this._changeStateOnClick) {
                    this.selected = !this._selected;
                    this._node.emit(fgui.Event.STATUS_CHANGED, this);
                }
            } else if (this._mode == fgui.ButtonMode.Radio) {
                if (this._changeStateOnClick && !this._selected) {
                    this.selected = true;
                    this._node.emit(fgui.Event.STATUS_CHANGED, this);
                }
            } else {
                if (this._relatedController) this._relatedController.selectedPageId = this._relatedPageId;
            }
        };
        GButton.UP = "up";
        GButton.DOWN = "down";
        GButton.OVER = "over";
        GButton.SELECTED_OVER = "selectedOver";
        GButton.DISABLED = "disabled";
        GButton.SELECTED_DISABLED = "selectedDisabled";
        return GButton;
    }(fgui.GComponent);
    fgui.GButton = GButton;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GComboBox = function (_super) {
        __extends(GComboBox, _super);
        function GComboBox() {
            var _this = _super.call(this) || this;
            _this._visibleItemCount = 0;
            _this._selectedIndex = 0;
            _this._popupDirection = fgui.PopupDirection.Auto;
            _this._node.name = "GComboBox";
            _this._visibleItemCount = fgui.UIConfig.defaultComboBoxVisibleItemCount;
            _this._itemsUpdated = true;
            _this._selectedIndex = -1;
            _this._items = [];
            _this._values = [];
            return _this;
        }
        Object.defineProperty(GComboBox.prototype, "text", {
            get: function get() {
                if (this._titleObject) return this._titleObject.text;else return null;
            },
            set: function set(value) {
                if (this._titleObject) this._titleObject.text = value;
                this.updateGear(6);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "icon", {
            get: function get() {
                if (this._iconObject) return this._iconObject.icon;else return null;
            },
            set: function set(value) {
                if (this._iconObject) this._iconObject.icon = value;
                this.updateGear(7);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "titleColor", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.color;else return cc.Color.BLACK;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "titleFontSize", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.fontSize;else return 0;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.fontSize = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "visibleItemCount", {
            get: function get() {
                return this._visibleItemCount;
            },
            set: function set(value) {
                this._visibleItemCount = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "popupDirection", {
            get: function get() {
                return this._popupDirection;
            },
            set: function set(value) {
                this._popupDirection = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "items", {
            get: function get() {
                return this._items;
            },
            set: function set(value) {
                if (!value) this._items.length = 0;else this._items = value.concat();
                if (this._items.length > 0) {
                    if (this._selectedIndex >= this._items.length) this._selectedIndex = this._items.length - 1;else if (this._selectedIndex == -1) this._selectedIndex = 0;
                    this.text = this._items[this._selectedIndex];
                    if (this._icons != null && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
                } else {
                    this.text = "";
                    if (this._icons != null) this.icon = null;
                    this._selectedIndex = -1;
                }
                this._itemsUpdated = true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "icons", {
            get: function get() {
                return this._icons;
            },
            set: function set(value) {
                this._icons = value;
                if (this._icons != null && this._selectedIndex != -1 && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "values", {
            get: function get() {
                return this._values;
            },
            set: function set(value) {
                if (!value) this._values.length = 0;else this._values = value.concat();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "selectedIndex", {
            get: function get() {
                return this._selectedIndex;
            },
            set: function set(val) {
                if (this._selectedIndex == val) return;
                this._selectedIndex = val;
                if (this._selectedIndex >= 0 && this._selectedIndex < this._items.length) {
                    this.text = this._items[this._selectedIndex];
                    if (this._icons != null && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
                } else {
                    this.text = "";
                    if (this._icons != null) this.icon = null;
                }
                this.updateSelectionController();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "value", {
            get: function get() {
                return this._values[this._selectedIndex];
            },
            set: function set(val) {
                var index = this._values.indexOf(val);
                if (index == -1 && val == null) index = this._values.indexOf("");
                this.selectedIndex = index;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GComboBox.prototype, "selectionController", {
            get: function get() {
                return this._selectionController;
            },
            set: function set(value) {
                this._selectionController = value;
            },
            enumerable: false,
            configurable: true
        });
        GComboBox.prototype.getTextField = function () {
            if (this._titleObject instanceof fgui.GTextField) return this._titleObject;else if (this._titleObject instanceof fgui.GLabel) return this._titleObject.getTextField();else if (this._titleObject instanceof fgui.GButton) return this._titleObject.getTextField();else return null;
        };
        GComboBox.prototype.setState = function (val) {
            if (this._buttonController) this._buttonController.selectedPage = val;
        };
        GComboBox.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.titleColor;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) return tf.strokeColor;else return 0;
                    }
                case fgui.ObjectPropID.FontSize:
                    {
                        tf = this.getTextField();
                        if (tf) return tf.fontSize;else return 0;
                    }
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GComboBox.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.titleColor = value;
                    break;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) tf.strokeColor = value;
                    }
                    break;
                case fgui.ObjectPropID.FontSize:
                    {
                        tf = this.getTextField();
                        if (tf) tf.fontSize = value;
                    }
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GComboBox.prototype.constructExtension = function (buffer) {
            var str;
            this._buttonController = this.getController("button");
            this._titleObject = this.getChild("title");
            this._iconObject = this.getChild("icon");
            str = buffer.readS();
            if (str) {
                this.dropdown = fgui.UIPackage.createObjectFromURL(str);
                if (!this.dropdown) {
                    console.error("下拉框必须为元件");
                    return;
                }
                this.dropdown.name = "this.dropdown";
                this._list = this.dropdown.getChild("list").asList;
                if (this._list == null) {
                    console.error(this.resourceURL + ": 下拉框的弹出元件里必须包含名为list的列表");
                    return;
                }
                this._list.on(fgui.Event.CLICK_ITEM, this.onClickItem, this);
                this._list.addRelation(this.dropdown, fgui.RelationType.Width);
                this._list.removeRelation(this.dropdown, fgui.RelationType.Height);
                this.dropdown.addRelation(this._list, fgui.RelationType.Height);
                this.dropdown.removeRelation(this._list, fgui.RelationType.Width);
                this.dropdown.on(fgui.Event.UNDISPLAY, this.onPopupClosed, this);
            }
            this._node.on(fgui.Event.TOUCH_BEGIN, this.onTouchBegin_1, this);
            this._node.on(fgui.Event.TOUCH_END, this.onTouchEnd_1, this);
            this._node.on(fgui.Event.ROLL_OVER, this.onRollOver_1, this);
            this._node.on(fgui.Event.ROLL_OUT, this.onRollOut_1, this);
        };
        GComboBox.prototype.handleControllerChanged = function (c) {
            _super.prototype.handleControllerChanged.call(this, c);
            if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };
        GComboBox.prototype.updateSelectionController = function () {
            if (this._selectionController != null && !this._selectionController.changing && this._selectedIndex < this._selectionController.pageCount) {
                var c = this._selectionController;
                this._selectionController = null;
                c.selectedIndex = this._selectedIndex;
                this._selectionController = c;
            }
        };
        GComboBox.prototype.dispose = function () {
            if (this.dropdown) {
                this.dropdown.dispose();
                this.dropdown = null;
            }
            _super.prototype.dispose.call(this);
        };
        GComboBox.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!buffer.seek(beginPos, 6)) return;
            if (buffer.readByte() != this.packageItem.objectType) return;
            var i;
            var iv;
            var nextPos;
            var str;
            var itemCount = buffer.readShort();
            for (i = 0; i < itemCount; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                this._items[i] = buffer.readS();
                this._values[i] = buffer.readS();
                str = buffer.readS();
                if (str != null) {
                    if (this._icons == null) this._icons = new Array();
                    this._icons[i] = str;
                }
                buffer.position = nextPos;
            }
            str = buffer.readS();
            if (str != null) {
                this.text = str;
                this._selectedIndex = this._items.indexOf(str);
            } else if (this._items.length > 0) {
                this._selectedIndex = 0;
                this.text = this._items[0];
            } else this._selectedIndex = -1;
            str = buffer.readS();
            if (str != null) this.icon = str;
            if (buffer.readBool()) this.titleColor = buffer.readColor();
            iv = buffer.readInt();
            if (iv > 0) this._visibleItemCount = iv;
            this._popupDirection = buffer.readByte();
            iv = buffer.readShort();
            if (iv >= 0) this._selectionController = this.parent.getControllerAt(iv);
        };
        GComboBox.prototype.showDropdown = function () {
            if (this._itemsUpdated) {
                this._itemsUpdated = false;
                this._list.removeChildrenToPool();
                var cnt = this._items.length;
                for (var i = 0; i < cnt; i++) {
                    var item = this._list.addItemFromPool();
                    item.name = i < this._values.length ? this._values[i] : "";
                    item.text = this._items[i];
                    item.icon = this._icons != null && i < this._icons.length ? this._icons[i] : null;
                }
                this._list.resizeToFit(this._visibleItemCount);
            }
            this._list.selectedIndex = -1;
            this.dropdown.width = this.width;
            this._list.ensureBoundsCorrect();
            var downward = null;
            if (this._popupDirection == fgui.PopupDirection.Down) downward = true;else if (this._popupDirection == fgui.PopupDirection.Up) downward = false;
            this.root.togglePopup(this.dropdown, this, downward);
            if (this.dropdown.parent) this.setState(fgui.GButton.DOWN);
        };
        GComboBox.prototype.onPopupClosed = function () {
            if (this._over) this.setState(fgui.GButton.OVER);else this.setState(fgui.GButton.UP);
        };
        GComboBox.prototype.onClickItem = function (itemObject) {
            var _t = this;
            var index = this._list.getChildIndex(itemObject);
            this._partner.callLater(function (dt) {
                _t.onClickItem2(index);
            }, 0.1);
        };
        GComboBox.prototype.onClickItem2 = function (index) {
            if (this.dropdown.parent instanceof fgui.GRoot) this.dropdown.parent.hidePopup();
            this._selectedIndex = -1;
            this.selectedIndex = index;
            this._node.emit(fgui.Event.STATUS_CHANGED, this);
        };
        GComboBox.prototype.onRollOver_1 = function () {
            this._over = true;
            if (this._down || this.dropdown && this.dropdown.parent) return;
            this.setState(fgui.GButton.OVER);
        };
        GComboBox.prototype.onRollOut_1 = function () {
            this._over = false;
            if (this._down || this.dropdown && this.dropdown.parent) return;
            this.setState(fgui.GButton.UP);
        };
        GComboBox.prototype.onTouchBegin_1 = function (evt) {
            if (evt.button != cc.Event.EventMouse.BUTTON_LEFT) return;
            if (evt.initiator instanceof fgui.GTextInput && evt.initiator.editable) return;
            this._down = true;
            evt.captureTouch();
            if (this.dropdown) this.showDropdown();
        };
        GComboBox.prototype.onTouchEnd_1 = function (evt) {
            if (evt.button != cc.Event.EventMouse.BUTTON_LEFT) return;
            if (this._down) {
                this._down = false;
                if (this.dropdown && !this.dropdown.parent) {
                    if (this._over) this.setState(fgui.GButton.OVER);else this.setState(fgui.GButton.UP);
                }
            }
        };
        return GComboBox;
    }(fgui.GComponent);
    fgui.GComboBox = GComboBox;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GGraph = function (_super) {
        __extends(GGraph, _super);
        function GGraph() {
            var _this = _super.call(this) || this;
            _this._type = 0;
            _this._lineSize = 0;
            _this._node.name = "GGraph";
            _this._lineSize = 1;
            _this._lineColor = new cc.Color();
            _this._fillColor = new cc.Color(255, 255, 255, 255);
            _this._cornerRadius = null;
            _this._sides = 3;
            _this._startAngle = 0;
            _this._content = _this._node.addComponent(cc.Graphics);
            return _this;
        }
        GGraph.prototype.drawRect = function (lineSize, lineColor, fillColor, corner) {
            this._type = fgui.GraphType.Rect;
            this._lineSize = lineSize;
            this._lineColor.set(lineColor);
            this._fillColor.set(fillColor);
            this._cornerRadius = corner;
            this.updateGraph();
        };
        GGraph.prototype.drawEllipse = function (lineSize, lineColor, fillColor) {
            this._type = fgui.GraphType.Ellipse;
            this._lineSize = lineSize;
            this._lineColor.set(lineColor);
            this._fillColor.set(fillColor);
            this._cornerRadius = null;
            this.updateGraph();
        };
        GGraph.prototype.drawRegularPolygon = function (lineSize, lineColor, fillColor, sides, startAngle, distances) {
            if (startAngle === void 0) {
                startAngle = 0;
            }
            if (distances === void 0) {
                distances = null;
            }
            this._type = 4;
            this._lineSize = lineSize;
            this._lineColor.set(lineColor);
            this._fillColor.set(fillColor);
            this._sides = sides;
            this._startAngle = startAngle;
            this._distances = distances;
            this.updateGraph();
        };
        GGraph.prototype.drawPolygon = function (lineSize, lineColor, fillColor, points) {
            this._type = 3;
            this._lineSize = lineSize;
            this._lineColor.set(lineColor);
            this._fillColor.set(fillColor);
            this._polygonPoints = points;
            this.updateGraph();
        };
        Object.defineProperty(GGraph.prototype, "distances", {
            get: function get() {
                return this._distances;
            },
            set: function set(value) {
                this._distances = value;
                if (this._type == 3) this.updateGraph();
            },
            enumerable: false,
            configurable: true
        });
        GGraph.prototype.clearGraphics = function () {
            this._type = fgui.GraphType.PlaceHolder;
            if (this._hasContent) {
                this._content.clear();
                this._hasContent = false;
            }
        };
        Object.defineProperty(GGraph.prototype, "type", {
            get: function get() {
                return this._type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGraph.prototype, "color", {
            get: function get() {
                return this._fillColor;
            },
            set: function set(value) {
                this._fillColor.set(value);
                if (this._type != 0) this.updateGraph();
            },
            enumerable: false,
            configurable: true
        });
        GGraph.prototype.updateGraph = function () {
            var ctx = this._content;
            if (this._hasContent) {
                this._hasContent = false;
                ctx.clear();
            }
            var w = this._width;
            var h = this._height;
            if (w == 0 || h == 0) return;
            var px = -this.pivotX * this._width;
            var py = this.pivotY * this._height;
            ctx.lineWidth = this._lineSize;
            ctx.strokeColor = this._lineColor;
            ctx.fillColor = this._fillColor;
            if (this._type == 1) {
                if (this._cornerRadius) {
                    ctx.roundRect(0 + px, -h + py, w, h, this._cornerRadius[0]);
                } else ctx.rect(0 + px, -h + py, w, h);
            } else if (this._type == 2) {
                ctx.ellipse(w / 2 + px, -h / 2 + py, w / 2, h / 2);
            } else if (this._type == 3) {
                this.drawPath(ctx, this._polygonPoints, px, py);
            } else if (this._type == 4) {
                if (!this._polygonPoints) this._polygonPoints = [];
                var radius = Math.min(this._width, this._height) / 2;
                this._polygonPoints.length = 0;
                var angle = cc.misc.degreesToRadians(this._startAngle);
                var deltaAngle = 2 * Math.PI / this._sides;
                var dist;
                for (var i = 0; i < this._sides; i++) {
                    if (this._distances) {
                        dist = this._distances[i];
                        if (isNaN(dist)) dist = 1;
                    } else dist = 1;
                    var xv = radius + radius * dist * Math.cos(angle);
                    var yv = radius + radius * dist * Math.sin(angle);
                    this._polygonPoints.push(xv, yv);
                    angle += deltaAngle;
                }
                this.drawPath(ctx, this._polygonPoints, px, py);
            }
            if (this._lineSize != 0) ctx.stroke();
            ctx.fill();
            this._hasContent = true;
        };
        GGraph.prototype.drawPath = function (ctx, points, px, py) {
            var cnt = points.length;
            ctx.moveTo(points[0] + px, -points[1] + py);
            for (var i = 2; i < cnt; i += 2) {
                ctx.lineTo(points[i] + px, -points[i + 1] + py);
            }ctx.lineTo(points[0] + px, -points[1] + py);
        };
        GGraph.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            if (this._type != 0) this.updateGraph();
        };
        GGraph.prototype.handleAnchorChanged = function () {
            _super.prototype.handleAnchorChanged.call(this);
            if (this._type != 0) this.updateGraph();
        };
        GGraph.prototype.getProp = function (index) {
            if (index == fgui.ObjectPropID.Color) return this.color;else return _super.prototype.getProp.call(this, index);
        };
        GGraph.prototype.setProp = function (index, value) {
            if (index == fgui.ObjectPropID.Color) this.color = value;else _super.prototype.setProp.call(this, index, value);
        };
        GGraph.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            this._type = buffer.readByte();
            if (this._type != 0) {
                var i;
                var cnt;
                this._lineSize = buffer.readInt();
                this._lineColor.set(buffer.readColor(true));
                this._fillColor.set(buffer.readColor(true));
                if (buffer.readBool()) {
                    this._cornerRadius = new Array(4);
                    for (i = 0; i < 4; i++) {
                        this._cornerRadius[i] = buffer.readFloat();
                    }
                }
                if (this._type == 3) {
                    cnt = buffer.readShort();
                    this._polygonPoints = [];
                    this._polygonPoints.length = cnt;
                    for (i = 0; i < cnt; i++) {
                        this._polygonPoints[i] = buffer.readFloat();
                    }
                } else if (this._type == 4) {
                    this._sides = buffer.readShort();
                    this._startAngle = buffer.readFloat();
                    cnt = buffer.readShort();
                    if (cnt > 0) {
                        this._distances = [];
                        for (i = 0; i < cnt; i++) {
                            this._distances[i] = buffer.readFloat();
                        }
                    }
                }
                this.updateGraph();
            }
        };
        return GGraph;
    }(fgui.GObject);
    fgui.GGraph = GGraph;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GGroup = function (_super) {
        __extends(GGroup, _super);
        function GGroup() {
            var _this = _super.call(this) || this;
            _this._layout = 0;
            _this._lineGap = 0;
            _this._columnGap = 0;
            _this._mainGridIndex = -1;
            _this._mainGridMinSize = 50;
            _this._mainChildIndex = -1;
            _this._totalSize = 0;
            _this._numChildren = 0;
            _this._updating = 0;
            _this._node.name = "GGroup";
            _this._touchDisabled = true;
            return _this;
        }
        GGroup.prototype.dispose = function () {
            this._boundsChanged = false;
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(GGroup.prototype, "layout", {
            get: function get() {
                return this._layout;
            },
            set: function set(value) {
                if (this._layout != value) {
                    this._layout = value;
                    this.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "lineGap", {
            get: function get() {
                return this._lineGap;
            },
            set: function set(value) {
                if (this._lineGap != value) {
                    this._lineGap = value;
                    this.setBoundsChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "columnGap", {
            get: function get() {
                return this._columnGap;
            },
            set: function set(value) {
                if (this._columnGap != value) {
                    this._columnGap = value;
                    this.setBoundsChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "excludeInvisibles", {
            get: function get() {
                return this._excludeInvisibles;
            },
            set: function set(value) {
                if (this._excludeInvisibles != value) {
                    this._excludeInvisibles = value;
                    this.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "autoSizeDisabled", {
            get: function get() {
                return this._autoSizeDisabled;
            },
            set: function set(value) {
                this._autoSizeDisabled = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "mainGridMinSize", {
            get: function get() {
                return this._mainGridMinSize;
            },
            set: function set(value) {
                if (this._mainGridMinSize != value) {
                    this._mainGridMinSize = value;
                    this.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GGroup.prototype, "mainGridIndex", {
            get: function get() {
                return this._mainGridIndex;
            },
            set: function set(value) {
                if (this._mainGridIndex != value) {
                    this._mainGridIndex = value;
                    this.setBoundsChangedFlag();
                }
            },
            enumerable: false,
            configurable: true
        });
        GGroup.prototype.setBoundsChangedFlag = function (positionChangedOnly) {
            if (positionChangedOnly === void 0) {
                positionChangedOnly = false;
            }
            if (this._updating == 0 && this._parent != null) {
                if (!positionChangedOnly) this._percentReady = false;
                if (!this._boundsChanged) {
                    this._boundsChanged = true;
                    if (this._layout != fgui.GroupLayoutType.None) this._partner.callLater(this._ensureBoundsCorrect);
                }
            }
        };
        GGroup.prototype._ensureBoundsCorrect = function () {
            var _t = this.node["$gobj"];
            _t.ensureBoundsCorrect();
        };
        GGroup.prototype.ensureSizeCorrect = function () {
            if (this._parent == null || !this._boundsChanged || this._layout == 0) return;
            this._boundsChanged = false;
            if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
                this.handleLayout();
                this.updateBounds();
            }
        };
        GGroup.prototype.ensureBoundsCorrect = function () {
            if (this._parent == null || !this._boundsChanged) return;
            this._boundsChanged = false;
            if (this._layout == 0) this.updateBounds();else {
                if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
                    this.handleLayout();
                    this.updateBounds();
                }
            }
        };
        GGroup.prototype.updateBounds = function () {
            this._partner.unschedule(this._ensureBoundsCorrect);
            var cnt = this._parent.numChildren;
            var i;
            var child;
            var ax = Number.POSITIVE_INFINITY,
                ay = Number.POSITIVE_INFINITY;
            var ar = Number.NEGATIVE_INFINITY,
                ab = Number.NEGATIVE_INFINITY;
            var tmp;
            var empty = true;
            for (i = 0; i < cnt; i++) {
                child = this._parent.getChildAt(i);
                if (child.group != this || this._excludeInvisibles && !child.internalVisible3) continue;
                tmp = child.xMin;
                if (tmp < ax) ax = tmp;
                tmp = child.yMin;
                if (tmp < ay) ay = tmp;
                tmp = child.xMin + child.width;
                if (tmp > ar) ar = tmp;
                tmp = child.yMin + child.height;
                if (tmp > ab) ab = tmp;
                empty = false;
            }
            var w = 0,
                h = 0;
            if (!empty) {
                this._updating |= 1;
                this.setPosition(ax, ay);
                this._updating &= 2;
                w = ar - ax;
                h = ab - ay;
            }
            if ((this._updating & 2) == 0) {
                this._updating |= 2;
                this.setSize(w, h);
                this._updating &= 1;
            } else {
                this._updating &= 1;
                this.resizeChildren(this._width - w, this._height - h);
            }
        };
        GGroup.prototype.handleLayout = function () {
            this._updating |= 1;
            var child;
            var i;
            var cnt;
            if (this._layout == fgui.GroupLayoutType.Horizontal) {
                var curX = this.x;
                cnt = this._parent.numChildren;
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (this._excludeInvisibles && !child.internalVisible3) continue;
                    child.xMin = curX;
                    if (child.width != 0) curX += child.width + this._columnGap;
                }
            } else if (this._layout == fgui.GroupLayoutType.Vertical) {
                var curY = this.y;
                cnt = this._parent.numChildren;
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (this._excludeInvisibles && !child.internalVisible3) continue;
                    child.yMin = curY;
                    if (child.height != 0) curY += child.height + this._lineGap;
                }
            }
            this._updating &= 2;
        };
        GGroup.prototype.moveChildren = function (dx, dy) {
            if ((this._updating & 1) != 0 || this._parent == null) return;
            this._updating |= 1;
            var cnt = this._parent.numChildren;
            var i;
            var child;
            for (i = 0; i < cnt; i++) {
                child = this._parent.getChildAt(i);
                if (child.group == this) {
                    child.setPosition(child.x + dx, child.y + dy);
                }
            }
            this._updating &= 2;
        };
        GGroup.prototype.resizeChildren = function (dw, dh) {
            if (this._layout == fgui.GroupLayoutType.None || (this._updating & 2) != 0 || this._parent == null) return;
            this._updating |= 2;
            if (this._boundsChanged) {
                this._boundsChanged = false;
                if (!this._autoSizeDisabled) {
                    this.updateBounds();
                    return;
                }
            }
            var cnt = this._parent.numChildren;
            var i;
            var child;
            if (!this._percentReady) {
                this._percentReady = true;
                this._numChildren = 0;
                this._totalSize = 0;
                this._mainChildIndex = -1;
                var j = 0;
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (!this._excludeInvisibles || child.internalVisible3) {
                        if (j == this._mainGridIndex) this._mainChildIndex = i;
                        this._numChildren++;
                        if (this._layout == 1) this._totalSize += child.width;else this._totalSize += child.height;
                    }
                    j++;
                }
                if (this._mainChildIndex != -1) {
                    if (this._layout == 1) {
                        child = this._parent.getChildAt(this._mainChildIndex);
                        this._totalSize += this._mainGridMinSize - child.width;
                        child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
                    } else {
                        child = this._parent.getChildAt(this._mainChildIndex);
                        this._totalSize += this._mainGridMinSize - child.height;
                        child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
                    }
                }
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (i == this._mainChildIndex) continue;
                    if (this._totalSize > 0) child._sizePercentInGroup = (this._layout == 1 ? child.width : child.height) / this._totalSize;else child._sizePercentInGroup = 0;
                }
            }
            var remainSize = 0;
            var remainPercent = 1;
            var priorHandled = false;
            if (this._layout == 1) {
                remainSize = this.width - (this._numChildren - 1) * this._columnGap;
                if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
                    child = this._parent.getChildAt(this._mainChildIndex);
                    child.setSize(remainSize - (this._totalSize - this._mainGridMinSize), child._rawHeight + dh, true);
                    remainSize -= child.width;
                    remainPercent -= child._sizePercentInGroup;
                    priorHandled = true;
                }
                var curX = this.x;
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (this._excludeInvisibles && !child.internalVisible3) {
                        child.setSize(child._rawWidth, child._rawHeight + dh, true);
                        continue;
                    }
                    if (!priorHandled || i != this._mainChildIndex) {
                        child.setSize(Math.round(child._sizePercentInGroup / remainPercent * remainSize), child._rawHeight + dh, true);
                        remainPercent -= child._sizePercentInGroup;
                        remainSize -= child.width;
                    }
                    child.xMin = curX;
                    if (child.width != 0) curX += child.width + this._columnGap;
                }
            } else {
                remainSize = this.height - (this._numChildren - 1) * this._lineGap;
                if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
                    child = this._parent.getChildAt(this._mainChildIndex);
                    child.setSize(child._rawWidth + dw, remainSize - (this._totalSize - this._mainGridMinSize), true);
                    remainSize -= child.height;
                    remainPercent -= child._sizePercentInGroup;
                    priorHandled = true;
                }
                var curY = this.y;
                for (i = 0; i < cnt; i++) {
                    child = this._parent.getChildAt(i);
                    if (child.group != this) continue;
                    if (this._excludeInvisibles && !child.internalVisible3) {
                        child.setSize(child._rawWidth + dw, child._rawHeight, true);
                        continue;
                    }
                    if (!priorHandled || i != this._mainChildIndex) {
                        child.setSize(child._rawWidth + dw, Math.round(child._sizePercentInGroup / remainPercent * remainSize), true);
                        remainPercent -= child._sizePercentInGroup;
                        remainSize -= child.height;
                    }
                    child.yMin = curY;
                    if (child.height != 0) curY += child.height + this._lineGap;
                }
            }
            this._updating &= 1;
        };
        GGroup.prototype.handleAlphaChanged = function () {
            if (this._underConstruct) return;
            var cnt = this._parent.numChildren;
            for (var i = 0; i < cnt; i++) {
                var child = this._parent.getChildAt(i);
                if (child.group == this) child.alpha = this.alpha;
            }
        };
        GGroup.prototype.handleVisibleChanged = function () {
            if (!this._parent) return;
            var cnt = this._parent.numChildren;
            for (var i = 0; i < cnt; i++) {
                var child = this._parent.getChildAt(i);
                if (child.group == this) child.handleVisibleChanged();
            }
        };
        GGroup.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            this._layout = buffer.readByte();
            this._lineGap = buffer.readInt();
            this._columnGap = buffer.readInt();
            if (buffer.version >= 2) {
                this._excludeInvisibles = buffer.readBool();
                this._autoSizeDisabled = buffer.readBool();
                this._mainChildIndex = buffer.readInt();
            }
        };
        GGroup.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!this.visible) this.handleVisibleChanged();
        };
        return GGroup;
    }(fgui.GObject);
    fgui.GGroup = GGroup;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GImage = function (_super) {
        __extends(GImage, _super);
        function GImage() {
            var _this = _super.call(this) || this;
            _this._node.name = "GImage";
            _this._touchDisabled = true;
            _this._content = _this._node.addComponent(fgui.Image);
            _this._content.sizeMode = cc.Sprite.SizeMode.CUSTOM;
            _this._content.trim = false;
            return _this;
        }
        Object.defineProperty(GImage.prototype, "color", {
            get: function get() {
                return this._node.color;
            },
            set: function set(value) {
                if (!this._node.color.equals(value)) {
                    this._node.color = value;
                    this.updateGear(4);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GImage.prototype, "flip", {
            get: function get() {
                return this._content.flip;
            },
            set: function set(value) {
                this._content.flip = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GImage.prototype, "fillMethod", {
            get: function get() {
                return this._content.fillMethod;
            },
            set: function set(value) {
                this._content.fillMethod = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GImage.prototype, "fillOrigin", {
            get: function get() {
                return this._content.fillOrigin;
            },
            set: function set(value) {
                this._content.fillOrigin = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GImage.prototype, "fillClockwise", {
            get: function get() {
                return this._content.fillClockwise;
            },
            set: function set(value) {
                this._content.fillClockwise = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GImage.prototype, "fillAmount", {
            get: function get() {
                return this._content.fillAmount;
            },
            set: function set(value) {
                this._content.fillAmount = value;
            },
            enumerable: false,
            configurable: true
        });
        GImage.prototype.constructFromResource = function () {
            var contentItem = this.packageItem.getBranch();
            this.sourceWidth = contentItem.width;
            this.sourceHeight = contentItem.height;
            this.initWidth = this.sourceWidth;
            this.initHeight = this.sourceHeight;
            this.setSize(this.sourceWidth, this.sourceHeight);
            contentItem = contentItem.getHighResolution();
            contentItem.load();
            if (contentItem.scale9Grid) this._content.type = cc.Sprite.Type.SLICED;else if (contentItem.scaleByTile) this._content.type = cc.Sprite.Type.TILED;
            this._content.spriteFrame = contentItem.asset;
        };
        GImage.prototype.handleGrayedChanged = function () {
            this._content.grayed = this._grayed;
        };
        GImage.prototype.getProp = function (index) {
            if (index == fgui.ObjectPropID.Color) return this.color;else return _super.prototype.getProp.call(this, index);
        };
        GImage.prototype.setProp = function (index, value) {
            if (index == fgui.ObjectPropID.Color) this.color = value;else _super.prototype.setProp.call(this, index, value);
        };
        GImage.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            if (buffer.readBool()) this.color = buffer.readColor();
            this._content.flip = buffer.readByte();
            this._content.fillMethod = buffer.readByte();
            if (this._content.fillMethod != 0) {
                this._content.fillOrigin = buffer.readByte();
                this._content.fillClockwise = buffer.readBool();
                this._content.fillAmount = buffer.readFloat();
            }
        };
        return GImage;
    }(fgui.GObject);
    fgui.GImage = GImage;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GLabel = function (_super) {
        __extends(GLabel, _super);
        function GLabel() {
            var _this = _super.call(this) || this;
            _this._node.name = "GLabel";
            return _this;
        }
        Object.defineProperty(GLabel.prototype, "icon", {
            get: function get() {
                if (this._iconObject != null) return this._iconObject.icon;
            },
            set: function set(value) {
                if (this._iconObject != null) this._iconObject.icon = value;
                this.updateGear(7);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLabel.prototype, "title", {
            get: function get() {
                if (this._titleObject) return this._titleObject.text;else return null;
            },
            set: function set(value) {
                if (this._titleObject) this._titleObject.text = value;
                this.updateGear(6);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLabel.prototype, "text", {
            get: function get() {
                return this.title;
            },
            set: function set(value) {
                this.title = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLabel.prototype, "titleColor", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.color;else return cc.Color.WHITE;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.color = value;
                this.updateGear(4);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLabel.prototype, "titleFontSize", {
            get: function get() {
                var tf = this.getTextField();
                if (tf != null) return tf.fontSize;else return 0;
            },
            set: function set(value) {
                var tf = this.getTextField();
                if (tf != null) tf.fontSize = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLabel.prototype, "editable", {
            get: function get() {
                if (this._titleObject && this._titleObject instanceof fgui.GTextInput) return this._titleObject.asTextInput.editable;else return false;
            },
            set: function set(val) {
                if (this._titleObject) this._titleObject.asTextInput.editable = val;
            },
            enumerable: false,
            configurable: true
        });
        GLabel.prototype.getTextField = function () {
            if (this._titleObject instanceof fgui.GTextField) return this._titleObject;else if (this._titleObject instanceof GLabel) return this._titleObject.getTextField();else if (this._titleObject instanceof fgui.GButton) return this._titleObject.getTextField();else return null;
        };
        GLabel.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.titleColor;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) return tf.strokeColor;else return 0;
                    }
                case fgui.ObjectPropID.FontSize:
                    return this.titleFontSize;
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GLabel.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.titleColor = value;
                    break;
                case fgui.ObjectPropID.OutlineColor:
                    {
                        var tf = this.getTextField();
                        if (tf) tf.strokeColor = value;
                    }
                    break;
                case fgui.ObjectPropID.FontSize:
                    this.titleFontSize = value;
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GLabel.prototype.constructExtension = function (buffer) {
            this._titleObject = this.getChild("title");
            this._iconObject = this.getChild("icon");
        };
        GLabel.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!buffer.seek(beginPos, 6)) return;
            if (buffer.readByte() != this.packageItem.objectType) return;
            var str;
            str = buffer.readS();
            if (str != null) this.title = str;
            str = buffer.readS();
            if (str != null) this.icon = str;
            if (buffer.readBool()) this.titleColor = buffer.readColor();
            var iv = buffer.readInt();
            if (iv != 0) this.titleFontSize = iv;
            if (buffer.readBool()) {
                var input = this.getTextField();
                if (input != null) {
                    str = buffer.readS();
                    if (str != null) input.promptText = str;
                    str = buffer.readS();
                    if (str != null) input.restrict = str;
                    iv = buffer.readInt();
                    if (iv != 0) input.maxLength = iv;
                    iv = buffer.readInt();
                    if (iv != 0) {}
                    if (buffer.readBool()) input.password = true;
                } else buffer.skip(13);
            }
        };
        return GLabel;
    }(fgui.GComponent);
    fgui.GLabel = GLabel;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GList = function (_super) {
        __extends(GList, _super);
        function GList() {
            var _this = _super.call(this) || this;
            _this.scrollItemToViewOnClick = true;
            _this.foldInvisibleItems = false;
            _this._lineCount = 0;
            _this._columnCount = 0;
            _this._lineGap = 0;
            _this._columnGap = 0;
            _this._lastSelectedIndex = 0;
            _this._numItems = 0;
            _this._realNumItems = 0;
            _this._firstIndex = 0;
            _this._curLineItemCount = 0;
            _this._curLineItemCount2 = 0;
            _this._virtualListChanged = 0;
            _this.itemInfoVer = 0;
            _this._node.name = "GList";
            _this._trackBounds = true;
            _this._pool = new fgui.GObjectPool();
            _this._layout = fgui.ListLayoutType.SingleColumn;
            _this._autoResizeItem = true;
            _this._lastSelectedIndex = -1;
            _this._selectionMode = fgui.ListSelectionMode.Single;
            _this.opaque = true;
            _this._align = fgui.AlignType.Left;
            _this._verticalAlign = fgui.VertAlignType.Top;
            return _this;
        }
        GList.prototype.dispose = function () {
            this._pool.clear();
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(GList.prototype, "layout", {
            get: function get() {
                return this._layout;
            },
            set: function set(value) {
                if (this._layout != value) {
                    this._layout = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "lineCount", {
            get: function get() {
                return this._lineCount;
            },
            set: function set(value) {
                if (this._lineCount != value) {
                    this._lineCount = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "columnCount", {
            get: function get() {
                return this._columnCount;
            },
            set: function set(value) {
                if (this._columnCount != value) {
                    this._columnCount = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "lineGap", {
            get: function get() {
                return this._lineGap;
            },
            set: function set(value) {
                if (this._lineGap != value) {
                    this._lineGap = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "columnGap", {
            get: function get() {
                return this._columnGap;
            },
            set: function set(value) {
                if (this._columnGap != value) {
                    this._columnGap = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "align", {
            get: function get() {
                return this._align;
            },
            set: function set(value) {
                if (this._align != value) {
                    this._align = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "verticalAlign", {
            get: function get() {
                return this._verticalAlign;
            },
            set: function set(value) {
                if (this._verticalAlign != value) {
                    this._verticalAlign = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "virtualItemSize", {
            get: function get() {
                return this._itemSize;
            },
            set: function set(value) {
                if (this._virtual) {
                    if (this._itemSize == null) this._itemSize = new cc.Size(0, 0);
                    this._itemSize.width = value.width;
                    this._itemSize.height = value.height;
                    this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "defaultItem", {
            get: function get() {
                return this._defaultItem;
            },
            set: function set(val) {
                this._defaultItem = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "autoResizeItem", {
            get: function get() {
                return this._autoResizeItem;
            },
            set: function set(value) {
                if (this._autoResizeItem != value) {
                    this._autoResizeItem = value;
                    this.setBoundsChangedFlag();
                    if (this._virtual) this.setVirtualListChangedFlag(true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "selectionMode", {
            get: function get() {
                return this._selectionMode;
            },
            set: function set(value) {
                this._selectionMode = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "selectionController", {
            get: function get() {
                return this._selectionController;
            },
            set: function set(value) {
                this._selectionController = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GList.prototype, "itemPool", {
            get: function get() {
                return this._pool;
            },
            enumerable: false,
            configurable: true
        });
        GList.prototype.getFromPool = function (url) {
            if (url === void 0) {
                url = null;
            }
            if (!url) url = this._defaultItem;
            var obj = this._pool.getObject(url);
            if (obj != null) obj.visible = true;
            return obj;
        };
        GList.prototype.returnToPool = function (obj) {
            this._pool.returnObject(obj);
        };
        GList.prototype.addChildAt = function (child, index) {
            if (index === void 0) {
                index = 0;
            }
            _super.prototype.addChildAt.call(this, child, index);
            if (child instanceof fgui.GButton) {
                var button = child;
                button.selected = false;
                button.changeStateOnClick = false;
            }
            child.on(fgui.Event.CLICK, this.onClickItem, this);
            return child;
        };
        GList.prototype.addItem = function (url) {
            if (url === void 0) {
                url = null;
            }
            if (!url) url = this._defaultItem;
            return this.addChild(fgui.UIPackage.createObjectFromURL(url));
        };
        GList.prototype.addItemFromPool = function (url) {
            if (url === void 0) {
                url = null;
            }
            return this.addChild(this.getFromPool(url));
        };
        GList.prototype.removeChildAt = function (index, dispose) {
            var child = _super.prototype.removeChildAt.call(this, index, dispose);
            child.off(fgui.Event.CLICK, this.onClickItem, this);
            return child;
        };
        GList.prototype.removeChildToPoolAt = function (index) {
            var child = _super.prototype.removeChildAt.call(this, index);
            this.returnToPool(child);
        };
        GList.prototype.removeChildToPool = function (child) {
            _super.prototype.removeChild.call(this, child);
            this.returnToPool(child);
        };
        GList.prototype.removeChildrenToPool = function (beginIndex, endIndex) {
            if (beginIndex == undefined) beginIndex = 0;
            if (endIndex == undefined) endIndex = -1;
            if (endIndex < 0 || endIndex >= this._children.length) endIndex = this._children.length - 1;
            for (var i = beginIndex; i <= endIndex; ++i) {
                this.removeChildToPoolAt(beginIndex);
            }
        };
        Object.defineProperty(GList.prototype, "selectedIndex", {
            get: function get() {
                var i;
                if (this._virtual) {
                    for (i = 0; i < this._realNumItems; i++) {
                        var ii = this._virtualItems[i];
                        if (ii.obj instanceof fgui.GButton && ii.obj.selected || ii.obj == null && ii.selected) {
                            if (this._loop) return i % this._numItems;else return i;
                        }
                    }
                } else {
                    var cnt = this._children.length;
                    for (i = 0; i < cnt; i++) {
                        var obj = this._children[i].asButton;
                        if (obj != null && obj.selected) return i;
                    }
                }
                return -1;
            },
            set: function set(value) {
                if (value >= 0 && value < this.numItems) {
                    if (this._selectionMode != fgui.ListSelectionMode.Single) this.clearSelection();
                    this.addSelection(value);
                } else this.clearSelection();
            },
            enumerable: false,
            configurable: true
        });
        GList.prototype.getSelection = function (result) {
            if (!result) result = new Array();
            var i;
            if (this._virtual) {
                for (i = 0; i < this._realNumItems; i++) {
                    var ii = this._virtualItems[i];
                    if (ii.obj instanceof fgui.GButton && ii.obj.selected || ii.obj == null && ii.selected) {
                        var j = i;
                        if (this._loop) {
                            j = i % this._numItems;
                            if (result.indexOf(j) != -1) continue;
                        }
                        result.push(j);
                    }
                }
            } else {
                var cnt = this._children.length;
                for (i = 0; i < cnt; i++) {
                    var obj = this._children[i].asButton;
                    if (obj != null && obj.selected) result.push(i);
                }
            }
            return result;
        };
        GList.prototype.addSelection = function (index, scrollItToView) {
            if (this._selectionMode == fgui.ListSelectionMode.None) return;
            this.checkVirtualList();
            if (this._selectionMode == fgui.ListSelectionMode.Single) this.clearSelection();
            if (scrollItToView) this.scrollToView(index);
            this._lastSelectedIndex = index;
            var obj = null;
            if (this._virtual) {
                var ii = this._virtualItems[index];
                if (ii.obj != null) obj = ii.obj.asButton;
                ii.selected = true;
            } else obj = this.getChildAt(index).asButton;
            if (obj != null && !obj.selected) {
                obj.selected = true;
                this.updateSelectionController(index);
            }
        };
        GList.prototype.removeSelection = function (index) {
            if (this._selectionMode == fgui.ListSelectionMode.None) return;
            var obj = null;
            if (this._virtual) {
                var ii = this._virtualItems[index];
                if (ii.obj != null) obj = ii.obj.asButton;
                ii.selected = false;
            } else obj = this.getChildAt(index).asButton;
            if (obj != null) obj.selected = false;
        };
        GList.prototype.clearSelection = function () {
            var i;
            if (this._virtual) {
                for (i = 0; i < this._realNumItems; i++) {
                    var ii = this._virtualItems[i];
                    if (ii.obj instanceof fgui.GButton) ii.obj.selected = false;
                    ii.selected = false;
                }
            } else {
                var cnt = this._children.length;
                for (i = 0; i < cnt; i++) {
                    var obj = this._children[i].asButton;
                    if (obj != null) obj.selected = false;
                }
            }
        };
        GList.prototype.clearSelectionExcept = function (g) {
            var i;
            if (this._virtual) {
                for (i = 0; i < this._realNumItems; i++) {
                    var ii = this._virtualItems[i];
                    if (ii.obj != g) {
                        if (ii.obj instanceof fgui.GButton) ii.obj.selected = false;
                        ii.selected = false;
                    }
                }
            } else {
                var cnt = this._children.length;
                for (i = 0; i < cnt; i++) {
                    var obj = this._children[i].asButton;
                    if (obj != null && obj != g) obj.selected = false;
                }
            }
        };
        GList.prototype.selectAll = function () {
            this.checkVirtualList();
            var last = -1;
            var i;
            if (this._virtual) {
                for (i = 0; i < this._realNumItems; i++) {
                    var ii = this._virtualItems[i];
                    if (ii.obj instanceof fgui.GButton && !ii.obj.selected) {
                        ii.obj.selected = true;
                        last = i;
                    }
                    ii.selected = true;
                }
            } else {
                var cnt = this._children.length;
                for (i = 0; i < cnt; i++) {
                    var obj = this._children[i].asButton;
                    if (obj != null && !obj.selected) {
                        obj.selected = true;
                        last = i;
                    }
                }
            }
            if (last != -1) this.updateSelectionController(last);
        };
        GList.prototype.selectNone = function () {
            this.clearSelection();
        };
        GList.prototype.selectReverse = function () {
            this.checkVirtualList();
            var last = -1;
            var i;
            if (this._virtual) {
                for (i = 0; i < this._realNumItems; i++) {
                    var ii = this._virtualItems[i];
                    if (ii.obj instanceof fgui.GButton) {
                        ii.obj.selected = !ii.obj.selected;
                        if (ii.obj.selected) last = i;
                    }
                    ii.selected = !ii.selected;
                }
            } else {
                var cnt = this._children.length;
                for (i = 0; i < cnt; i++) {
                    var obj = this._children[i].asButton;
                    if (obj != null) {
                        obj.selected = !obj.selected;
                        if (obj.selected) last = i;
                    }
                }
            }
            if (last != -1) this.updateSelectionController(last);
        };
        GList.prototype.handleArrowKey = function (dir) {
            var index = this.selectedIndex;
            if (index == -1) return;
            switch (dir) {
                case 1:
                    if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowVertical) {
                        index--;
                        if (index >= 0) {
                            this.clearSelection();
                            this.addSelection(index, true);
                        }
                    } else if (this._layout == fgui.ListLayoutType.FlowHorizontal || this._layout == fgui.ListLayoutType.Pagination) {
                        var current = this._children[index];
                        var k = 0;
                        for (var i = index - 1; i >= 0; i--) {
                            var obj = this._children[i];
                            if (obj.y != current.y) {
                                current = obj;
                                break;
                            }
                            k++;
                        }
                        for (; i >= 0; i--) {
                            obj = this._children[i];
                            if (obj.y != current.y) {
                                this.clearSelection();
                                this.addSelection(i + k + 1, true);
                                break;
                            }
                        }
                    }
                    break;
                case 3:
                    if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowHorizontal || this._layout == fgui.ListLayoutType.Pagination) {
                        index++;
                        if (index < this._children.length) {
                            this.clearSelection();
                            this.addSelection(index, true);
                        }
                    } else if (this._layout == fgui.ListLayoutType.FlowVertical) {
                        current = this._children[index];
                        k = 0;
                        var cnt = this._children.length;
                        for (i = index + 1; i < cnt; i++) {
                            obj = this._children[i];
                            if (obj.x != current.x) {
                                current = obj;
                                break;
                            }
                            k++;
                        }
                        for (; i < cnt; i++) {
                            obj = this._children[i];
                            if (obj.x != current.x) {
                                this.clearSelection();
                                this.addSelection(i - k - 1, true);
                                break;
                            }
                        }
                    }
                    break;
                case 5:
                    if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowVertical) {
                        index++;
                        if (index < this._children.length) {
                            this.clearSelection();
                            this.addSelection(index, true);
                        }
                    } else if (this._layout == fgui.ListLayoutType.FlowHorizontal || this._layout == fgui.ListLayoutType.Pagination) {
                        current = this._children[index];
                        k = 0;
                        cnt = this._children.length;
                        for (i = index + 1; i < cnt; i++) {
                            obj = this._children[i];
                            if (obj.y != current.y) {
                                current = obj;
                                break;
                            }
                            k++;
                        }
                        for (; i < cnt; i++) {
                            obj = this._children[i];
                            if (obj.y != current.y) {
                                this.clearSelection();
                                this.addSelection(i - k - 1, true);
                                break;
                            }
                        }
                    }
                    break;
                case 7:
                    if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowHorizontal || this._layout == fgui.ListLayoutType.Pagination) {
                        index--;
                        if (index >= 0) {
                            this.clearSelection();
                            this.addSelection(index, true);
                        }
                    } else if (this._layout == fgui.ListLayoutType.FlowVertical) {
                        current = this._children[index];
                        k = 0;
                        for (i = index - 1; i >= 0; i--) {
                            obj = this._children[i];
                            if (obj.x != current.x) {
                                current = obj;
                                break;
                            }
                            k++;
                        }
                        for (; i >= 0; i--) {
                            obj = this._children[i];
                            if (obj.x != current.x) {
                                this.clearSelection();
                                this.addSelection(i + k + 1, true);
                                break;
                            }
                        }
                    }
                    break;
            }
        };
        GList.prototype.onClickItem = function (evt) {
            if (this._scrollPane != null && this._scrollPane.isDragged) return;
            var item = fgui.GObject.cast(evt.currentTarget);
            this.setSelectionOnEvent(item, evt);
            if (this._scrollPane && this.scrollItemToViewOnClick) this._scrollPane.scrollToView(item, true);
            this.dispatchItemEvent(item, evt);
        };
        GList.prototype.dispatchItemEvent = function (item, evt) {
            this._node.emit(fgui.Event.CLICK_ITEM, item, evt);
        };
        GList.prototype.setSelectionOnEvent = function (item, evt) {
            if (!(item instanceof fgui.GButton) || this._selectionMode == fgui.ListSelectionMode.None) return;
            var dontChangeLastIndex = false;
            var button = item;
            var index = this.childIndexToItemIndex(this.getChildIndex(item));
            if (this._selectionMode == fgui.ListSelectionMode.Single) {
                if (!button.selected) {
                    this.clearSelectionExcept(button);
                    button.selected = true;
                }
            } else {
                if (evt.isShiftDown) {
                    if (!button.selected) {
                        if (this._lastSelectedIndex != -1) {
                            var min = Math.min(this._lastSelectedIndex, index);
                            var max = Math.max(this._lastSelectedIndex, index);
                            max = Math.min(max, this.numItems - 1);
                            var i;
                            if (this._virtual) {
                                for (i = min; i <= max; i++) {
                                    var ii = this._virtualItems[i];
                                    if (ii.obj instanceof fgui.GButton) ii.obj.selected = true;
                                    ii.selected = true;
                                }
                            } else {
                                for (i = min; i <= max; i++) {
                                    var obj = this.getChildAt(i).asButton;
                                    if (obj != null) obj.selected = true;
                                }
                            }
                            dontChangeLastIndex = true;
                        } else {
                            button.selected = true;
                        }
                    }
                } else if (evt.isCtrlDown || this._selectionMode == fgui.ListSelectionMode.Multiple_SingleClick) {
                    button.selected = !button.selected;
                } else {
                    if (!button.selected) {
                        this.clearSelectionExcept(button);
                        button.selected = true;
                    } else this.clearSelectionExcept(button);
                }
            }
            if (!dontChangeLastIndex) this._lastSelectedIndex = index;
            if (button.selected) this.updateSelectionController(index);
        };
        GList.prototype.resizeToFit = function (itemCount, minSize) {
            if (itemCount === void 0) {
                itemCount = Number.POSITIVE_INFINITY;
            }
            if (minSize === void 0) {
                minSize = 0;
            }
            this.ensureBoundsCorrect();
            var curCount = this.numItems;
            if (itemCount > curCount) itemCount = curCount;
            if (this._virtual) {
                var lineCount = Math.ceil(itemCount / this._curLineItemCount);
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) this.viewHeight = lineCount * this._itemSize.height + Math.max(0, lineCount - 1) * this._lineGap;else this.viewWidth = lineCount * this._itemSize.width + Math.max(0, lineCount - 1) * this._columnGap;
            } else if (itemCount == 0) {
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
            } else {
                var i = itemCount - 1;
                var obj = null;
                while (i >= 0) {
                    obj = this.getChildAt(i);
                    if (!this.foldInvisibleItems || obj.visible) break;
                    i--;
                }
                if (i < 0) {
                    if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
                } else {
                    var size = 0;
                    if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                        size = obj.y + obj.height;
                        if (size < minSize) size = minSize;
                        this.viewHeight = size;
                    } else {
                        size = obj.x + obj.width;
                        if (size < minSize) size = minSize;
                        this.viewWidth = size;
                    }
                }
            }
        };
        GList.prototype.getMaxItemWidth = function () {
            var cnt = this._children.length;
            var max = 0;
            for (var i = 0; i < cnt; i++) {
                var child = this.getChildAt(i);
                if (child.width > max) max = child.width;
            }
            return max;
        };
        GList.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            this.setBoundsChangedFlag();
            if (this._virtual) this.setVirtualListChangedFlag(true);
        };
        GList.prototype.handleControllerChanged = function (c) {
            _super.prototype.handleControllerChanged.call(this, c);
            if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };
        GList.prototype.updateSelectionController = function (index) {
            if (this._selectionController != null && !this._selectionController.changing && index < this._selectionController.pageCount) {
                var c = this._selectionController;
                this._selectionController = null;
                c.selectedIndex = index;
                this._selectionController = c;
            }
        };
        GList.prototype.getSnappingPosition = function (xValue, yValue, resultPoint) {
            if (this._virtual) {
                resultPoint = resultPoint || new cc.Vec2();
                var saved;
                var index;
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                    saved = yValue;
                    GList.pos_param = yValue;
                    index = this.getIndexOnPos1(false);
                    yValue = GList.pos_param;
                    if (index < this._virtualItems.length && saved - yValue > this._virtualItems[index].height / 2 && index < this._realNumItems) yValue += this._virtualItems[index].height + this._lineGap;
                } else if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowVertical) {
                    saved = xValue;
                    GList.pos_param = xValue;
                    index = this.getIndexOnPos2(false);
                    xValue = GList.pos_param;
                    if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
                } else {
                    saved = xValue;
                    GList.pos_param = xValue;
                    index = this.getIndexOnPos3(false);
                    xValue = GList.pos_param;
                    if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
                }
                resultPoint.x = xValue;
                resultPoint.y = yValue;
                return resultPoint;
            } else {
                return _super.prototype.getSnappingPosition.call(this, xValue, yValue, resultPoint);
            }
        };
        GList.prototype.scrollToView = function (index, ani, setFirst) {
            if (this._virtual) {
                if (this._numItems == 0) return;
                this.checkVirtualList();
                if (index >= this._virtualItems.length) throw "Invalid child index: " + index + ">" + this._virtualItems.length;
                if (this._loop) index = Math.floor(this._firstIndex / this._numItems) * this._numItems + index;
                var rect;
                var ii = this._virtualItems[index];
                var pos = 0;
                var i;
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                    for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) {
                        pos += this._virtualItems[i].height + this._lineGap;
                    }rect = new cc.Rect(0, pos, this._itemSize.width, ii.height);
                } else if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowVertical) {
                    for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) {
                        pos += this._virtualItems[i].width + this._columnGap;
                    }rect = new cc.Rect(pos, 0, ii.width, this._itemSize.height);
                } else {
                    var page = index / (this._curLineItemCount * this._curLineItemCount2);
                    rect = new cc.Rect(page * this.viewWidth + index % this._curLineItemCount * (ii.width + this._columnGap), index / this._curLineItemCount % this._curLineItemCount2 * (ii.height + this._lineGap), ii.width, ii.height);
                }
                setFirst = true;
                if (this._scrollPane != null) this._scrollPane.scrollToView(rect, ani, setFirst);
            } else {
                var obj = this.getChildAt(index);
                if (obj != null) {
                    if (this._scrollPane != null) this._scrollPane.scrollToView(obj, ani, setFirst);else if (this.parent != null && this.parent.scrollPane != null) this.parent.scrollPane.scrollToView(obj, ani, setFirst);
                }
            }
        };
        GList.prototype.getFirstChildInView = function () {
            return this.childIndexToItemIndex(_super.prototype.getFirstChildInView.call(this));
        };
        GList.prototype.childIndexToItemIndex = function (index) {
            if (!this._virtual) return index;
            if (this._layout == fgui.ListLayoutType.Pagination) {
                for (var i = this._firstIndex; i < this._realNumItems; i++) {
                    if (this._virtualItems[i].obj != null) {
                        index--;
                        if (index < 0) return i;
                    }
                }
                return index;
            } else {
                index += this._firstIndex;
                if (this._loop && this._numItems > 0) index = index % this._numItems;
                return index;
            }
        };
        GList.prototype.itemIndexToChildIndex = function (index) {
            if (!this._virtual) return index;
            if (this._layout == fgui.ListLayoutType.Pagination) {
                return this.getChildIndex(this._virtualItems[index].obj);
            } else {
                if (this._loop && this._numItems > 0) {
                    var j = this._firstIndex % this._numItems;
                    if (index >= j) index = index - j;else index = this._numItems - j + index;
                } else index -= this._firstIndex;
                return index;
            }
        };
        GList.prototype.setVirtual = function () {
            this._setVirtual(false);
        };
        GList.prototype.setVirtualAndLoop = function () {
            this._setVirtual(true);
        };
        GList.prototype._setVirtual = function (loop) {
            if (!this._virtual) {
                if (this._scrollPane == null) throw "Virtual list must be scrollable!";
                if (loop) {
                    if (this._layout == fgui.ListLayoutType.FlowHorizontal || this._layout == fgui.ListLayoutType.FlowVertical) throw "Loop list is not supported for FlowHorizontal or FlowVertical layout!";
                    this._scrollPane.bouncebackEffect = false;
                }
                this._virtual = true;
                this._loop = loop;
                this._virtualItems = new Array();
                this.removeChildrenToPool();
                if (this._itemSize == null) {
                    this._itemSize = new cc.Size(0, 0);
                    var obj = this.getFromPool(null);
                    if (obj == null) {
                        throw "Virtual List must have a default list item resource.";
                    } else {
                        this._itemSize.width = obj.width;
                        this._itemSize.height = obj.height;
                    }
                    this.returnToPool(obj);
                }
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                    this._scrollPane.scrollStep = this._itemSize.height;
                    if (this._loop) this._scrollPane._loop = 2;
                } else {
                    this._scrollPane.scrollStep = this._itemSize.width;
                    if (this._loop) this._scrollPane._loop = 1;
                }
                this._node.on(fgui.Event.SCROLL, this.__scrolled, this);
                this.setVirtualListChangedFlag(true);
            }
        };
        Object.defineProperty(GList.prototype, "numItems", {
            get: function get() {
                if (this._virtual) return this._numItems;else return this._children.length;
            },
            set: function set(value) {
                if (this._virtual) {
                    if (this.itemRenderer == null) throw "Set itemRenderer first!";
                    this._numItems = value;
                    if (this._loop) this._realNumItems = this._numItems * 6;else this._realNumItems = this._numItems;
                    var oldCount = this._virtualItems.length;
                    if (this._realNumItems > oldCount) {
                        for (i = oldCount; i < this._realNumItems; i++) {
                            var ii = new ItemInfo();
                            ii.width = this._itemSize.width;
                            ii.height = this._itemSize.height;
                            this._virtualItems.push(ii);
                        }
                    } else {
                        for (i = this._realNumItems; i < oldCount; i++) {
                            this._virtualItems[i].selected = false;
                        }
                    }
                    if (this._virtualListChanged != 0) this._partner.unschedule(this._refreshVirtualList);
                    this._refreshVirtualList();
                } else {
                    var cnt = this._children.length;
                    if (value > cnt) {
                        for (var i = cnt; i < value; i++) {
                            if (this.itemProvider == null) this.addItemFromPool();else this.addItemFromPool(this.itemProvider(i));
                        }
                    } else {
                        this.removeChildrenToPool(value, cnt);
                    }
                    if (this.itemRenderer != null) {
                        for (i = 0; i < value; i++) {
                            this.itemRenderer(i, this.getChildAt(i));
                        }
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        GList.prototype.refreshVirtualList = function () {
            this.setVirtualListChangedFlag(false);
        };
        GList.prototype.checkVirtualList = function () {
            if (this._virtualListChanged != 0) {
                this._refreshVirtualList();
                this._partner.unschedule(this._refreshVirtualList);
            }
        };
        GList.prototype.setVirtualListChangedFlag = function (layoutChanged) {
            if (layoutChanged) this._virtualListChanged = 2;else if (this._virtualListChanged == 0) this._virtualListChanged = 1;
            this._partner.callLater(this._refreshVirtualList);
        };
        GList.prototype._refreshVirtualList = function (dt) {
            if (!isNaN(dt)) {
                var _t = this.node["$gobj"];
                _t._refreshVirtualList();
                return;
            }
            var layoutChanged = this._virtualListChanged == 2;
            this._virtualListChanged = 0;
            this._eventLocked = true;
            if (layoutChanged) {
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.SingleRow) this._curLineItemCount = 1;else if (this._layout == fgui.ListLayoutType.FlowHorizontal) {
                    if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                        this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                        if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
                    }
                } else if (this._layout == fgui.ListLayoutType.FlowVertical) {
                    if (this._lineCount > 0) this._curLineItemCount = this._lineCount;else {
                        this._curLineItemCount = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                        if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
                    }
                } else {
                    if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                        this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                        if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
                    }
                    if (this._lineCount > 0) this._curLineItemCount2 = this._lineCount;else {
                        this._curLineItemCount2 = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                        if (this._curLineItemCount2 <= 0) this._curLineItemCount2 = 1;
                    }
                }
            }
            var ch = 0,
                cw = 0;
            if (this._realNumItems > 0) {
                var i;
                var len = Math.ceil(this._realNumItems / this._curLineItemCount) * this._curLineItemCount;
                var len2 = Math.min(this._curLineItemCount, this._realNumItems);
                if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                    for (i = 0; i < len; i += this._curLineItemCount) {
                        ch += this._virtualItems[i].height + this._lineGap;
                    }if (ch > 0) ch -= this._lineGap;
                    if (this._autoResizeItem) cw = this._scrollPane.viewWidth;else {
                        for (i = 0; i < len2; i++) {
                            cw += this._virtualItems[i].width + this._columnGap;
                        }if (cw > 0) cw -= this._columnGap;
                    }
                } else if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowVertical) {
                    for (i = 0; i < len; i += this._curLineItemCount) {
                        cw += this._virtualItems[i].width + this._columnGap;
                    }if (cw > 0) cw -= this._columnGap;
                    if (this._autoResizeItem) ch = this._scrollPane.viewHeight;else {
                        for (i = 0; i < len2; i++) {
                            ch += this._virtualItems[i].height + this._lineGap;
                        }if (ch > 0) ch -= this._lineGap;
                    }
                } else {
                    var pageCount = Math.ceil(len / (this._curLineItemCount * this._curLineItemCount2));
                    cw = pageCount * this.viewWidth;
                    ch = this.viewHeight;
                }
            }
            this.handleAlign(cw, ch);
            this._scrollPane.setContentSize(cw, ch);
            this._eventLocked = false;
            this.handleScroll(true);
        };
        GList.prototype.__scrolled = function (evt) {
            this.handleScroll(false);
        };
        GList.prototype.getIndexOnPos1 = function (forceUpdate) {
            if (this._realNumItems < this._curLineItemCount) {
                GList.pos_param = 0;
                return 0;
            }
            var i;
            var pos2;
            var pos3;
            if (this.numChildren > 0 && !forceUpdate) {
                pos2 = this.getChildAt(0).y;
                if (pos2 > GList.pos_param) {
                    for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                        pos2 -= this._virtualItems[i].height + this._lineGap;
                        if (pos2 <= GList.pos_param) {
                            GList.pos_param = pos2;
                            return i;
                        }
                    }
                    GList.pos_param = 0;
                    return 0;
                } else {
                    for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                        pos3 = pos2 + this._virtualItems[i].height + this._lineGap;
                        if (pos3 > GList.pos_param) {
                            GList.pos_param = pos2;
                            return i;
                        }
                        pos2 = pos3;
                    }
                    GList.pos_param = pos2;
                    return this._realNumItems - this._curLineItemCount;
                }
            } else {
                pos2 = 0;
                for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
                    pos3 = pos2 + this._virtualItems[i].height + this._lineGap;
                    if (pos3 > GList.pos_param) {
                        GList.pos_param = pos2;
                        return i;
                    }
                    pos2 = pos3;
                }
                GList.pos_param = pos2;
                return this._realNumItems - this._curLineItemCount;
            }
        };
        GList.prototype.getIndexOnPos2 = function (forceUpdate) {
            if (this._realNumItems < this._curLineItemCount) {
                GList.pos_param = 0;
                return 0;
            }
            var i;
            var pos2;
            var pos3;
            if (this.numChildren > 0 && !forceUpdate) {
                pos2 = this.getChildAt(0).x;
                if (pos2 > GList.pos_param) {
                    for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                        pos2 -= this._virtualItems[i].width + this._columnGap;
                        if (pos2 <= GList.pos_param) {
                            GList.pos_param = pos2;
                            return i;
                        }
                    }
                    GList.pos_param = 0;
                    return 0;
                } else {
                    for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                        pos3 = pos2 + this._virtualItems[i].width + this._columnGap;
                        if (pos3 > GList.pos_param) {
                            GList.pos_param = pos2;
                            return i;
                        }
                        pos2 = pos3;
                    }
                    GList.pos_param = pos2;
                    return this._realNumItems - this._curLineItemCount;
                }
            } else {
                pos2 = 0;
                for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
                    pos3 = pos2 + this._virtualItems[i].width + this._columnGap;
                    if (pos3 > GList.pos_param) {
                        GList.pos_param = pos2;
                        return i;
                    }
                    pos2 = pos3;
                }
                GList.pos_param = pos2;
                return this._realNumItems - this._curLineItemCount;
            }
        };
        GList.prototype.getIndexOnPos3 = function (forceUpdate) {
            if (this._realNumItems < this._curLineItemCount) {
                GList.pos_param = 0;
                return 0;
            }
            var viewWidth = this.viewWidth;
            var page = Math.floor(GList.pos_param / viewWidth);
            var startIndex = page * (this._curLineItemCount * this._curLineItemCount2);
            var pos2 = page * viewWidth;
            var i;
            var pos3;
            for (i = 0; i < this._curLineItemCount; i++) {
                pos3 = pos2 + this._virtualItems[startIndex + i].width + this._columnGap;
                if (pos3 > GList.pos_param) {
                    GList.pos_param = pos2;
                    return startIndex + i;
                }
                pos2 = pos3;
            }
            GList.pos_param = pos2;
            return startIndex + this._curLineItemCount - 1;
        };
        GList.prototype.handleScroll = function (forceUpdate) {
            if (this._eventLocked) return;
            if (this._layout == fgui.ListLayoutType.SingleColumn || this._layout == fgui.ListLayoutType.FlowHorizontal) {
                var enterCounter = 0;
                while (this.handleScroll1(forceUpdate)) {
                    enterCounter++;
                    forceUpdate = false;
                    if (enterCounter > 20) {
                        console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                        break;
                    }
                }
                this.handleArchOrder1();
            } else if (this._layout == fgui.ListLayoutType.SingleRow || this._layout == fgui.ListLayoutType.FlowVertical) {
                enterCounter = 0;
                while (this.handleScroll2(forceUpdate)) {
                    enterCounter++;
                    forceUpdate = false;
                    if (enterCounter > 20) {
                        console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                        break;
                    }
                }
                this.handleArchOrder2();
            } else {
                this.handleScroll3(forceUpdate);
            }
            this._boundsChanged = false;
        };
        GList.prototype.handleScroll1 = function (forceUpdate) {
            var pos = this._scrollPane.scrollingPosY;
            var max = pos + this._scrollPane.viewHeight;
            var end = max == this._scrollPane.contentHeight;
            GList.pos_param = pos;
            var newFirstIndex = this.getIndexOnPos1(forceUpdate);
            pos = GList.pos_param;
            if (newFirstIndex == this._firstIndex && !forceUpdate) {
                return false;
            }
            var oldFirstIndex = this._firstIndex;
            this._firstIndex = newFirstIndex;
            var curIndex = newFirstIndex;
            var forward = oldFirstIndex > newFirstIndex;
            var childCount = this.numChildren;
            var lastIndex = oldFirstIndex + childCount - 1;
            var reuseIndex = forward ? lastIndex : oldFirstIndex;
            var curX = 0,
                curY = pos;
            var needRender;
            var deltaSize = 0;
            var firstItemDeltaSize = 0;
            var url = this.defaultItem;
            var ii, ii2;
            var i, j;
            var partSize = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
            this.itemInfoVer++;
            while (curIndex < this._realNumItems && (end || curY < max)) {
                ii = this._virtualItems[curIndex];
                if (ii.obj == null || forceUpdate) {
                    if (this.itemProvider != null) {
                        url = this.itemProvider(curIndex % this._numItems);
                        if (url == null) url = this._defaultItem;
                        url = fgui.UIPackage.normalizeURL(url);
                    }
                    if (ii.obj != null && ii.obj.resourceURL != url) {
                        if (ii.obj instanceof fgui.GButton) ii.selected = ii.obj.selected;
                        this.removeChildToPool(ii.obj);
                        ii.obj = null;
                    }
                }
                if (ii.obj == null) {
                    if (forward) {
                        for (j = reuseIndex; j >= oldFirstIndex; j--) {
                            ii2 = this._virtualItems[j];
                            if (ii2.obj != null && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                                if (ii2.obj instanceof fgui.GButton) ii2.selected = ii2.obj.selected;
                                ii.obj = ii2.obj;
                                ii2.obj = null;
                                if (j == reuseIndex) reuseIndex--;
                                break;
                            }
                        }
                    } else {
                        for (j = reuseIndex; j <= lastIndex; j++) {
                            ii2 = this._virtualItems[j];
                            if (ii2.obj != null && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                                if (ii2.obj instanceof fgui.GButton) ii2.selected = ii2.obj.selected;
                                ii.obj = ii2.obj;
                                ii2.obj = null;
                                if (j == reuseIndex) reuseIndex++;
                                break;
                            }
                        }
                    }
                    if (ii.obj != null) {
                        this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
                    } else {
                        ii.obj = this._pool.getObject(url);
                        if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
                    }
                    if (ii.obj instanceof fgui.GButton) ii.obj.selected = ii.selected;
                    needRender = true;
                } else needRender = forceUpdate;
                if (needRender) {
                    if (this._autoResizeItem && (this._layout == fgui.ListLayoutType.SingleColumn || this._columnCount > 0)) ii.obj.setSize(partSize, ii.obj.height, true);
                    this.itemRenderer(curIndex % this._numItems, ii.obj);
                    if (curIndex % this._curLineItemCount == 0) {
                        deltaSize += Math.ceil(ii.obj.height) - ii.height;
                        if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                            firstItemDeltaSize = Math.ceil(ii.obj.height) - ii.height;
                        }
                    }
                    ii.width = Math.ceil(ii.obj.width);
                    ii.height = Math.ceil(ii.obj.height);
                }
                ii.updateFlag = this.itemInfoVer;
                ii.obj.setPosition(curX, curY);
                if (curIndex == newFirstIndex) max += ii.height;
                curX += ii.width + this._columnGap;
                if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
                    curX = 0;
                    curY += ii.height + this._lineGap;
                }
                curIndex++;
            }
            for (i = 0; i < childCount; i++) {
                ii = this._virtualItems[oldFirstIndex + i];
                if (ii.updateFlag != this.itemInfoVer && ii.obj != null) {
                    if (ii.obj instanceof fgui.GButton) ii.selected = ii.obj.selected;
                    this.removeChildToPool(ii.obj);
                    ii.obj = null;
                }
            }
            childCount = this._children.length;
            for (i = 0; i < childCount; i++) {
                var obj = this._virtualItems[newFirstIndex + i].obj;
                if (this._children[i] != obj) this.setChildIndex(obj, i);
            }
            if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(0, deltaSize, 0, firstItemDeltaSize);
            if (curIndex > 0 && this.numChildren > 0 && this._container.y <= 0 && this.getChildAt(0).y > -this._container.y) return true;else return false;
        };
        GList.prototype.handleScroll2 = function (forceUpdate) {
            var pos = this._scrollPane.scrollingPosX;
            var max = pos + this._scrollPane.viewWidth;
            var end = pos == this._scrollPane.contentWidth;
            GList.pos_param = pos;
            var newFirstIndex = this.getIndexOnPos2(forceUpdate);
            pos = GList.pos_param;
            if (newFirstIndex == this._firstIndex && !forceUpdate) {
                return false;
            }
            var oldFirstIndex = this._firstIndex;
            this._firstIndex = newFirstIndex;
            var curIndex = newFirstIndex;
            var forward = oldFirstIndex > newFirstIndex;
            var childCount = this.numChildren;
            var lastIndex = oldFirstIndex + childCount - 1;
            var reuseIndex = forward ? lastIndex : oldFirstIndex;
            var curX = pos,
                curY = 0;
            var needRender;
            var deltaSize = 0;
            var firstItemDeltaSize = 0;
            var url = this.defaultItem;
            var ii, ii2;
            var i, j;
            var partSize = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
            this.itemInfoVer++;
            while (curIndex < this._realNumItems && (end || curX < max)) {
                ii = this._virtualItems[curIndex];
                if (ii.obj == null || forceUpdate) {
                    if (this.itemProvider != null) {
                        url = this.itemProvider(curIndex % this._numItems);
                        if (url == null) url = this._defaultItem;
                        url = fgui.UIPackage.normalizeURL(url);
                    }
                    if (ii.obj != null && ii.obj.resourceURL != url) {
                        if (ii.obj instanceof fgui.GButton) ii.selected = ii.obj.selected;
                        this.removeChildToPool(ii.obj);
                        ii.obj = null;
                    }
                }
                if (ii.obj == null) {
                    if (forward) {
                        for (j = reuseIndex; j >= oldFirstIndex; j--) {
                            ii2 = this._virtualItems[j];
                            if (ii2.obj != null && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                                if (ii2.obj instanceof fgui.GButton) ii2.selected = ii2.obj.selected;
                                ii.obj = ii2.obj;
                                ii2.obj = null;
                                if (j == reuseIndex) reuseIndex--;
                                break;
                            }
                        }
                    } else {
                        for (j = reuseIndex; j <= lastIndex; j++) {
                            ii2 = this._virtualItems[j];
                            if (ii2.obj != null && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                                if (ii2.obj instanceof fgui.GButton) ii2.selected = ii2.obj.selected;
                                ii.obj = ii2.obj;
                                ii2.obj = null;
                                if (j == reuseIndex) reuseIndex++;
                                break;
                            }
                        }
                    }
                    if (ii.obj != null) {
                        this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
                    } else {
                        ii.obj = this._pool.getObject(url);
                        if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
                    }
                    if (ii.obj instanceof fgui.GButton) ii.obj.selected = ii.selected;
                    needRender = true;
                } else needRender = forceUpdate;
                if (needRender) {
                    if (this._autoResizeItem && (this._layout == fgui.ListLayoutType.SingleRow || this._lineCount > 0)) ii.obj.setSize(ii.obj.width, partSize, true);
                    this.itemRenderer(curIndex % this._numItems, ii.obj);
                    if (curIndex % this._curLineItemCount == 0) {
                        deltaSize += Math.ceil(ii.obj.width) - ii.width;
                        if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                            firstItemDeltaSize = Math.ceil(ii.obj.width) - ii.width;
                        }
                    }
                    ii.width = Math.ceil(ii.obj.width);
                    ii.height = Math.ceil(ii.obj.height);
                }
                ii.updateFlag = this.itemInfoVer;
                ii.obj.setPosition(curX, curY);
                if (curIndex == newFirstIndex) max += ii.width;
                curY += ii.height + this._lineGap;
                if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
                    curY = 0;
                    curX += ii.width + this._columnGap;
                }
                curIndex++;
            }
            for (i = 0; i < childCount; i++) {
                ii = this._virtualItems[oldFirstIndex + i];
                if (ii.updateFlag != this.itemInfoVer && ii.obj != null) {
                    if (ii.obj instanceof fgui.GButton) ii.selected = ii.obj.selected;
                    this.removeChildToPool(ii.obj);
                    ii.obj = null;
                }
            }
            childCount = this._children.length;
            for (i = 0; i < childCount; i++) {
                var obj = this._virtualItems[newFirstIndex + i].obj;
                if (this._children[i] != obj) this.setChildIndex(obj, i);
            }
            if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(deltaSize, 0, firstItemDeltaSize, 0);
            if (curIndex > 0 && this.numChildren > 0 && this._container.x <= 0 && this.getChildAt(0).x > -this._container.x) return true;else return false;
        };
        GList.prototype.handleScroll3 = function (forceUpdate) {
            var pos = this._scrollPane.scrollingPosX;
            GList.pos_param = pos;
            var newFirstIndex = this.getIndexOnPos3(forceUpdate);
            pos = GList.pos_param;
            if (newFirstIndex == this._firstIndex && !forceUpdate) return;
            var oldFirstIndex = this._firstIndex;
            this._firstIndex = newFirstIndex;
            var reuseIndex = oldFirstIndex;
            var virtualItemCount = this._virtualItems.length;
            var pageSize = this._curLineItemCount * this._curLineItemCount2;
            var startCol = newFirstIndex % this._curLineItemCount;
            var viewWidth = this.viewWidth;
            var page = Math.floor(newFirstIndex / pageSize);
            var startIndex = page * pageSize;
            var lastIndex = startIndex + pageSize * 2;
            var needRender;
            var i;
            var ii, ii2;
            var col;
            var url = this._defaultItem;
            var partWidth = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
            var partHeight = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount2 - 1)) / this._curLineItemCount2;
            this.itemInfoVer++;
            for (i = startIndex; i < lastIndex; i++) {
                if (i >= this._realNumItems) continue;
                col = i % this._curLineItemCount;
                if (i - startIndex < pageSize) {
                    if (col < startCol) continue;
                } else {
                    if (col > startCol) continue;
                }
                ii = this._virtualItems[i];
                ii.updateFlag = this.itemInfoVer;
            }
            var lastObj = null;
            var insertIndex = 0;
            for (i = startIndex; i < lastIndex; i++) {
                if (i >= this._realNumItems) continue;
                ii = this._virtualItems[i];
                if (ii.updateFlag != this.itemInfoVer) continue;
                if (ii.obj == null) {
                    while (reuseIndex < virtualItemCount) {
                        ii2 = this._virtualItems[reuseIndex];
                        if (ii2.obj != null && ii2.updateFlag != this.itemInfoVer) {
                            if (ii2.obj instanceof fgui.GButton) ii2.selected = ii2.obj.selected;
                            ii.obj = ii2.obj;
                            ii2.obj = null;
                            break;
                        }
                        reuseIndex++;
                    }
                    if (insertIndex == -1) insertIndex = this.getChildIndex(lastObj) + 1;
                    if (ii.obj == null) {
                        if (this.itemProvider != null) {
                            url = this.itemProvider(i % this._numItems);
                            if (url == null) url = this._defaultItem;
                            url = fgui.UIPackage.normalizeURL(url);
                        }
                        ii.obj = this._pool.getObject(url);
                        this.addChildAt(ii.obj, insertIndex);
                    } else {
                        insertIndex = this.setChildIndexBefore(ii.obj, insertIndex);
                    }
                    insertIndex++;
                    if (ii.obj instanceof fgui.GButton) ii.obj.selected = ii.selected;
                    needRender = true;
                } else {
                    needRender = forceUpdate;
                    insertIndex = -1;
                    lastObj = ii.obj;
                }
                if (needRender) {
                    if (this._autoResizeItem) {
                        if (this._curLineItemCount == this._columnCount && this._curLineItemCount2 == this._lineCount) ii.obj.setSize(partWidth, partHeight, true);else if (this._curLineItemCount == this._columnCount) ii.obj.setSize(partWidth, ii.obj.height, true);else if (this._curLineItemCount2 == this._lineCount) ii.obj.setSize(ii.obj.width, partHeight, true);
                    }
                    this.itemRenderer(i % this._numItems, ii.obj);
                    ii.width = Math.ceil(ii.obj.width);
                    ii.height = Math.ceil(ii.obj.height);
                }
            }
            var borderX = startIndex / pageSize * viewWidth;
            var xx = borderX;
            var yy = 0;
            var lineHeight = 0;
            for (i = startIndex; i < lastIndex; i++) {
                if (i >= this._realNumItems) continue;
                ii = this._virtualItems[i];
                if (ii.updateFlag == this.itemInfoVer) ii.obj.setPosition(xx, yy);
                if (ii.height > lineHeight) lineHeight = ii.height;
                if (i % this._curLineItemCount == this._curLineItemCount - 1) {
                    xx = borderX;
                    yy += lineHeight + this._lineGap;
                    lineHeight = 0;
                    if (i == startIndex + pageSize - 1) {
                        borderX += viewWidth;
                        xx = borderX;
                        yy = 0;
                    }
                } else xx += ii.width + this._columnGap;
            }
            for (i = reuseIndex; i < virtualItemCount; i++) {
                ii = this._virtualItems[i];
                if (ii.updateFlag != this.itemInfoVer && ii.obj != null) {
                    if (ii.obj instanceof fgui.GButton) ii.selected = ii.obj.selected;
                    this.removeChildToPool(ii.obj);
                    ii.obj = null;
                }
            }
        };
        GList.prototype.handleArchOrder1 = function () {
            if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Arch) {
                var mid = this._scrollPane.posY + this.viewHeight / 2;
                var minDist = Number.POSITIVE_INFINITY;
                var dist = 0;
                var apexIndex = 0;
                var cnt = this.numChildren;
                for (var i = 0; i < cnt; i++) {
                    var obj = this.getChildAt(i);
                    if (!this.foldInvisibleItems || obj.visible) {
                        dist = Math.abs(mid - obj.y - obj.height / 2);
                        if (dist < minDist) {
                            minDist = dist;
                            apexIndex = i;
                        }
                    }
                }
                this.apexIndex = apexIndex;
            }
        };
        GList.prototype.handleArchOrder2 = function () {
            if (this._childrenRenderOrder == fgui.ChildrenRenderOrder.Arch) {
                var mid = this._scrollPane.posX + this.viewWidth / 2;
                var minDist = Number.POSITIVE_INFINITY;
                var dist = 0;
                var apexIndex = 0;
                var cnt = this.numChildren;
                for (var i = 0; i < cnt; i++) {
                    var obj = this.getChildAt(i);
                    if (!this.foldInvisibleItems || obj.visible) {
                        dist = Math.abs(mid - obj.x - obj.width / 2);
                        if (dist < minDist) {
                            minDist = dist;
                            apexIndex = i;
                        }
                    }
                }
                this.apexIndex = apexIndex;
            }
        };
        GList.prototype.handleAlign = function (contentWidth, contentHeight) {
            var newOffsetX = 0;
            var newOffsetY = 0;
            if (contentHeight < this.viewHeight) {
                if (this._verticalAlign == fgui.VertAlignType.Middle) newOffsetY = Math.floor((this.viewHeight - contentHeight) / 2);else if (this._verticalAlign == fgui.VertAlignType.Bottom) newOffsetY = this.viewHeight - contentHeight;
            }
            if (contentWidth < this.viewWidth) {
                if (this._align == fgui.AlignType.Center) newOffsetX = Math.floor((this.viewWidth - contentWidth) / 2);else if (this._align == fgui.AlignType.Right) newOffsetX = this.viewWidth - contentWidth;
            }
            if (newOffsetX != this._alignOffset.x || newOffsetY != this._alignOffset.y) {
                this._alignOffset.x = newOffsetX;
                this._alignOffset.y = newOffsetY;
                if (this._scrollPane != null) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
            }
        };
        GList.prototype.updateBounds = function () {
            if (this._virtual) return;
            var i;
            var child;
            var curX = 0;
            var curY = 0;
            var maxWidth = 0;
            var maxHeight = 0;
            var cw = 0,
                ch = 0;
            var j = 0;
            var page = 0;
            var k = 0;
            var cnt = this._children.length;
            var viewWidth = this.viewWidth;
            var viewHeight = this.viewHeight;
            var lineSize = 0;
            var lineStart = 0;
            var ratio = 0;
            if (this._layout == fgui.ListLayoutType.SingleColumn) {
                for (i = 0; i < cnt; i++) {
                    child = this.getChildAt(i);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    if (curY != 0) curY += this._lineGap;
                    child.y = curY;
                    if (this._autoResizeItem) child.setSize(viewWidth, child.height, true);
                    curY += Math.ceil(child.height);
                    if (child.width > maxWidth) maxWidth = child.width;
                }
                ch = curY;
                if (ch <= viewHeight && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.vtScrollBar) {
                    viewWidth += this._scrollPane.vtScrollBar.width;
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        child.setSize(viewWidth, child.height, true);
                        if (child.width > maxWidth) maxWidth = child.width;
                    }
                }
                cw = Math.ceil(maxWidth);
            } else if (this._layout == fgui.ListLayoutType.SingleRow) {
                for (i = 0; i < cnt; i++) {
                    child = this.getChildAt(i);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    if (curX != 0) curX += this._columnGap;
                    child.x = curX;
                    if (this._autoResizeItem) child.setSize(child.width, viewHeight, true);
                    curX += Math.ceil(child.width);
                    if (child.height > maxHeight) maxHeight = child.height;
                }
                cw = curX;
                if (cw <= viewWidth && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.hzScrollBar) {
                    viewHeight += this._scrollPane.hzScrollBar.height;
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        child.setSize(child.width, viewHeight, true);
                        if (child.height > maxHeight) maxHeight = child.height;
                    }
                }
                ch = Math.ceil(maxHeight);
            } else if (this._layout == fgui.ListLayoutType.FlowHorizontal) {
                if (this._autoResizeItem && this._columnCount > 0) {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        lineSize += child.sourceWidth;
                        j++;
                        if (j == this._columnCount || i == cnt - 1) {
                            ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                            curX = 0;
                            for (j = lineStart; j <= i; j++) {
                                child = this.getChildAt(j);
                                if (this.foldInvisibleItems && !child.visible) continue;
                                child.setPosition(curX, curY);
                                if (j < i) {
                                    child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), child.height, true);
                                    curX += Math.ceil(child.width) + this._columnGap;
                                } else {
                                    child.setSize(viewWidth - curX, child.height, true);
                                }
                                if (child.height > maxHeight) maxHeight = child.height;
                            }
                            curY += Math.ceil(maxHeight) + this._lineGap;
                            maxHeight = 0;
                            j = 0;
                            lineStart = i + 1;
                            lineSize = 0;
                        }
                    }
                    ch = curY + Math.ceil(maxHeight);
                    cw = viewWidth;
                } else {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        if (curX != 0) curX += this._columnGap;
                        if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                            curX = 0;
                            curY += Math.ceil(maxHeight) + this._lineGap;
                            maxHeight = 0;
                            j = 0;
                        }
                        child.setPosition(curX, curY);
                        curX += Math.ceil(child.width);
                        if (curX > maxWidth) maxWidth = curX;
                        if (child.height > maxHeight) maxHeight = child.height;
                        j++;
                    }
                    ch = curY + Math.ceil(maxHeight);
                    cw = Math.ceil(maxWidth);
                }
            } else if (this._layout == fgui.ListLayoutType.FlowVertical) {
                if (this._autoResizeItem && this._lineCount > 0) {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        lineSize += child.sourceHeight;
                        j++;
                        if (j == this._lineCount || i == cnt - 1) {
                            ratio = (viewHeight - lineSize - (j - 1) * this._lineGap) / lineSize;
                            curY = 0;
                            for (j = lineStart; j <= i; j++) {
                                child = this.getChildAt(j);
                                if (this.foldInvisibleItems && !child.visible) continue;
                                child.setPosition(curX, curY);
                                if (j < i) {
                                    child.setSize(child.width, child.sourceHeight + Math.round(child.sourceHeight * ratio), true);
                                    curY += Math.ceil(child.height) + this._lineGap;
                                } else {
                                    child.setSize(child.width, viewHeight - curY, true);
                                }
                                if (child.width > maxWidth) maxWidth = child.width;
                            }
                            curX += Math.ceil(maxWidth) + this._columnGap;
                            maxWidth = 0;
                            j = 0;
                            lineStart = i + 1;
                            lineSize = 0;
                        }
                    }
                    cw = curX + Math.ceil(maxWidth);
                    ch = viewHeight;
                } else {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        if (curY != 0) curY += this._lineGap;
                        if (this._lineCount != 0 && j >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0) {
                            curY = 0;
                            curX += Math.ceil(maxWidth) + this._columnGap;
                            maxWidth = 0;
                            j = 0;
                        }
                        child.setPosition(curX, curY);
                        curY += Math.ceil(child.height);
                        if (curY > maxHeight) maxHeight = curY;
                        if (child.width > maxWidth) maxWidth = child.width;
                        j++;
                    }
                    cw = curX + Math.ceil(maxWidth);
                    ch = Math.ceil(maxHeight);
                }
            } else {
                var eachHeight;
                if (this._autoResizeItem && this._lineCount > 0) eachHeight = Math.floor((viewHeight - (this._lineCount - 1) * this._lineGap) / this._lineCount);
                if (this._autoResizeItem && this._columnCount > 0) {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        if (j == 0 && (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + (this._lineCount > 0 ? eachHeight : child.height) > viewHeight)) {
                            page++;
                            curY = 0;
                            k = 0;
                        }
                        lineSize += child.sourceWidth;
                        j++;
                        if (j == this._columnCount || i == cnt - 1) {
                            ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                            curX = 0;
                            for (j = lineStart; j <= i; j++) {
                                child = this.getChildAt(j);
                                if (this.foldInvisibleItems && !child.visible) continue;
                                child.setPosition(page * viewWidth + curX, curY);
                                if (j < i) {
                                    child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), this._lineCount > 0 ? eachHeight : child.height, true);
                                    curX += Math.ceil(child.width) + this._columnGap;
                                } else {
                                    child.setSize(viewWidth - curX, this._lineCount > 0 ? eachHeight : child.height, true);
                                }
                                if (child.height > maxHeight) maxHeight = child.height;
                            }
                            curY += Math.ceil(maxHeight) + this._lineGap;
                            maxHeight = 0;
                            j = 0;
                            lineStart = i + 1;
                            lineSize = 0;
                            k++;
                        }
                    }
                } else {
                    for (i = 0; i < cnt; i++) {
                        child = this.getChildAt(i);
                        if (this.foldInvisibleItems && !child.visible) continue;
                        if (curX != 0) curX += this._columnGap;
                        if (this._autoResizeItem && this._lineCount > 0) child.setSize(child.width, eachHeight, true);
                        if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                            curX = 0;
                            curY += Math.ceil(maxHeight) + this._lineGap;
                            maxHeight = 0;
                            j = 0;
                            k++;
                            if (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0) {
                                page++;
                                curY = 0;
                                k = 0;
                            }
                        }
                        child.setPosition(page * viewWidth + curX, curY);
                        curX += Math.ceil(child.width);
                        if (curX > maxWidth) maxWidth = curX;
                        if (child.height > maxHeight) maxHeight = child.height;
                        j++;
                    }
                }
                ch = page > 0 ? viewHeight : curY + Math.ceil(maxHeight);
                cw = (page + 1) * viewWidth;
            }
            this.handleAlign(cw, ch);
            this.setBounds(0, 0, cw, ch);
        };
        GList.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            this._layout = buffer.readByte();
            this._selectionMode = buffer.readByte();
            this._align = buffer.readByte();
            this._verticalAlign = buffer.readByte();
            this._lineGap = buffer.readShort();
            this._columnGap = buffer.readShort();
            this._lineCount = buffer.readShort();
            this._columnCount = buffer.readShort();
            this._autoResizeItem = buffer.readBool();
            this._childrenRenderOrder = buffer.readByte();
            this._apexIndex = buffer.readShort();
            if (buffer.readBool()) {
                this._margin.top = buffer.readInt();
                this._margin.bottom = buffer.readInt();
                this._margin.left = buffer.readInt();
                this._margin.right = buffer.readInt();
            }
            var overflow = buffer.readByte();
            if (overflow == fgui.OverflowType.Scroll) {
                var savedPos = buffer.position;
                buffer.seek(beginPos, 7);
                this.setupScroll(buffer);
                buffer.position = savedPos;
            } else this.setupOverflow(overflow);
            if (buffer.readBool()) buffer.skip(8);
            if (buffer.version >= 2) {
                this.scrollItemToViewOnClick = buffer.readBool();
                this.foldInvisibleItems = buffer.readBool();
            }
            buffer.seek(beginPos, 8);
            this._defaultItem = buffer.readS();
            this.readItems(buffer);
        };
        GList.prototype.readItems = function (buffer) {
            var cnt;
            var i;
            var nextPos;
            var str;
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                str = buffer.readS();
                if (str == null) {
                    str = this.defaultItem;
                    if (!str) {
                        buffer.position = nextPos;
                        continue;
                    }
                }
                var obj = this.getFromPool(str);
                if (obj != null) {
                    this.addChild(obj);
                    this.setupItem(buffer, obj);
                }
                buffer.position = nextPos;
            }
        };
        GList.prototype.setupItem = function (buffer, obj) {
            var str;
            str = buffer.readS();
            if (str != null) obj.text = str;
            str = buffer.readS();
            if (str != null && obj instanceof fgui.GButton) obj.selectedTitle = str;
            str = buffer.readS();
            if (str != null) obj.icon = str;
            str = buffer.readS();
            if (str != null && obj instanceof fgui.GButton) obj.selectedIcon = str;
            str = buffer.readS();
            if (str != null) obj.name = str;
            var cnt;
            var i;
            if (obj instanceof fgui.GComponent) {
                cnt = buffer.readShort();
                for (i = 0; i < cnt; i++) {
                    var cc = obj.getController(buffer.readS());
                    str = buffer.readS();
                    if (cc != null) cc.selectedPageId = str;
                }
                if (buffer.version >= 2) {
                    cnt = buffer.readShort();
                    for (i = 0; i < cnt; i++) {
                        var target = buffer.readS();
                        var propertyId = buffer.readShort();
                        var value = buffer.readS();
                        var obj2 = obj.getChildByPath(target);
                        if (obj2) obj2.setProp(propertyId, value);
                    }
                }
            }
        };
        GList.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 6);
            var i = buffer.readShort();
            if (i != -1) this._selectionController = this.parent.getControllerAt(i);
        };
        return GList;
    }(fgui.GComponent);
    fgui.GList = GList;
    var ItemInfo = function () {
        function ItemInfo() {
            this.width = 0;
            this.height = 0;
            this.updateFlag = 0;
            this.selected = false;
        }
        return ItemInfo;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GObjectPool = function () {
        function GObjectPool() {
            this._count = 0;
            this._pool = {};
        }
        GObjectPool.prototype.clear = function () {
            var keys = Object.keys(this._pool);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var i1 = keys_1[_i];
                var arr = this._pool[i1];
                var cnt = arr.length;
                for (var i = 0; i < cnt; i++) {
                    arr[i].dispose();
                }
            }
            this._pool = {};
            this._count = 0;
        };
        Object.defineProperty(GObjectPool.prototype, "count", {
            get: function get() {
                return this._count;
            },
            set: function set(c) {},
            enumerable: false,
            configurable: true
        });
        ;
        GObjectPool.prototype.getObject = function (url) {
            url = fgui.UIPackage.normalizeURL(url);
            if (url == null) return null;
            var arr = this._pool[url];
            if (arr != null && arr.length) {
                this._count--;
                return arr.shift();
            }
            var child = fgui.UIPackage.createObjectFromURL(url);
            return child;
        };
        GObjectPool.prototype.returnObject = function (obj) {
            var url = obj.resourceURL;
            if (!url) return;
            var arr = this._pool[url];
            if (arr == null) {
                arr = new Array();
                this._pool[url] = arr;
            }
            this._count++;
            arr.push(obj);
        };
        return GObjectPool;
    }();
    fgui.GObjectPool = GObjectPool;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GLoader = function (_super) {
        __extends(GLoader, _super);
        function GLoader() {
            var _this = _super.call(this) || this;
            _this._frame = 0;
            _this._contentSourceWidth = 0;
            _this._contentSourceHeight = 0;
            _this._contentWidth = 0;
            _this._contentHeight = 0;
            _this._node.name = "GLoader";
            _this._playing = true;
            _this._url = "";
            _this._fill = fgui.LoaderFillType.None;
            _this._align = fgui.AlignType.Left;
            _this._verticalAlign = fgui.VertAlignType.Top;
            _this._showErrorSign = true;
            _this._color = new cc.Color(255, 255, 255, 255);
            _this._container = new cc.Node("Image");
            _this._container.setAnchorPoint(0, 1);
            _this._node.addChild(_this._container);
            _this._content = _this._container.addComponent(fgui.MovieClip);
            _this._content.sizeMode = cc.Sprite.SizeMode.CUSTOM;
            _this._content.trim = false;
            _this._content.setPlaySettings();
            return _this;
        }
        GLoader.prototype.dispose = function () {
            if (this._contentItem == null) {
                if (this._content.spriteFrame != null) this.freeExternal(this._content.spriteFrame);
            }
            if (this._content2 != null) this._content2.dispose();
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(GLoader.prototype, "url", {
            get: function get() {
                return this._url;
            },
            set: function set(value) {
                if (this._url == value) return;
                this._url = value;
                this.loadContent();
                this.updateGear(7);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "icon", {
            get: function get() {
                return this._url;
            },
            set: function set(value) {
                this.url = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "align", {
            get: function get() {
                return this._align;
            },
            set: function set(value) {
                if (this._align != value) {
                    this._align = value;
                    this.updateLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "verticalAlign", {
            get: function get() {
                return this._verticalAlign;
            },
            set: function set(value) {
                if (this._verticalAlign != value) {
                    this._verticalAlign = value;
                    this.updateLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "fill", {
            get: function get() {
                return this._fill;
            },
            set: function set(value) {
                if (this._fill != value) {
                    this._fill = value;
                    this.updateLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "shrinkOnly", {
            get: function get() {
                return this._shrinkOnly;
            },
            set: function set(value) {
                if (this._shrinkOnly != value) {
                    this._shrinkOnly = value;
                    this.updateLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "autoSize", {
            get: function get() {
                return this._autoSize;
            },
            set: function set(value) {
                if (this._autoSize != value) {
                    this._autoSize = value;
                    this.updateLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "playing", {
            get: function get() {
                return this._playing;
            },
            set: function set(value) {
                if (this._playing != value) {
                    this._playing = value;
                    if (this._content instanceof fgui.MovieClip) this._content.playing = value;
                    this.updateGear(5);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "frame", {
            get: function get() {
                return this._frame;
            },
            set: function set(value) {
                if (this._frame != value) {
                    this._frame = value;
                    if (this._content instanceof fgui.MovieClip) this._content.frame = value;
                    this.updateGear(5);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "color", {
            get: function get() {
                return this._color;
            },
            set: function set(value) {
                if (!this._color.equals(value)) {
                    this._color.set(value);
                    this.updateGear(4);
                    this._container.color = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "fillMethod", {
            get: function get() {
                return this._content.fillMethod;
            },
            set: function set(value) {
                this._content.fillMethod = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "fillOrigin", {
            get: function get() {
                return this._content.fillOrigin;
            },
            set: function set(value) {
                this._content.fillOrigin = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "fillClockwise", {
            get: function get() {
                return this._content.fillClockwise;
            },
            set: function set(value) {
                this._content.fillClockwise = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "fillAmount", {
            get: function get() {
                return this._content.fillAmount;
            },
            set: function set(value) {
                this._content.fillAmount = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "showErrorSign", {
            get: function get() {
                return this._showErrorSign;
            },
            set: function set(value) {
                this._showErrorSign = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "component", {
            get: function get() {
                return this._content2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GLoader.prototype, "texture", {
            get: function get() {
                return this._content.spriteFrame;
            },
            set: function set(value) {
                this.url = null;
                this._content.spriteFrame = value;
                this._content.type = cc.Sprite.Type.SIMPLE;
                if (value != null) {
                    this._contentSourceWidth = value.getRect().width;
                    this._contentSourceHeight = value.getRect().height;
                } else {
                    this._contentSourceWidth = this._contentHeight = 0;
                }
                this.updateLayout();
            },
            enumerable: false,
            configurable: true
        });
        GLoader.prototype.loadContent = function () {
            this.clearContent();
            if (!this._url) return;
            if (fgui.ToolSet.startsWith(this._url, "ui://")) this.loadFromPackage(this._url);else this.loadExternal();
        };
        GLoader.prototype.loadFromPackage = function (itemURL) {
            this._contentItem = fgui.UIPackage.getItemByURL(itemURL);
            if (this._contentItem != null) {
                this._contentItem = this._contentItem.getBranch();
                this._contentSourceWidth = this._contentItem.width;
                this._contentSourceHeight = this._contentItem.height;
                this._contentItem = this._contentItem.getHighResolution();
                this._contentItem.load();
                if (this._autoSize) this.setSize(this._contentSourceWidth, this._contentSourceHeight);
                if (this._contentItem.type == fgui.PackageItemType.Image) {
                    if (!this._contentItem.asset) {
                        this.setErrorState();
                    } else {
                        this._content.spriteFrame = this._contentItem.asset;
                        if (this._content.fillMethod == 0) {
                            if (this._contentItem.scale9Grid) this._content.type = cc.Sprite.Type.SLICED;else if (this._contentItem.scaleByTile) this._content.type = cc.Sprite.Type.TILED;else this._content.type = cc.Sprite.Type.SIMPLE;
                        }
                        this.updateLayout();
                    }
                } else if (this._contentItem.type == fgui.PackageItemType.MovieClip) {
                    this._content.interval = this._contentItem.interval;
                    this._content.swing = this._contentItem.swing;
                    this._content.repeatDelay = this._contentItem.repeatDelay;
                    this._content.frames = this._contentItem.frames;
                    this.updateLayout();
                } else if (this._contentItem.type == fgui.PackageItemType.Component) {
                    var obj = fgui.UIPackage.createObjectFromURL(itemURL);
                    if (!obj) this.setErrorState();else if (!(obj instanceof fgui.GComponent)) {
                        obj.dispose();
                        this.setErrorState();
                    } else {
                        this._content2 = obj.asCom;
                        this._container.addChild(this._content2.node);
                        this.updateLayout();
                    }
                } else this.setErrorState();
            } else this.setErrorState();
        };
        GLoader.prototype.loadExternal = function () {
            if (fgui.ToolSet.startsWith(this._url, "http://") || fgui.ToolSet.startsWith(this._url, "https://") || fgui.ToolSet.startsWith(this._url, '/')) cc.loader.load(this._url, this.onLoaded.bind(this));else cc.loader.loadRes(this._url, cc.Asset, this.onLoaded.bind(this));
        };
        GLoader.prototype.onLoaded = function (err, asset) {
            if (!this._url || !cc.isValid(this._node)) return;
            asset = cc.loader.getRes(this._url);
            if (!asset) return;
            if (asset instanceof cc.SpriteFrame) this.onExternalLoadSuccess(asset);else if (asset instanceof cc.Texture2D) this.onExternalLoadSuccess(new cc.SpriteFrame(asset));
        };
        GLoader.prototype.freeExternal = function (texture) {};
        GLoader.prototype.onExternalLoadSuccess = function (texture) {
            this._content.spriteFrame = texture;
            this._content.type = cc.Sprite.Type.SIMPLE;
            this._contentSourceWidth = texture.getRect().width;
            this._contentSourceHeight = texture.getRect().height;
            if (this._autoSize) this.setSize(this._contentSourceWidth, this._contentSourceHeight);
            this.updateLayout();
        };
        GLoader.prototype.onExternalLoadFailed = function () {
            this.setErrorState();
        };
        GLoader.prototype.setErrorState = function () {
            if (!this._showErrorSign) return;
            if (this._errorSign == null) {
                if (fgui.UIConfig.loaderErrorSign != null) {
                    this._errorSign = GLoader._errorSignPool.getObject(fgui.UIConfig.loaderErrorSign);
                }
            }
            if (this._errorSign != null) {
                this._errorSign.setSize(this.width, this.height);
                this._container.addChild(this._errorSign.node);
            }
        };
        GLoader.prototype.clearErrorState = function () {
            if (this._errorSign != null) {
                this._container.removeChild(this._errorSign.node);
                GLoader._errorSignPool.returnObject(this._errorSign);
                this._errorSign = null;
            }
        };
        GLoader.prototype.updateLayout = function () {
            if (this._content2 == null && this._content == null) {
                if (this._autoSize) {
                    this._updatingLayout = true;
                    this.setSize(50, 30);
                    this._updatingLayout = false;
                }
                return;
            }
            this._contentWidth = this._contentSourceWidth;
            this._contentHeight = this._contentSourceHeight;
            var pivotCorrectX = -this.pivotX * this._width;
            var pivotCorrectY = this.pivotY * this._height;
            if (this._autoSize) {
                this._updatingLayout = true;
                if (this._contentWidth == 0) this._contentWidth = 50;
                if (this._contentHeight == 0) this._contentHeight = 30;
                this.setSize(this._contentWidth, this._contentHeight);
                this._updatingLayout = false;
                this._container.setContentSize(this._width, this._height);
                this._container.setPosition(pivotCorrectX, pivotCorrectY);
                if (this._content2 != null) {
                    this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);
                    this._content2.setScale(1, 1);
                }
                if (this._contentWidth == this._width && this._contentHeight == this._height) return;
            }
            var sx = 1,
                sy = 1;
            if (this._fill != fgui.LoaderFillType.None) {
                sx = this.width / this._contentSourceWidth;
                sy = this.height / this._contentSourceHeight;
                if (sx != 1 || sy != 1) {
                    if (this._fill == fgui.LoaderFillType.ScaleMatchHeight) sx = sy;else if (this._fill == fgui.LoaderFillType.ScaleMatchWidth) sy = sx;else if (this._fill == fgui.LoaderFillType.Scale) {
                        if (sx > sy) sx = sy;else sy = sx;
                    } else if (this._fill == fgui.LoaderFillType.ScaleNoBorder) {
                        if (sx > sy) sy = sx;else sx = sy;
                    }
                    if (this._shrinkOnly) {
                        if (sx > 1) sx = 1;
                        if (sy > 1) sy = 1;
                    }
                    this._contentWidth = this._contentSourceWidth * sx;
                    this._contentHeight = this._contentSourceHeight * sy;
                }
            }
            this._container.setContentSize(this._contentWidth, this._contentHeight);
            if (this._content2 != null) {
                this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);
                this._content2.setScale(sx, sy);
            }
            var nx, ny;
            if (this._align == fgui.AlignType.Left) nx = 0;else if (this._align == fgui.AlignType.Center) nx = Math.floor((this._width - this._contentWidth) / 2);else nx = this._width - this._contentWidth;
            if (this._verticalAlign == fgui.VertAlignType.Top) ny = 0;else if (this._verticalAlign == fgui.VertAlignType.Middle) ny = Math.floor((this._height - this._contentHeight) / 2);else ny = this._height - this._contentHeight;
            ny = -ny;
            this._container.setPosition(pivotCorrectX + nx, pivotCorrectY + ny);
        };
        GLoader.prototype.clearContent = function () {
            this.clearErrorState();
            if (this._contentItem == null) {
                var texture = this._content.spriteFrame;
                if (texture != null) this.freeExternal(texture);
            }
            if (this._content2 != null) {
                this._container.removeChild(this._content2.node);
                this._content2.dispose();
                this._content2 = null;
            }
            this._content.frames = null;
            this._content.spriteFrame = null;
            this._contentItem = null;
        };
        GLoader.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            if (!this._updatingLayout) this.updateLayout();
        };
        GLoader.prototype.handleAnchorChanged = function () {
            _super.prototype.handleAnchorChanged.call(this);
            if (!this._updatingLayout) this.updateLayout();
        };
        GLoader.prototype.handleGrayedChanged = function () {
            this._content.grayed = this._grayed;
        };
        GLoader.prototype.hitTest = function (globalPt) {
            if (this._touchDisabled || !this._touchable || !this._node.activeInHierarchy) return null;
            if (this._content2) {
                var obj = this._content2.hitTest(globalPt);
                if (obj) return obj;
            }
            var pt = this._node.convertToNodeSpaceAR(globalPt);
            pt.x += this._node.anchorX * this._width;
            pt.y += this._node.anchorY * this._height;
            if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };
        GLoader.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.color;
                case fgui.ObjectPropID.Playing:
                    return this.playing;
                case fgui.ObjectPropID.Frame:
                    return this.frame;
                case fgui.ObjectPropID.TimeScale:
                    return this._content.timeScale;
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GLoader.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.color = value;
                    break;
                case fgui.ObjectPropID.Playing:
                    this.playing = value;
                    break;
                case fgui.ObjectPropID.Frame:
                    this.frame = value;
                    break;
                case fgui.ObjectPropID.TimeScale:
                    this._content.timeScale = value;
                    break;
                case fgui.ObjectPropID.DeltaTime:
                    this._content.advance(value);
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GLoader.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            this._url = buffer.readS();
            this._align = buffer.readByte();
            this._verticalAlign = buffer.readByte();
            this._fill = buffer.readByte();
            this._shrinkOnly = buffer.readBool();
            this._autoSize = buffer.readBool();
            this._showErrorSign = buffer.readBool();
            this._playing = buffer.readBool();
            this._frame = buffer.readInt();
            if (buffer.readBool()) this.color = buffer.readColor();
            this._content.fillMethod = buffer.readByte();
            if (this._content.fillMethod != 0) {
                this._content.fillOrigin = buffer.readByte();
                this._content.fillClockwise = buffer.readBool();
                this._content.fillAmount = buffer.readFloat();
            }
            if (this._url) this.loadContent();
        };
        GLoader._errorSignPool = new fgui.GObjectPool();
        return GLoader;
    }(fgui.GObject);
    fgui.GLoader = GLoader;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GMovieClip = function (_super) {
        __extends(GMovieClip, _super);
        function GMovieClip() {
            var _this = _super.call(this) || this;
            _this._node.name = "GMovieClip";
            _this._touchDisabled = true;
            _this._content = _this._node.addComponent(fgui.MovieClip);
            _this._events = {};
            _this._content.registerFrameCallback(_this._onFrameDraw, _this);
            return _this;
        }
        Object.defineProperty(GMovieClip.prototype, "color", {
            get: function get() {
                return cc.Color.WHITE;
            },
            set: function set(value) {
                if (this._node.color != value) {
                    this._node.color = value;
                    this.updateGear(4);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GMovieClip.prototype, "playing", {
            get: function get() {
                return this._content.playing;
            },
            set: function set(value) {
                if (this._content.playing != value) {
                    this._content.playing = value;
                    this.updateGear(5);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GMovieClip.prototype, "frame", {
            get: function get() {
                return this._content.frame;
            },
            set: function set(value) {
                if (this._content.frame != value) {
                    this._content.frame = value;
                    this.updateGear(5);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GMovieClip.prototype, "frameCount", {
            get: function get() {
                return this._content.frameCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GMovieClip.prototype, "timeScale", {
            get: function get() {
                return this._content.timeScale;
            },
            set: function set(value) {
                this._content.timeScale = value;
            },
            enumerable: false,
            configurable: true
        });
        GMovieClip.prototype.rewind = function () {
            this._content.rewind();
        };
        GMovieClip.prototype.syncStatus = function (anotherMc) {
            this._content.syncStatus(anotherMc._content);
        };
        GMovieClip.prototype.advance = function (timeInMiniseconds) {
            this._content.advance(timeInMiniseconds);
        };
        GMovieClip.prototype.setPlaySettings = function (start, end, times, endAt, endCallback, callbackObj) {
            this._callback = endCallback;
            this._callbackObj = callbackObj;
            this._content.setPlaySettings(start, end, times, endAt, this._onComplete, this);
        };
        GMovieClip.prototype.addFrameEvent = function (frame, name) {
            this._events[frame] = name;
        };
        GMovieClip.prototype.handleGrayedChanged = function () {
            this._content.grayed = this._grayed;
        };
        GMovieClip.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.color;
                case fgui.ObjectPropID.Playing:
                    return this.playing;
                case fgui.ObjectPropID.Frame:
                    return this.frame;
                case fgui.ObjectPropID.TimeScale:
                    return this.timeScale;
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GMovieClip.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.color = value;
                    break;
                case fgui.ObjectPropID.Playing:
                    this.playing = value;
                    break;
                case fgui.ObjectPropID.Frame:
                    this.frame = value;
                    break;
                case fgui.ObjectPropID.TimeScale:
                    this.timeScale = value;
                    break;
                case fgui.ObjectPropID.DeltaTime:
                    this.advance(value);
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GMovieClip.prototype.constructFromResource = function () {
            var contentItem = this.packageItem.getBranch();
            this.sourceWidth = contentItem.width;
            this.sourceHeight = contentItem.height;
            this.initWidth = this.sourceWidth;
            this.initHeight = this.sourceHeight;
            this.setSize(this.sourceWidth, this.sourceHeight);
            contentItem = contentItem.getHighResolution();
            contentItem.offLoad(this._loadContent, this);
            contentItem.onLoad(this._loadContent, this);
        };
        GMovieClip.prototype._loadContent = function (asset) {
            var contentItem = this.packageItem.getBranch().getHighResolution();
            this._content.interval = contentItem.interval;
            this._content.swing = contentItem.swing;
            this._content.repeatDelay = contentItem.repeatDelay;
            this._content.frames = contentItem.frames;
            this._content.smoothing = contentItem.smoothing;
        };
        GMovieClip.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            if (buffer.readBool()) this.color = buffer.readColor();
            buffer.readByte();
            this._content.frame = buffer.readInt();
            this._content.playing = buffer.readBool();
        };
        GMovieClip.prototype._onComplete = function () {
            if (this._callback) {
                var callback = this._callback;
                var caller = this._callbackObj;
                this._callback = null;
                this._callbackObj = null;
                callback.call(caller);
            }
            this.dispatchEventWith(GMovieClip.COMPLETE);
        };
        GMovieClip.prototype._onFrameDraw = function (frame) {
            var eventName = this._events[frame];
            if (eventName) {
                this.dispatchEventWith(GMovieClip.FRAME_LABEL, false, eventName);
            }
        };
        GMovieClip.COMPLETE = "complete";
        GMovieClip.FRAME_LABEL = "frameLabel";
        return GMovieClip;
    }(fgui.GObject);
    fgui.GMovieClip = GMovieClip;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GProgressBar = function (_super) {
        __extends(GProgressBar, _super);
        function GProgressBar() {
            var _this = _super.call(this) || this;
            _this._min = 0;
            _this._max = 0;
            _this._value = 0;
            _this._barMaxWidth = 0;
            _this._barMaxHeight = 0;
            _this._barMaxWidthDelta = 0;
            _this._barMaxHeightDelta = 0;
            _this._barStartX = 0;
            _this._barStartY = 0;
            _this._node.name = "GProgressBar";
            _this._titleType = fgui.ProgressTitleType.Percent;
            _this._value = 50;
            _this._max = 100;
            return _this;
        }
        Object.defineProperty(GProgressBar.prototype, "titleType", {
            get: function get() {
                return this._titleType;
            },
            set: function set(value) {
                if (this._titleType != value) {
                    this._titleType = value;
                    this.update(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GProgressBar.prototype, "min", {
            get: function get() {
                return this._min;
            },
            set: function set(value) {
                if (this._min != value) {
                    this._min = value;
                    this.update(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GProgressBar.prototype, "max", {
            get: function get() {
                return this._max;
            },
            set: function set(value) {
                if (this._max != value) {
                    this._max = value;
                    this.update(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GProgressBar.prototype, "value", {
            get: function get() {
                return this._value;
            },
            set: function set(value) {
                if (this._value != value) {
                    fgui.GTween.kill(this, false, this.update);
                    this._value = value;
                    this.update(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        GProgressBar.prototype.tweenValue = function (value, duration) {
            var oldValule;
            var tweener = fgui.GTween.getTween(this, this.update);
            if (tweener != null) {
                oldValule = tweener.value.x;
                tweener.kill();
            } else oldValule = this._value;
            this._value = value;
            return fgui.GTween.to(oldValule, this._value, duration).setTarget(this, this.update).setEase(fgui.EaseType.Linear);
        };
        GProgressBar.prototype.update = function (newValue) {
            var percent = fgui.ToolSet.clamp01((newValue - this._min) / (this._max - this._min));
            if (this._titleObject) {
                switch (this._titleType) {
                    case fgui.ProgressTitleType.Percent:
                        this._titleObject.text = Math.floor(percent * 100) + "%";
                        break;
                    case fgui.ProgressTitleType.ValueAndMax:
                        this._titleObject.text = Math.floor(newValue) + "/" + Math.floor(this._max);
                        break;
                    case fgui.ProgressTitleType.Value:
                        this._titleObject.text = "" + Math.floor(newValue);
                        break;
                    case fgui.ProgressTitleType.Max:
                        this._titleObject.text = "" + Math.floor(this._max);
                        break;
                }
            }
            var fullWidth = this.width - this._barMaxWidthDelta;
            var fullHeight = this.height - this._barMaxHeightDelta;
            if (!this._reverse) {
                if (this._barObjectH) {
                    if (this._barObjectH instanceof fgui.GImage && this._barObjectH.fillMethod != fgui.FillMethod.None) this._barObjectH.fillAmount = percent;else this._barObjectH.width = Math.round(fullWidth * percent);
                }
                if (this._barObjectV) {
                    if (this._barObjectV instanceof fgui.GImage && this._barObjectV.fillMethod != fgui.FillMethod.None) this._barObjectV.fillAmount = percent;else this._barObjectV.height = Math.round(fullHeight * percent);
                }
            } else {
                if (this._barObjectH) {
                    if (this._barObjectH instanceof fgui.GImage && this._barObjectH.fillMethod != fgui.FillMethod.None) this._barObjectH.fillAmount = 1 - percent;else {
                        this._barObjectH.width = Math.round(fullWidth * percent);
                        this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
                    }
                }
                if (this._barObjectV) {
                    if (this._barObjectV instanceof fgui.GImage && this._barObjectV.fillMethod != fgui.FillMethod.None) this._barObjectV.fillAmount = 1 - percent;else {
                        this._barObjectV.height = Math.round(fullHeight * percent);
                        this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
                    }
                }
            }
            if (this._aniObject) this._aniObject.setProp(fgui.ObjectPropID.Frame, Math.floor(percent * 100));
        };
        GProgressBar.prototype.constructExtension = function (buffer) {
            buffer.seek(0, 6);
            this._titleType = buffer.readByte();
            this._reverse = buffer.readBool();
            this._titleObject = this.getChild("title");
            this._barObjectH = this.getChild("bar");
            this._barObjectV = this.getChild("bar_v");
            this._aniObject = this.getChild("ani");
            if (this._barObjectH) {
                this._barMaxWidth = this._barObjectH.width;
                this._barMaxWidthDelta = this.width - this._barMaxWidth;
                this._barStartX = this._barObjectH.x;
            }
            if (this._barObjectV) {
                this._barMaxHeight = this._barObjectV.height;
                this._barMaxHeightDelta = this.height - this._barMaxHeight;
                this._barStartY = this._barObjectV.y;
            }
        };
        GProgressBar.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
            if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
            if (!this._underConstruct) this.update(this._value);
        };
        GProgressBar.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!buffer.seek(beginPos, 6)) {
                this.update(this._value);
                return;
            }
            if (buffer.readByte() != this.packageItem.objectType) {
                this.update(this._value);
                return;
            }
            this._value = buffer.readInt();
            this._max = buffer.readInt();
            if (buffer.version >= 2) this._min = buffer.readInt();
            this.update(this._value);
        };
        return GProgressBar;
    }(fgui.GComponent);
    fgui.GProgressBar = GProgressBar;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTextField = function (_super) {
        __extends(GTextField, _super);
        function GTextField() {
            var _this = _super.call(this) || this;
            _this._fontSize = 0;
            _this._leading = 0;
            _this._node.name = "GTextField";
            _this._touchDisabled = true;
            _this._text = "";
            _this._color = new cc.Color(255, 255, 255, 255);
            _this._strokeColor = new cc.Color();
            _this._templateVars = null;
            _this.createRenderer();
            _this.fontSize = 12;
            _this.leading = 3;
            _this.singleLine = false;
            _this._sizeDirty = false;
            _this._node.on(cc.Node.EventType.SIZE_CHANGED, _this.onLabelSizeChanged, _this);
            return _this;
        }
        GTextField.prototype.createRenderer = function () {
            this._label = this._node.addComponent(cc.Label);
            this.autoSize = fgui.AutoSizeType.Both;
        };
        Object.defineProperty(GTextField.prototype, "text", {
            get: function get() {
                return this._text;
            },
            set: function set(value) {
                this._text = value;
                if (this._text == null) this._text = "";
                this.updateGear(6);
                this.markSizeChanged();
                this.updateText();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "font", {
            get: function get() {
                return this._font;
            },
            set: function set(value) {
                if (this._font != value || !value) {
                    this._font = value;
                    this.markSizeChanged();
                    var newFont = value ? value : fgui.UIConfig.defaultFont;
                    if (fgui.ToolSet.startsWith(newFont, "ui://")) {
                        var pi = fgui.UIPackage.getItemByURL(newFont);
                        if (pi) newFont = pi.owner.getItemAsset(pi);else newFont = fgui.UIConfig.defaultFont;
                    }
                    this._realFont = newFont;
                    this.updateFont();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "fontSize", {
            get: function get() {
                return this._fontSize;
            },
            set: function set(value) {
                if (value < 0) return;
                if (this._fontSize != value) {
                    this._fontSize = value;
                    this.markSizeChanged();
                    this.updateFontSize();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "color", {
            get: function get() {
                return this._color;
            },
            set: function set(value) {
                if (!this._color.equals(value)) {
                    this._color.set(value);
                    this.updateGear(4);
                    this.updateFontColor();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "align", {
            get: function get() {
                return this._label.horizontalAlign;
            },
            set: function set(value) {
                this._label.horizontalAlign = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "verticalAlign", {
            get: function get() {
                return this._label.verticalAlign;
            },
            set: function set(value) {
                this._label.verticalAlign = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "leading", {
            get: function get() {
                return this._leading;
            },
            set: function set(value) {
                if (this._leading != value) {
                    this._leading = value;
                    this.markSizeChanged();
                    this.updateFontSize();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "letterSpacing", {
            get: function get() {
                return this._label["spacingX"];
            },
            set: function set(value) {
                if (this._label["spacingX"] != value) {
                    this.markSizeChanged();
                    this._label["spacingX"] = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "underline", {
            get: function get() {
                return false;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "bold", {
            get: function get() {
                return false;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "italic", {
            get: function get() {
                return false;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "singleLine", {
            get: function get() {
                return !this._label.enableWrapText;
            },
            set: function set(value) {
                this._label.enableWrapText = !value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "stroke", {
            get: function get() {
                return this._outline && this._outline.enabled ? this._outline.width : 0;
            },
            set: function set(value) {
                if (value == 0) {
                    if (this._outline) this._outline.enabled = false;
                } else {
                    if (!this._outline) {
                        this._outline = this._node.addComponent(cc.LabelOutline);
                        this.updateStrokeColor();
                    } else this._outline.enabled = true;
                    this._outline.width = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "strokeColor", {
            get: function get() {
                return this._strokeColor;
            },
            set: function set(value) {
                if (!this._strokeColor.equals(value)) {
                    this._strokeColor.set(value);
                    this.updateGear(4);
                    this.updateStrokeColor();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "ubbEnabled", {
            get: function get() {
                return this._ubbEnabled;
            },
            set: function set(value) {
                if (this._ubbEnabled != value) {
                    this._ubbEnabled = value;
                    this.markSizeChanged();
                    this.updateText();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextField.prototype, "autoSize", {
            get: function get() {
                return this._autoSize;
            },
            set: function set(value) {
                if (this._autoSize != value) {
                    this._autoSize = value;
                    this.markSizeChanged();
                    this.updateOverflow();
                }
            },
            enumerable: false,
            configurable: true
        });
        GTextField.prototype.parseTemplate = function (template) {
            var pos1 = 0,
                pos2,
                pos3;
            var tag;
            var value;
            var result = "";
            while ((pos2 = template.indexOf("{", pos1)) != -1) {
                if (pos2 > 0 && template.charCodeAt(pos2 - 1) == 92) {
                    result += template.substring(pos1, pos2 - 1);
                    result += "{";
                    pos1 = pos2 + 1;
                    continue;
                }
                result += template.substring(pos1, pos2);
                pos1 = pos2;
                pos2 = template.indexOf("}", pos1);
                if (pos2 == -1) break;
                if (pos2 == pos1 + 1) {
                    result += template.substr(pos1, 2);
                    pos1 = pos2 + 1;
                    continue;
                }
                tag = template.substring(pos1 + 1, pos2);
                pos3 = tag.indexOf("=");
                if (pos3 != -1) {
                    value = this._templateVars[tag.substring(0, pos3)];
                    if (value == null) result += tag.substring(pos3 + 1);else result += value;
                } else {
                    value = this._templateVars[tag];
                    if (value != null) result += value;
                }
                pos1 = pos2 + 1;
            }
            if (pos1 < template.length) result += template.substr(pos1);
            return result;
        };
        Object.defineProperty(GTextField.prototype, "templateVars", {
            get: function get() {
                return this._templateVars;
            },
            set: function set(value) {
                if (this._templateVars == null && value == null) return;
                this._templateVars = value;
                this.flushVars();
            },
            enumerable: false,
            configurable: true
        });
        GTextField.prototype.setVar = function (name, value) {
            if (!this._templateVars) this._templateVars = {};
            this._templateVars[name] = value;
            return this;
        };
        GTextField.prototype.flushVars = function () {
            this.markSizeChanged();
            this.updateText();
        };
        Object.defineProperty(GTextField.prototype, "textWidth", {
            get: function get() {
                this.ensureSizeCorrect();
                return this._node.width;
            },
            enumerable: false,
            configurable: true
        });
        GTextField.prototype.ensureSizeCorrect = function () {
            if (this._sizeDirty) {
                if (this._label["_forceUpdateRenderData"]) this._label["_forceUpdateRenderData"]();else this._label["_updateRenderData"](true);
                this._sizeDirty = false;
            }
        };
        GTextField.prototype.updateText = function () {
            var text2 = this._text;
            if (this._templateVars != null) text2 = this.parseTemplate(text2);
            if (this._ubbEnabled) text2 = fgui.UBBParser.inst.parse(fgui.ToolSet.encodeHTML(text2), true);
            this._label.string = text2;
        };
        GTextField.prototype.assignFont = function (label, value) {
            if (value instanceof cc.Font) label.font = value;else {
                var font = fgui.getFontByName(value);
                if (!font) {
                    label.fontFamily = value;
                    label.useSystemFont = true;
                } else label.font = font;
            }
        };
        GTextField.prototype.assignFontColor = function (label, value) {
            var font = label.font;
            if (font instanceof cc.BitmapFont && !font._fntConfig.canTint) value = cc.Color.WHITE;
            if (this._grayed) value = fgui.ToolSet.toGrayed(value);
            label.node.color = value;
        };
        GTextField.prototype.updateFont = function () {
            this.assignFont(this._label, this._realFont);
        };
        GTextField.prototype.updateFontColor = function () {
            this.assignFontColor(this._label, this._color);
        };
        GTextField.prototype.updateStrokeColor = function () {
            if (!this._outline) return;
            if (this._grayed) this._outline.color = fgui.ToolSet.toGrayed(this._strokeColor);else this._outline.color = this._strokeColor;
        };
        GTextField.prototype.updateFontSize = function () {
            var font = this._label.font;
            if (font instanceof cc.BitmapFont) {
                var fntConfig = font._fntConfig;
                if (fntConfig.resizable) this._label.fontSize = this._fontSize;else this._label.fontSize = fntConfig.fontSize;
                this._label.lineHeight = fntConfig.fontSize + (this._leading + 4) * fntConfig.fontSize / this._label.fontSize;
            } else {
                this._label.fontSize = this._fontSize;
                this._label.lineHeight = this._fontSize + this._leading;
            }
        };
        GTextField.prototype.updateOverflow = function () {
            if (this._autoSize == fgui.AutoSizeType.Both) this._label.overflow = cc.Label.Overflow.NONE;else if (this._autoSize == fgui.AutoSizeType.Height) {
                this._label.overflow = cc.Label.Overflow.RESIZE_HEIGHT;
                this._node.width = this._width;
            } else if (this._autoSize == fgui.AutoSizeType.Shrink) {
                this._label.overflow = cc.Label.Overflow.SHRINK;
                this._node.setContentSize(this._width, this._height);
            } else {
                this._label.overflow = cc.Label.Overflow.CLAMP;
                this._node.setContentSize(this._width, this._height);
            }
        };
        GTextField.prototype.markSizeChanged = function () {
            if (this._underConstruct) return;
            if (this._autoSize == fgui.AutoSizeType.Both || this._autoSize == fgui.AutoSizeType.Height) {
                if (!this._sizeDirty) {
                    this._node.emit(fgui.Event.SIZE_DELAY_CHANGE, this);
                    this._sizeDirty = true;
                }
            }
        };
        GTextField.prototype.onLabelSizeChanged = function () {
            this._sizeDirty = false;
            if (this._underConstruct) return;
            if (this._autoSize == fgui.AutoSizeType.Both || this._autoSize == fgui.AutoSizeType.Height) {
                this._updatingSize = true;
                this.setSize(this._node.width, this._node.height);
                this._updatingSize = false;
            }
        };
        GTextField.prototype.handleSizeChanged = function () {
            if (this._updatingSize) return;
            if (this._autoSize == fgui.AutoSizeType.None || this._autoSize == fgui.AutoSizeType.Shrink) {
                this._node.setContentSize(this._width, this._height);
            } else if (this._autoSize == fgui.AutoSizeType.Height) this._node.width = this._width;
        };
        GTextField.prototype.handleGrayedChanged = function () {
            this.updateFontColor();
            this.updateStrokeColor();
        };
        GTextField.prototype.getProp = function (index) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    return this.color;
                case fgui.ObjectPropID.OutlineColor:
                    return this.strokeColor;
                case fgui.ObjectPropID.FontSize:
                    return this.fontSize;
                default:
                    return _super.prototype.getProp.call(this, index);
            }
        };
        GTextField.prototype.setProp = function (index, value) {
            switch (index) {
                case fgui.ObjectPropID.Color:
                    this.color = value;
                    break;
                case fgui.ObjectPropID.OutlineColor:
                    this.strokeColor = value;
                    break;
                case fgui.ObjectPropID.FontSize:
                    this.fontSize = value;
                    break;
                default:
                    _super.prototype.setProp.call(this, index, value);
                    break;
            }
        };
        GTextField.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 5);
            this.font = buffer.readS();
            this.fontSize = buffer.readShort();
            this.color = buffer.readColor();
            this.align = buffer.readByte();
            this.verticalAlign = buffer.readByte();
            this.leading = buffer.readShort();
            this.letterSpacing = buffer.readShort();
            this._ubbEnabled = buffer.readBool();
            this.autoSize = buffer.readByte();
            this.underline = buffer.readBool();
            this.italic = buffer.readBool();
            this.bold = buffer.readBool();
            this.singleLine = buffer.readBool();
            if (buffer.readBool()) {
                this.strokeColor = buffer.readColor();
                this.stroke = buffer.readFloat();
            }
            if (buffer.readBool()) buffer.skip(12);
            if (buffer.readBool()) this._templateVars = {};
        };
        GTextField.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 6);
            var str = buffer.readS();
            if (str != null) this.text = str;
        };
        return GTextField;
    }(fgui.GObject);
    fgui.GTextField = GTextField;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var RichTextImageAtlas = function (_super) {
        __extends(RichTextImageAtlas, _super);
        function RichTextImageAtlas() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RichTextImageAtlas.prototype.getSpriteFrame = function (key) {
            var pi = fgui.UIPackage.getItemByURL(key);
            if (pi) {
                pi.load();
                if (pi.type == fgui.PackageItemType.Image) return pi.asset;else if (pi.type == fgui.PackageItemType.MovieClip) return pi.frames[0].texture;
            }
            return _super.prototype.getSpriteFrame.call(this, key);
        };
        return RichTextImageAtlas;
    }(cc.SpriteAtlas);
    fgui.RichTextImageAtlas = RichTextImageAtlas;
    var GRichTextField = function (_super) {
        __extends(GRichTextField, _super);
        function GRichTextField() {
            var _this = _super.call(this) || this;
            _this._node.name = "GRichTextField";
            _this._touchDisabled = false;
            _this.linkUnderline = fgui.UIConfig.linkUnderline;
            return _this;
        }
        GRichTextField.prototype.createRenderer = function () {
            this._richText = this._node.addComponent(cc.RichText);
            this._richText.handleTouchEvent = false;
            this.autoSize = fgui.AutoSizeType.None;
            this._richText.imageAtlas = GRichTextField.imageAtlas;
        };
        Object.defineProperty(GRichTextField.prototype, "align", {
            get: function get() {
                return this._richText.horizontalAlign;
            },
            set: function set(value) {
                this._richText.horizontalAlign = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "verticalAlign", {
            get: function get() {
                return cc.Label.VerticalAlign.TOP;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "letterSpacing", {
            get: function get() {
                return 0;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "underline", {
            get: function get() {
                return this._underline;
            },
            set: function set(value) {
                if (this._underline != value) {
                    this._underline = value;
                    this.updateText();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "bold", {
            get: function get() {
                return this._bold;
            },
            set: function set(value) {
                if (this._bold != value) {
                    this._bold = value;
                    this.updateText();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "italic", {
            get: function get() {
                return this._italics;
            },
            set: function set(value) {
                if (this._italics != value) {
                    this._italics = value;
                    this.updateText();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRichTextField.prototype, "singleLine", {
            get: function get() {
                return false;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        GRichTextField.prototype.markSizeChanged = function () {};
        GRichTextField.prototype.updateText = function () {
            var text2 = this._text;
            if (this._templateVars != null) text2 = this.parseTemplate(text2);
            if (this._ubbEnabled) {
                fgui.UBBParser.inst.linkUnderline = this.linkUnderline;
                fgui.UBBParser.inst.linkColor = this.linkColor;
                text2 = fgui.UBBParser.inst.parse(fgui.ToolSet.encodeHTML(text2));
            }
            if (this._bold) text2 = "<b>" + text2 + "</b>";
            if (this._italics) text2 = "<i>" + text2 + "</i>";
            if (this._underline) text2 = "<u>" + text2 + "</u>";
            var c = this._color;
            if (this._grayed) c = fgui.ToolSet.toGrayed(c);
            text2 = "<color=" + c.toHEX("#rrggbb") + ">" + text2 + "</color>";
            if (this._autoSize == fgui.AutoSizeType.Both) {
                if (this._richText.maxWidth != 0) this._richText.maxWidth = 0;
                this._richText.string = text2;
                if (this.maxWidth != 0 && this._node.width > this.maxWidth) this._richText.maxWidth = this.maxWidth;
            } else this._richText.string = text2;
        };
        GRichTextField.prototype.updateFont = function () {
            this.assignFont(this._richText, this._realFont);
        };
        GRichTextField.prototype.updateFontColor = function () {
            this.assignFontColor(this._richText, this._color);
        };
        GRichTextField.prototype.updateFontSize = function () {
            var fontSize = this._fontSize;
            var font = this._richText.font;
            if (font instanceof cc.BitmapFont) {
                if (!font._fntConfig.resizable) fontSize = font._fntConfig.fontSize;
            }
            this._richText.fontSize = fontSize;
            this._richText.lineHeight = fontSize + this._leading;
        };
        GRichTextField.prototype.updateOverflow = function () {
            if (this._autoSize == fgui.AutoSizeType.Both) this._richText.maxWidth = 0;else this._richText.maxWidth = this._width;
        };
        GRichTextField.prototype.handleSizeChanged = function () {
            if (this._updatingSize) return;
            if (this._autoSize != fgui.AutoSizeType.Both) this._richText.maxWidth = this._width;
        };
        GRichTextField.imageAtlas = new RichTextImageAtlas();
        return GRichTextField;
    }(fgui.GTextField);
    fgui.GRichTextField = GRichTextField;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var AppOrientation;
    (function (AppOrientation) {
        AppOrientation[AppOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";
        AppOrientation[AppOrientation["VERTICAL"] = 2] = "VERTICAL";
    })(AppOrientation = fgui.AppOrientation || (fgui.AppOrientation = {}));
    var GRoot = function (_super) {
        __extends(GRoot, _super);
        function GRoot() {
            var _this = _super.call(this) || this;
            _this._designWidth = 800;
            _this._designHeight = 480;
            _this._scaleAdjust = false;
            _this._node.name = "GRoot";
            _this.opaque = false;
            _this._volumeScale = 1;
            _this._popupStack = new Array();
            _this._justClosedPopups = new Array();
            _this._modalLayer = new fgui.GGraph();
            _this._modalLayer.setSize(_this.width, _this.height);
            _this._modalLayer.drawRect(0, cc.Color.TRANSPARENT, fgui.UIConfig.modalLayerColor);
            _this._modalLayer.addRelation(_this, fgui.RelationType.Size);
            _this._thisOnResized = _this.onWinResize.bind(_this);
            _this._inputProcessor = _this.node.addComponent(fgui.InputProcessor);
            _this._inputProcessor._captureCallback = _this.onTouchBegin_1;
            if (CC_EDITOR) {
                cc.engine.on('design-resolution-changed', _this._thisOnResized);
            } else {
                if (cc.sys.isMobile) {
                    window.addEventListener('resize', _this._thisOnResized);
                } else {
                    cc.view.on('canvas-resize', _this._thisOnResized);
                }
            }
            _this.onWinResize();
            return _this;
        }
        Object.defineProperty(GRoot, "inst", {
            get: function get() {
                if (!GRoot._inst) throw 'Call GRoot.create first!';
                return GRoot._inst;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.create = function () {
            GRoot._inst = new GRoot();
            GRoot._inst.node.parent = cc.director.getScene();
            return GRoot._inst;
        };
        GRoot.prototype.onDestroy = function () {
            if (CC_EDITOR) {
                cc.engine.off('design-resolution-changed', this._thisOnResized);
            } else {
                if (cc.sys.isMobile) {
                    window.removeEventListener('resize', this._thisOnResized);
                } else {
                    cc.view.off('canvas-resize', this._thisOnResized);
                }
            }
            if (this == GRoot._inst) GRoot._inst = null;
        };
        GRoot.prototype.setDesignSize = function (width, height) {
            this._designWidth = width;
            this._designHeight = height;
            this.setSize(width, height);
            this.onWinResize();
        };
        Object.defineProperty(GRoot.prototype, "designWidth", {
            get: function get() {
                return this._designWidth > 0 ? this._designWidth : this._width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRoot.prototype, "designHeight", {
            get: function get() {
                return this._designHeight > 0 ? this._designHeight : this._height;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.prototype.getDesignViewWidth = function () {
            var canvasSize = cc.view.getCanvasSize();
            return canvasSize.width / cc.view.getScaleX() / this.scaleX;
        };
        GRoot.prototype.getDesignViewHeight = function () {
            var canvasSize = cc.view.getCanvasSize();
            return canvasSize.height / cc.view.getScaleY() / this.scaleY;
        };
        GRoot.prototype.getTouchPosition = function (touchId) {
            return this._inputProcessor.getTouchPosition(touchId);
        };
        Object.defineProperty(GRoot.prototype, "touchTarget", {
            get: function get() {
                return this._inputProcessor.getTouchTarget();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRoot.prototype, "inputProcessor", {
            get: function get() {
                return this._inputProcessor;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.prototype.showWindow = function (win) {
            this.addChild(win);
            win.requestFocus();
            if (win.x > this.width) win.x = this.width - win.width;else if (win.x + win.width < 0) win.x = 0;
            if (win.y > this.height) win.y = this.height - win.height;else if (win.y + win.height < 0) win.y = 0;
            this.adjustModalLayer();
        };
        GRoot.prototype.hideWindow = function (win, remove) {
            if (remove === void 0) {
                remove = true;
            }
            win.hide(remove);
        };
        GRoot.prototype.hideWindowImmediately = function (win, remove) {
            if (remove === void 0) {
                remove = true;
            }
            if (win.parent == this) {
                if (remove) {
                    this.removeChild(win);
                } else {
                    win.hidden = true;
                }
            }
            this.adjustModalLayer();
        };
        GRoot.prototype.bringToFront = function (win) {
            var cnt = this.numChildren;
            var i;
            if (this._modalLayer.parent != null && !win.modal) i = this.getChildIndex(this._modalLayer) - 1;else i = cnt - 1;
            for (; i >= 0; i--) {
                var g = this.getChildAt(i);
                if (g == win) return;
                if (g instanceof fgui.Window) break;
            }
            if (i >= 0) this.setChildIndex(win, i);
        };
        GRoot.prototype.showModalWait = function (msg) {
            if (fgui.UIConfig.globalModalWaiting != null) {
                if (this._modalWaitPane == null) this._modalWaitPane = fgui.UIPackage.createObjectFromURL(fgui.UIConfig.globalModalWaiting);
                this._modalWaitPane.setSize(this.width, this.height);
                this._modalWaitPane.addRelation(this, fgui.RelationType.Size);
                this.addChild(this._modalWaitPane);
                this._modalWaitPane.text = msg;
            }
        };
        GRoot.prototype.closeModalWait = function () {
            if (this._modalWaitPane != null && this._modalWaitPane.parent != null) this.removeChild(this._modalWaitPane);
        };
        GRoot.prototype.closeAllExceptModals = function () {
            var arr = this._children.slice();
            var cnt = arr.length;
            for (var i = 0; i < cnt; i++) {
                var g = arr[i];
                if (g instanceof fgui.Window && !g.modal) g.hide();
            }
        };
        GRoot.prototype.closeAllWindows = function () {
            var arr = this._children.slice();
            var cnt = arr.length;
            for (var i = 0; i < cnt; i++) {
                var g = arr[i];
                if (g instanceof fgui.Window) g.hide();
            }
        };
        GRoot.prototype.getTopWindow = function () {
            var cnt = this.numChildren;
            for (var i = cnt - 1; i >= 0; i--) {
                var g = this.getChildAt(i);
                if (g instanceof fgui.Window) {
                    return g;
                }
            }
            return null;
        };
        Object.defineProperty(GRoot.prototype, "modalLayer", {
            get: function get() {
                return this._modalLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRoot.prototype, "hasModalWindow", {
            get: function get() {
                return this._modalLayer.parent != null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRoot.prototype, "modalWaiting", {
            get: function get() {
                return this._modalWaitPane && this._modalWaitPane.node.activeInHierarchy;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.prototype.getPopupPosition = function (popup, target, downward, result) {
            var pos = result ? result : new cc.Vec2();
            var sizeW = 0,
                sizeH = 0;
            if (target) {
                pos = target.localToRoot();
                var pos2 = target.localToRoot(target.width, target.height);
                sizeW = pos2.x - pos.x;
                sizeH = pos2.y - pos.y;
            } else {
                pos = this.getTouchPosition();
                pos = this.globalToLocal(pos.x, pos.y);
            }
            if (pos.x + popup.width > this.width) pos.x = pos.x + sizeW - popup.width;
            pos.y += sizeH;
            if (downward == undefined && pos.y + popup.height > this.height || downward == false) {
                pos.y = pos.y - sizeH - popup.height - 1;
                if (pos.y < 0) {
                    pos.y = 0;
                    pos.x += sizeW / 2;
                }
            }
            return pos;
        };
        GRoot.prototype.showPopup = function (popup, target, downward) {
            if (this._popupStack.length > 0) {
                var k = this._popupStack.indexOf(popup);
                if (k != -1) {
                    for (var i = this._popupStack.length - 1; i >= k; i--) {
                        this.removeChild(this._popupStack.pop());
                    }
                }
            }
            this._popupStack.push(popup);
            if (target != null) {
                var p = target;
                while (p != null) {
                    if (p.parent == this) {
                        if (popup.sortingOrder < p.sortingOrder) {
                            popup.sortingOrder = p.sortingOrder;
                        }
                        break;
                    }
                    p = p.parent;
                }
            }
            this.addChild(popup);
            this.adjustModalLayer();
            var pt = this.getPopupPosition(popup, target, downward);
            popup.setPosition(pt.x, pt.y);
        };
        GRoot.prototype.togglePopup = function (popup, target, downward) {
            if (this._justClosedPopups.indexOf(popup) != -1) return;
            this.showPopup(popup, target, downward);
        };
        GRoot.prototype.hidePopup = function (popup) {
            if (popup != null) {
                var k = this._popupStack.indexOf(popup);
                if (k != -1) {
                    for (var i = this._popupStack.length - 1; i >= k; i--) {
                        this.closePopup(this._popupStack.pop());
                    }
                }
            } else {
                var cnt = this._popupStack.length;
                for (i = cnt - 1; i >= 0; i--) {
                    this.closePopup(this._popupStack[i]);
                }this._popupStack.length = 0;
            }
        };
        Object.defineProperty(GRoot.prototype, "hasAnyPopup", {
            get: function get() {
                return this._popupStack.length != 0;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.prototype.closePopup = function (target) {
            if (target.parent != null) {
                if (target instanceof fgui.Window) target.hide();else this.removeChild(target);
            }
        };
        GRoot.prototype.showTooltips = function (msg) {
            if (this._defaultTooltipWin == null) {
                var resourceURL = fgui.UIConfig.tooltipsWin;
                if (!resourceURL) {
                    console.error("UIConfig.tooltipsWin not defined");
                    return;
                }
                this._defaultTooltipWin = fgui.UIPackage.createObjectFromURL(resourceURL);
            }
            this._defaultTooltipWin.text = msg;
            this.showTooltipsWin(this._defaultTooltipWin);
        };
        GRoot.prototype.showTooltipsWin = function (tooltipWin) {
            this.hideTooltips();
            this._tooltipWin = tooltipWin;
            var pt = this.getTouchPosition();
            pt.x += 10;
            pt.y += 20;
            this.globalToLocal(pt.x, pt.y, pt);
            if (pt.x + this._tooltipWin.width > this.width) {
                pt.x = pt.x - this._tooltipWin.width - 1;
                if (pt.x < 0) pt.x = 10;
            }
            if (pt.y + this._tooltipWin.height > this.height) {
                pt.y = pt.y - this._tooltipWin.height - 1;
                if (pt.y < 0) pt.y = 10;
            }
            this._tooltipWin.setPosition(pt.x, pt.y);
            this.addChild(this._tooltipWin);
        };
        GRoot.prototype.hideTooltips = function () {
            if (this._tooltipWin != null) {
                if (this._tooltipWin.parent) this.removeChild(this._tooltipWin);
                this._tooltipWin = null;
            }
        };
        Object.defineProperty(GRoot.prototype, "volumeScale", {
            get: function get() {
                return this._volumeScale;
            },
            set: function set(value) {
                this._volumeScale = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GRoot.prototype, "playSoundHandler", {
            set: function set(func) {
                this._playSoundHandler = func;
            },
            enumerable: false,
            configurable: true
        });
        GRoot.prototype.playSoundAsync = function (name, volumeScale) {
            var _this = this;
            if (this._playSoundHandler) {
                this._playSoundHandler(name, volumeScale);
                return;
            }
            if (this._volumeScale == 0) return;
            if (volumeScale === undefined) volumeScale = 1;
            var clip = cc.loader.getRes("sound/" + name);
            if (clip) {
                var id = cc.audioEngine.play(clip, false, this._volumeScale * volumeScale);
            } else {
                cc.loader.loadRes("sound/" + name, function (err, clip) {
                    if (err) {
                        cc.error(err);
                        return;
                    }
                    var id = cc.audioEngine.play(clip, false, _this._volumeScale * volumeScale);
                }.bind(this));
            }
        };
        GRoot.prototype.playOneShotSound = function (clip, volumeScale) {
            if (this._volumeScale == 0) return;
            if (volumeScale === undefined) volumeScale = 1;
            cc.audioEngine.play(clip, false, this._volumeScale * volumeScale);
        };
        GRoot.prototype.adjustModalLayer = function () {
            var cnt = this.numChildren;
            if (this._modalWaitPane != null && this._modalWaitPane.parent != null) this.setChildIndex(this._modalWaitPane, cnt - 1);
            for (var i = cnt - 1; i >= 0; i--) {
                var g = this.getChildAt(i);
                if (g instanceof fgui.Window && g.modal) {
                    var w = g;
                    if (w.isShowing && w.visible && w.alpha > 0 && w.parent == this) {
                        if (this._modalLayer.parent == null) this.addChildAt(this._modalLayer, i);else this.setChildIndexBefore(this._modalLayer, i);
                        return;
                    }
                }
            }
            if (this._modalLayer.parent != null) this.removeChild(this._modalLayer);
        };
        GRoot.prototype.onTouchBegin_1 = function (evt) {
            if (this._tooltipWin != null) this.hideTooltips();
            this._justClosedPopups.length = 0;
            if (this._popupStack.length > 0) {
                var mc = evt.initiator;
                while (mc != this && mc != null) {
                    var pindex = this._popupStack.indexOf(mc);
                    if (pindex != -1) {
                        for (var i = this._popupStack.length - 1; i > pindex; i--) {
                            var popup = this._popupStack.pop();
                            this.closePopup(popup);
                            this._justClosedPopups.push(popup);
                        }
                        return;
                    }
                    mc = mc.findParent();
                }
                var cnt = this._popupStack.length;
                for (var i = cnt - 1; i >= 0; i--) {
                    popup = this._popupStack[i];
                    this.closePopup(popup);
                    this._justClosedPopups.push(popup);
                }
                this._popupStack.length = 0;
            }
        };
        GRoot.prototype._adjustVertical = function () {
            var canvasSize = cc.view.getCanvasSize();
            var size = cc.size(canvasSize);
            var globalScale = GRoot.globalScale;
            var viewScaleX = cc.view.getScaleX();
            var viewScaleY = cc.view.getScaleY();
            if (!this._designWidth || !this._designHeight || canvasSize.width / canvasSize.height <= 0.6) {
                console.log("[V] GRoot onWinResize: canvas size = ", size.width, size.height);
                size.width /= viewScaleX;
                size.height /= viewScaleY;
                console.log("[V] GRoot onWinResize: view scale = ", cc.view.getScaleX(), cc.view.getScaleY());
                console.log("[V] GRoot onWinResize: adjust size = ", size.width, size.height);
                var pos = cc.view.getViewportRect().origin;
                console.log("[V] GRoot onWinResize: viewport pos = ", pos.x, pos.y);
                pos.x = pos.x / viewScaleX;
                pos.y = pos.y / viewScaleY;
                console.log("[V] GRoot onWinResize: adjust viewport pos = ", pos.x, pos.y);
                this.setSize(size.width / globalScale, size.height / globalScale);
                this.setScale(globalScale, globalScale);
                GRoot.contentScaleFactor = globalScale;
                this._node.setPosition(-pos.x, this._height * globalScale - pos.y);
                console.log("[V] GRoot onWinResize: root size = ", this.width, this.height);
                console.log("[V] GRoot onWinResize: node pos = ", this._node.x, this._node.y);
                console.log("[V] GRoot onWinResize: root pos = ", this.x, this.y);
                this._modalLayer.setSize(this.width, this.height);
                this._modalLayer.setPosition(0, 0);
            } else {
                console.log("----- GRoot onWinResize -----");
                canvasSize.width /= cc.view.getScaleX();
                canvasSize.height /= cc.view.getScaleY();
                var scaleX = canvasSize.width / this.width;
                var scaleY = canvasSize.height / this.height;
                var scale = Math.min(scaleX, scaleY);
                GRoot.contentScaleFactor = scale;
                this.setScale(scale, scale);
                this._node.x = canvasSize.width / 2 - this.width * scale / 2;
                this.setPosition(canvasSize.width / 2 - this.width * scale / 2, canvasSize.height / 2 - this.height * scale / 2);
                console.log("----- GRoot onWinResize ----- pos = ", this.x, this.y);
                console.log("----- GRoot onWinResize ----- size = ", this.width, this.height);
                console.log("----- GRoot onWinResize ----- scale = ", this.scaleX, this.scaleY);
                this._modalLayer.setSize(canvasSize.width / this.scaleX, canvasSize.height / this.scaleY);
                this._modalLayer.setPosition(this.width / 2 - this._modalLayer.width / 2, this.height / 2 - this._modalLayer.height / 2);
            }
        };
        GRoot.prototype._adjustHorizontal = function () {
            var canvasSize = cc.view.getCanvasSize();
            var globalScale = GRoot.globalScale;
            var viewScaleX = cc.view.getScaleX();
            var viewScaleY = cc.view.getScaleY();
            var size = cc.size(canvasSize);
            size.width /= viewScaleX;
            size.height /= viewScaleY;
            if (!this._designWidth || !this._designHeight || canvasSize.height / canvasSize.width <= this.designHeight / this.designWidth) {
                console.log("[H] GRoot onWinResize: canvas size = ", size.width, size.height);
                console.log("[H] GRoot onWinResize: view scale = ", cc.view.getScaleX(), cc.view.getScaleY());
                console.log("[H] GRoot onWinResize: adjust size = ", size.width, size.height);
                var pos = cc.view.getViewportRect().origin;
                console.log("[H] GRoot onWinResize: viewport pos = ", pos.x, pos.y);
                pos.x = pos.x / viewScaleX;
                pos.y = pos.y / viewScaleY;
                console.log("[H] GRoot onWinResize: adjust viewport pos = ", pos.x, pos.y);
                this.setSize(size.width / globalScale, size.height / globalScale);
                this.setScale(globalScale, globalScale);
                GRoot.contentScaleFactor = globalScale;
                this._node.setPosition(-pos.x, this._height * globalScale - pos.y);
                this._x = pos.x;
                this._y = pos.y;
                console.log("[H] GRoot onWinResize: root size = ", this.width, this.height);
                console.log("[H] GRoot onWinResize: node pos = ", this._node.x, this._node.y);
                console.log("[H] GRoot onWinResize: root pos = ", this.x, this.y);
                this._modalLayer.setSize(this.width, this.height);
                this._modalLayer.setPosition(0, 0);
            } else {
                console.log("[H] ----- GRoot onWinResize ----- canvas size ", canvasSize.width, canvasSize.height);
                console.log("[H] ----- GRoot onWinResize ----- view size ", size.width, size.height);
                var scaleX = size.width / this.width;
                var scaleY = size.height / this.height;
                var scale = Math.min(scaleX, scaleY);
                GRoot.contentScaleFactor = scale;
                this.setScale(scale, scale);
                var x = 0;
                var y = this.height * scale;
                this._node.x = x;
                this._node.y = y;
                this.setPosition(x, y);
                console.log("[H] ----- GRoot onWinResize ----- pos = ", this.x, this.y);
                console.log("[H] ----- GRoot onWinResize ----- node pos = ", this.node.x, this.node.y);
                console.log("[H] ----- GRoot onWinResize ----- size = ", this.width, this.height);
                console.log("[H] ----- GRoot onWinResize ----- scale = ", this.scaleX, this.scaleY);
                this._modalLayer.setSize(size.width / this.scaleX, size.height / this.scaleY);
                this._modalLayer.setPosition(this.width / 2 - this._modalLayer.width / 2, this.height / 2 - this._modalLayer.height / 2);
            }
        };
        GRoot.prototype.onWinResize = function () {
            if (GRoot.orientation == AppOrientation.VERTICAL) {
                this._adjustVertical();
            } else {
                this._adjustHorizontal();
            }
            this.updateContentScaleLevel();
            this._node.emit("root-change-size");
        };
        GRoot.prototype.handlePositionChanged = function () {};
        GRoot.prototype.updateContentScaleLevel = function () {
            var ss = Math.max(cc.view.getScaleX(), cc.view.getScaleY());
            if (ss >= 3.5) GRoot.contentScaleLevel = 3;else if (ss >= 2.5) GRoot.contentScaleLevel = 2;else if (ss >= 1.5) GRoot.contentScaleLevel = 1;else GRoot.contentScaleLevel = 0;
        };
        GRoot.contentScaleLevel = 0;
        GRoot.contentScaleFactor = 1;
        GRoot.orientation = AppOrientation.VERTICAL;
        GRoot.globalScale = 0.5;
        return GRoot;
    }(fgui.GComponent);
    fgui.GRoot = GRoot;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GScrollBar = function (_super) {
        __extends(GScrollBar, _super);
        function GScrollBar() {
            var _this = _super.call(this) || this;
            _this._node.name = "GScrollBar";
            _this._dragOffset = new cc.Vec2();
            _this._scrollPerc = 0;
            return _this;
        }
        GScrollBar.prototype.setScrollPane = function (target, vertical) {
            this._target = target;
            this._vertical = vertical;
        };
        GScrollBar.prototype.setDisplayPerc = function (value) {
            if (this._vertical) {
                if (!this._fixedGripSize) this._grip.height = Math.floor(value * this._bar.height);
                this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;
            } else {
                if (!this._fixedGripSize) this._grip.width = Math.floor(value * this._bar.width);
                this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
            }
            this._grip.visible = value != 0 && value != 1;
        };
        GScrollBar.prototype.setScrollPerc = function (val) {
            this._scrollPerc = val;
            if (this._vertical) this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;else this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
        };
        Object.defineProperty(GScrollBar.prototype, "minSize", {
            get: function get() {
                if (this._vertical) return (this._arrowButton1 != null ? this._arrowButton1.height : 0) + (this._arrowButton2 != null ? this._arrowButton2.height : 0);else return (this._arrowButton1 != null ? this._arrowButton1.width : 0) + (this._arrowButton2 != null ? this._arrowButton2.width : 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GScrollBar.prototype, "gripDragging", {
            get: function get() {
                return this._gripDragging;
            },
            enumerable: false,
            configurable: true
        });
        GScrollBar.prototype.constructExtension = function (buffer) {
            buffer.seek(0, 6);
            this._fixedGripSize = buffer.readBool();
            this._grip = this.getChild("grip");
            if (!this._grip) {
                console.error("需要定义grip");
                return;
            }
            this._bar = this.getChild("bar");
            if (!this._bar) {
                console.error("需要定义bar");
                return;
            }
            this._arrowButton1 = this.getChild("arrow1");
            this._arrowButton2 = this.getChild("arrow2");
            this._grip.on(fgui.Event.TOUCH_BEGIN, this.onGripTouchDown, this);
            this._grip.on(fgui.Event.TOUCH_MOVE, this.onGripTouchMove, this);
            this._grip.on(fgui.Event.TOUCH_END, this.onGripTouchEnd, this);
            if (this._arrowButton1) this._arrowButton1.on(fgui.Event.TOUCH_BEGIN, this.onClickArrow1, this);
            if (this._arrowButton2) this._arrowButton2.on(fgui.Event.TOUCH_BEGIN, this.onClickArrow2, this);
            this.on(fgui.Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };
        GScrollBar.prototype.onGripTouchDown = function (evt) {
            evt.stopPropagation();
            evt.captureTouch();
            this._gripDragging = true;
            this._target.updateScrollBarVisible();
            this.globalToLocal(evt.pos.x, evt.pos.y, this._dragOffset);
            this._dragOffset.x -= this._grip.x;
            this._dragOffset.y -= this._grip.y;
        };
        GScrollBar.prototype.onGripTouchMove = function (evt) {
            if (!this.onStage) return;
            var pt = this.globalToLocal(evt.pos.x, evt.pos.y, GScrollBar.sScrollbarHelperPoint);
            if (this._vertical) {
                var curY = pt.y - this._dragOffset.y;
                this._target.setPercY((curY - this._bar.y) / (this._bar.height - this._grip.height), false);
            } else {
                var curX = pt.x - this._dragOffset.x;
                this._target.setPercX((curX - this._bar.x) / (this._bar.width - this._grip.width), false);
            }
        };
        GScrollBar.prototype.onGripTouchEnd = function (evt) {
            if (!this.onStage) return;
            this._gripDragging = false;
            this._target.updateScrollBarVisible();
        };
        GScrollBar.prototype.onClickArrow1 = function (evt) {
            evt.stopPropagation();
            if (this._vertical) this._target.scrollUp();else this._target.scrollLeft();
        };
        GScrollBar.prototype.onClickArrow2 = function (evt) {
            evt.stopPropagation();
            if (this._vertical) this._target.scrollDown();else this._target.scrollRight();
        };
        GScrollBar.prototype.onBarTouchBegin = function (evt) {
            var pt = this._grip.globalToLocal(evt.pos.x, evt.pos.y, GScrollBar.sScrollbarHelperPoint);
            if (this._vertical) {
                if (pt.y < 0) this._target.scrollUp(4);else this._target.scrollDown(4);
            } else {
                if (pt.x < 0) this._target.scrollLeft(4);else this._target.scrollRight(4);
            }
        };
        GScrollBar.sScrollbarHelperPoint = new cc.Vec2();
        return GScrollBar;
    }(fgui.GComponent);
    fgui.GScrollBar = GScrollBar;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GSlider = function (_super) {
        __extends(GSlider, _super);
        function GSlider() {
            var _this = _super.call(this) || this;
            _this._min = 0;
            _this._max = 0;
            _this._value = 0;
            _this._barMaxWidth = 0;
            _this._barMaxHeight = 0;
            _this._barMaxWidthDelta = 0;
            _this._barMaxHeightDelta = 0;
            _this._clickPercent = 0;
            _this._barStartX = 0;
            _this._barStartY = 0;
            _this.changeOnClick = true;
            _this.canDrag = true;
            _this._node.name = "GSlider";
            _this._titleType = fgui.ProgressTitleType.Percent;
            _this._value = 50;
            _this._max = 100;
            _this._clickPos = new cc.Vec2();
            return _this;
        }
        Object.defineProperty(GSlider.prototype, "titleType", {
            get: function get() {
                return this._titleType;
            },
            set: function set(value) {
                this._titleType = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GSlider.prototype, "wholeNumbers", {
            get: function get() {
                return this._wholeNumbers;
            },
            set: function set(value) {
                if (this._wholeNumbers != value) {
                    this._wholeNumbers = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GSlider.prototype, "min", {
            get: function get() {
                return this._min;
            },
            set: function set(value) {
                if (this._min != value) {
                    this._min = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GSlider.prototype, "max", {
            get: function get() {
                return this._max;
            },
            set: function set(value) {
                if (this._max != value) {
                    this._max = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GSlider.prototype, "value", {
            get: function get() {
                return this._value;
            },
            set: function set(value) {
                if (this._value != value) {
                    this._value = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        GSlider.prototype.update = function () {
            this.updateWithPercent((this._value - this._min) / (this._max - this._min));
        };
        GSlider.prototype.updateWithPercent = function (percent, manual) {
            percent = fgui.ToolSet.clamp01(percent);
            if (manual) {
                var newValue = fgui.ToolSet.clamp(this._min + (this._max - this._min) * percent, this._min, this._max);
                if (this._wholeNumbers) {
                    newValue = Math.round(newValue);
                    percent = fgui.ToolSet.clamp01((newValue - this._min) / (this._max - this._min));
                }
                if (newValue != this._value) {
                    this._value = newValue;
                    this._node.emit(fgui.Event.STATUS_CHANGED, this);
                }
            }
            if (this._titleObject) {
                switch (this._titleType) {
                    case fgui.ProgressTitleType.Percent:
                        this._titleObject.text = Math.floor(percent * 100) + "%";
                        break;
                    case fgui.ProgressTitleType.ValueAndMax:
                        this._titleObject.text = this._value + "/" + this._max;
                        break;
                    case fgui.ProgressTitleType.Value:
                        this._titleObject.text = "" + this._value;
                        break;
                    case fgui.ProgressTitleType.Max:
                        this._titleObject.text = "" + this._max;
                        break;
                }
            }
            var fullWidth = this.width - this._barMaxWidthDelta;
            var fullHeight = this.height - this._barMaxHeightDelta;
            if (!this._reverse) {
                if (this._barObjectH) this._barObjectH.width = Math.round(fullWidth * percent);
                if (this._barObjectV) this._barObjectV.height = Math.round(fullHeight * percent);
            } else {
                if (this._barObjectH) {
                    this._barObjectH.width = Math.round(fullWidth * percent);
                    this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
                }
                if (this._barObjectV) {
                    this._barObjectV.height = Math.round(fullHeight * percent);
                    this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
                }
            }
        };
        GSlider.prototype.constructExtension = function (buffer) {
            buffer.seek(0, 6);
            this._titleType = buffer.readByte();
            this._reverse = buffer.readBool();
            if (buffer.version >= 2) {
                this._wholeNumbers = buffer.readBool();
                this.changeOnClick = buffer.readBool();
            }
            this._titleObject = this.getChild("title");
            this._barObjectH = this.getChild("bar");
            this._barObjectV = this.getChild("bar_v");
            this._gripObject = this.getChild("grip");
            if (this._barObjectH) {
                this._barMaxWidth = this._barObjectH.width;
                this._barMaxWidthDelta = this.width - this._barMaxWidth;
                this._barStartX = this._barObjectH.x;
            }
            if (this._barObjectV) {
                this._barMaxHeight = this._barObjectV.height;
                this._barMaxHeightDelta = this.height - this._barMaxHeight;
                this._barStartY = this._barObjectV.y;
            }
            if (this._gripObject) {
                this._gripObject.on(fgui.Event.TOUCH_BEGIN, this.onGripTouchBegin, this);
                this._gripObject.on(fgui.Event.TOUCH_MOVE, this.onGripTouchMove, this);
            }
            this._node.on(fgui.Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };
        GSlider.prototype.handleSizeChanged = function () {
            _super.prototype.handleSizeChanged.call(this);
            if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
            if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
            if (!this._underConstruct) this.update();
        };
        GSlider.prototype.setup_afterAdd = function (buffer, beginPos) {
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            if (!buffer.seek(beginPos, 6)) {
                this.update();
                return;
            }
            if (buffer.readByte() != this.packageItem.objectType) {
                this.update();
                return;
            }
            this._value = buffer.readInt();
            this._max = buffer.readInt();
            if (buffer.version >= 2) this._min = buffer.readInt();
            this.update();
        };
        GSlider.prototype.onGripTouchBegin = function (evt) {
            this.canDrag = true;
            evt.stopPropagation();
            evt.captureTouch();
            this._clickPos = this.globalToLocal(evt.pos.x, evt.pos.y);
            this._clickPercent = fgui.ToolSet.clamp01((this._value - this._min) / (this._max - this._min));
        };
        GSlider.prototype.onGripTouchMove = function (evt) {
            if (!this.canDrag) {
                return;
            }
            var pt = this.globalToLocal(evt.pos.x, evt.pos.y, GSlider.sSilderHelperPoint);
            var deltaX = pt.x - this._clickPos.x;
            var deltaY = pt.y - this._clickPos.y;
            if (this._reverse) {
                deltaX = -deltaX;
                deltaY = -deltaY;
            }
            var percent;
            if (this._barObjectH) percent = this._clickPercent + deltaX / this._barMaxWidth;else percent = this._clickPercent + deltaY / this._barMaxHeight;
            this.updateWithPercent(percent, true);
        };
        GSlider.prototype.onBarTouchBegin = function (evt) {
            if (!this.changeOnClick) return;
            var pt = this._gripObject.globalToLocal(evt.pos.x, evt.pos.y, GSlider.sSilderHelperPoint);
            var percent = fgui.ToolSet.clamp01((this._value - this._min) / (this._max - this._min));
            var delta;
            if (this._barObjectH) delta = pt.x / this._barMaxWidth;
            if (this._barObjectV) delta = pt.y / this._barMaxHeight;
            if (this._reverse) percent -= delta;else percent += delta;
            this.updateWithPercent(percent, true);
        };
        GSlider.sSilderHelperPoint = new cc.Vec2();
        return GSlider;
    }(fgui.GComponent);
    fgui.GSlider = GSlider;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTextInput = function (_super) {
        __extends(GTextInput, _super);
        function GTextInput() {
            var _this = _super.call(this) || this;
            _this._node.name = "GTextInput";
            _this._touchDisabled = false;
            return _this;
        }
        GTextInput.prototype.createRenderer = function () {
            this._editBox = this._node.addComponent(MyEditBox);
            this._editBox.maxLength = -1;
            this._editBox["_updateTextLabel"]();
            this._node.on('text-changed', this.onTextChanged, this);
            this.on(fgui.Event.TOUCH_END, this.onTouchEnd1, this);
            this.autoSize = fgui.AutoSizeType.None;
        };
        Object.defineProperty(GTextInput.prototype, "editable", {
            get: function get() {
                return this._editBox.enabled;
            },
            set: function set(val) {
                this._editBox.enabled = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "maxLength", {
            get: function get() {
                return this._editBox.maxLength;
            },
            set: function set(val) {
                if (val == 0) val = -1;
                this._editBox.maxLength = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "promptText", {
            get: function get() {
                return this._promptText;
            },
            set: function set(val) {
                this._promptText = val;
                var newCreate = !this._editBox.placeholderLabel;
                this._editBox["_updatePlaceholderLabel"]();
                if (newCreate) this.assignFont(this._editBox.placeholderLabel, this._realFont);
                this._editBox.placeholderLabel.string = fgui.UBBParser.inst.parse(this._promptText, true);
                if (fgui.UBBParser.inst.lastColor) {
                    var c = this._editBox.placeholderLabel.node.color;
                    if (!c) c = new cc.Color();
                    c.fromHEX(fgui.UBBParser.inst.lastColor);
                    this.assignFontColor(this._editBox.placeholderLabel, c);
                } else this.assignFontColor(this._editBox.placeholderLabel, this._color);
                if (fgui.UBBParser.inst.lastSize) this._editBox.placeholderLabel.fontSize = parseInt(fgui.UBBParser.inst.lastSize);else this._editBox.placeholderLabel.fontSize = this._fontSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "restrict", {
            get: function get() {
                return "";
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "password", {
            get: function get() {
                return this._editBox.inputFlag == cc.EditBox.InputFlag.PASSWORD;
                ;
            },
            set: function set(val) {
                this._editBox.inputFlag = val ? cc.EditBox.InputFlag.PASSWORD : cc.EditBox.InputFlag.DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "align", {
            get: function get() {
                return this._editBox.textLabel.horizontalAlign;
            },
            set: function set(value) {
                this._editBox.textLabel.horizontalAlign = value;
                if (this._editBox.placeholderLabel) {
                    this._editBox.placeholderLabel.horizontalAlign = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "verticalAlign", {
            get: function get() {
                return this._editBox.textLabel.verticalAlign;
            },
            set: function set(value) {
                this._editBox.textLabel.verticalAlign = value;
                if (this._editBox.placeholderLabel) {
                    this._editBox.placeholderLabel.verticalAlign = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "letterSpacing", {
            get: function get() {
                return 0;
            },
            set: function set(value) {},
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTextInput.prototype, "singleLine", {
            get: function get() {
                return this._editBox.inputMode != cc.EditBox.InputMode.ANY;
            },
            set: function set(value) {
                this._editBox.inputMode = value ? cc.EditBox.InputMode.SINGLE_LINE : cc.EditBox.InputMode.ANY;
            },
            enumerable: false,
            configurable: true
        });
        GTextInput.prototype.requestFocus = function () {
            this._editBox.focus();
        };
        GTextInput.prototype.markSizeChanged = function () {};
        GTextInput.prototype.updateText = function () {
            var text2 = this._text;
            if (this._templateVars != null) text2 = this.parseTemplate(text2);
            if (this._ubbEnabled) text2 = fgui.UBBParser.inst.parse(fgui.ToolSet.encodeHTML(text2), true);
            this._editBox.string = text2;
        };
        GTextInput.prototype.updateFont = function () {
            this.assignFont(this._editBox.textLabel, this._realFont);
            if (this._editBox.placeholderLabel) this.assignFont(this._editBox.placeholderLabel, this._realFont);
        };
        GTextInput.prototype.updateFontColor = function () {
            this.assignFontColor(this._editBox.textLabel, this._color);
        };
        GTextInput.prototype.updateFontSize = function () {
            this._editBox.textLabel.fontSize = this._fontSize;
            this._editBox.textLabel.lineHeight = this._fontSize + this._leading;
            if (this._editBox.placeholderLabel) this._editBox.placeholderLabel.fontSize = this._editBox.textLabel.fontSize;
        };
        GTextInput.prototype.updateOverflow = function () {};
        GTextInput.prototype.onTextChanged = function () {
            this._text = this._editBox.string;
        };
        GTextInput.prototype.onTouchEnd1 = function (evt) {
            this._editBox.openKeyboard(evt.touch);
        };
        GTextInput.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 4);
            var str = buffer.readS();
            if (str != null) this.promptText = str;
            str = buffer.readS();
            if (str != null) this.restrict = str;
            var iv = buffer.readInt();
            if (iv != 0) this.maxLength = iv;
            iv = buffer.readInt();
            if (iv != 0) {}
            if (buffer.readBool()) this.password = true;
            if (this._editBox.placeholderLabel) {
                var hAlign = this._editBox.textLabel.horizontalAlign;
                this._editBox.placeholderLabel.horizontalAlign = hAlign;
                var vAlign = this._editBox.textLabel.verticalAlign;
                this._editBox.placeholderLabel.verticalAlign = vAlign;
            }
        };
        return GTextInput;
    }(fgui.GTextField);
    fgui.GTextInput = GTextInput;
    var MyEditBox = function (_super) {
        __extends(MyEditBox, _super);
        function MyEditBox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyEditBox.prototype._registerEvent = function () {};
        MyEditBox.prototype._syncSize = function () {
            var size = this.node.getContentSize();
            var impl = this["_impl"];
            impl.setSize(size.width, size.height);
            if (this.textLabel) this.textLabel.node.setContentSize(size.width, size.height);
            if (this.placeholderLabel) this.placeholderLabel.node.setContentSize(size.width, size.height);
        };
        MyEditBox.prototype.openKeyboard = function (touch) {
            var impl = this["_impl"];
            if (impl) {
                impl.beginEditing();
            }
        };
        return MyEditBox;
    }(cc.EditBox);
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTree = function (_super) {
        __extends(GTree, _super);
        function GTree() {
            var _this = _super.call(this) || this;
            _this._indent = 15;
            _this._rootNode = new fgui.GTreeNode(true);
            _this._rootNode._setTree(_this);
            _this._rootNode.expanded = true;
            return _this;
        }
        Object.defineProperty(GTree.prototype, "rootNode", {
            get: function get() {
                return this._rootNode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTree.prototype, "indent", {
            get: function get() {
                return this._indent;
            },
            set: function set(value) {
                this._indent = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTree.prototype, "clickToExpand", {
            get: function get() {
                return this._clickToExpand;
            },
            set: function set(value) {
                this._clickToExpand = value;
            },
            enumerable: false,
            configurable: true
        });
        GTree.prototype.getSelectedNode = function () {
            if (this.selectedIndex != -1) return this.getChildAt(this.selectedIndex)._treeNode;else return null;
        };
        GTree.prototype.getSelectedNodes = function (result) {
            if (!result) result = new Array();
            GTree.helperIntList.length = 0;
            _super.prototype.getSelection.call(this, GTree.helperIntList);
            var cnt = GTree.helperIntList.length;
            var ret = new Array();
            for (var i = 0; i < cnt; i++) {
                var node = this.getChildAt(GTree.helperIntList[i])._treeNode;
                ret.push(node);
            }
            return ret;
        };
        GTree.prototype.selectNode = function (node, scrollItToView) {
            var parentNode = node.parent;
            while (parentNode != null && parentNode != this._rootNode) {
                parentNode.expanded = true;
                parentNode = parentNode.parent;
            }
            if (!node._cell) return;
            this.addSelection(this.getChildIndex(node._cell), scrollItToView);
        };
        GTree.prototype.unselectNode = function (node) {
            if (!node._cell) return;
            this.removeSelection(this.getChildIndex(node._cell));
        };
        GTree.prototype.expandAll = function (folderNode) {
            if (!folderNode) folderNode = this._rootNode;
            folderNode.expanded = true;
            var cnt = folderNode.numChildren;
            for (var i = 0; i < cnt; i++) {
                var node = folderNode.getChildAt(i);
                if (node.isFolder) this.expandAll(node);
            }
        };
        GTree.prototype.collapseAll = function (folderNode) {
            if (!folderNode) folderNode = this._rootNode;
            if (folderNode != this._rootNode) folderNode.expanded = false;
            var cnt = folderNode.numChildren;
            for (var i = 0; i < cnt; i++) {
                var node = folderNode.getChildAt(i);
                if (node.isFolder) this.collapseAll(node);
            }
        };
        GTree.prototype.createCell = function (node) {
            var child = this.getFromPool(node._resURL);
            if (!child) throw new Error("cannot create tree node object.");
            child._treeNode = node;
            node._cell = child;
            var indentObj = child.getChild("indent");
            if (indentObj != null) indentObj.width = (node.level - 1) * this._indent;
            var cc;
            cc = child.getController("expanded");
            if (cc) {
                cc.on(fgui.Event.STATUS_CHANGED, this.__expandedStateChanged, this);
                cc.selectedIndex = node.expanded ? 1 : 0;
            }
            cc = child.getController("leaf");
            if (cc) cc.selectedIndex = node.isFolder ? 0 : 1;
            if (node.isFolder) node._cell.on(fgui.Event.TOUCH_BEGIN, this.__cellMouseDown, this);
            if (this.treeNodeRender) this.treeNodeRender(node, child);
        };
        GTree.prototype._afterInserted = function (node) {
            if (!node._cell) this.createCell(node);
            var index = this.getInsertIndexForNode(node);
            this.addChildAt(node._cell, index);
            if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
            if (node.isFolder && node.expanded) this.checkChildren(node, index);
        };
        GTree.prototype.getInsertIndexForNode = function (node) {
            var prevNode = node.getPrevSibling();
            if (prevNode == null) prevNode = node.parent;
            var insertIndex = this.getChildIndex(prevNode._cell) + 1;
            var myLevel = node.level;
            var cnt = this.numChildren;
            for (var i = insertIndex; i < cnt; i++) {
                var testNode = this.getChildAt(i)._treeNode;
                if (testNode.level <= myLevel) break;
                insertIndex++;
            }
            return insertIndex;
        };
        GTree.prototype._afterRemoved = function (node) {
            this.removeNode(node);
        };
        GTree.prototype._afterExpanded = function (node) {
            if (node == this._rootNode) {
                this.checkChildren(this._rootNode, 0);
                return;
            }
            if (this.treeNodeWillExpand != null) this.treeNodeWillExpand(node, true);
            if (node._cell == null) return;
            if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
            var cc = node._cell.getController("expanded");
            if (cc) cc.selectedIndex = 1;
            if (node._cell.parent != null) this.checkChildren(node, this.getChildIndex(node._cell));
        };
        GTree.prototype._afterCollapsed = function (node) {
            if (node == this._rootNode) {
                this.checkChildren(this._rootNode, 0);
                return;
            }
            if (this.treeNodeWillExpand) this.treeNodeWillExpand(node, false);
            if (node._cell == null) return;
            if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
            var cc = node._cell.getController("expanded");
            if (cc) cc.selectedIndex = 0;
            if (node._cell.parent != null) this.hideFolderNode(node);
        };
        GTree.prototype._afterMoved = function (node) {
            var startIndex = this.getChildIndex(node._cell);
            var endIndex;
            if (node.isFolder) endIndex = this.getFolderEndIndex(startIndex, node.level);else endIndex = startIndex + 1;
            var insertIndex = this.getInsertIndexForNode(node);
            var i;
            var cnt = endIndex - startIndex;
            var obj;
            if (insertIndex < startIndex) {
                for (i = 0; i < cnt; i++) {
                    obj = this.getChildAt(startIndex + i);
                    this.setChildIndex(obj, insertIndex + i);
                }
            } else {
                for (i = 0; i < cnt; i++) {
                    obj = this.getChildAt(startIndex);
                    this.setChildIndex(obj, insertIndex);
                }
            }
        };
        GTree.prototype.getFolderEndIndex = function (startIndex, level) {
            var cnt = this.numChildren;
            for (var i = startIndex + 1; i < cnt; i++) {
                var node = this.getChildAt(i)._treeNode;
                if (node.level <= level) return i;
            }
            return cnt;
        };
        GTree.prototype.checkChildren = function (folderNode, index) {
            var cnt = folderNode.numChildren;
            for (var i = 0; i < cnt; i++) {
                index++;
                var node = folderNode.getChildAt(i);
                if (node._cell == null) this.createCell(node);
                if (!node._cell.parent) this.addChildAt(node._cell, index);
                if (node.isFolder && node.expanded) index = this.checkChildren(node, index);
            }
            return index;
        };
        GTree.prototype.hideFolderNode = function (folderNode) {
            var cnt = folderNode.numChildren;
            for (var i = 0; i < cnt; i++) {
                var node = folderNode.getChildAt(i);
                if (node._cell) this.removeChild(node._cell);
                if (node.isFolder && node.expanded) this.hideFolderNode(node);
            }
        };
        GTree.prototype.removeNode = function (node) {
            if (node._cell != null) {
                if (node._cell.parent != null) this.removeChild(node._cell);
                this.returnToPool(node._cell);
                node._cell._treeNode = null;
                node._cell = null;
            }
            if (node.isFolder) {
                var cnt = node.numChildren;
                for (var i = 0; i < cnt; i++) {
                    var node2 = node.getChildAt(i);
                    this.removeNode(node2);
                }
            }
        };
        GTree.prototype.__cellMouseDown = function (evt) {
            var node = fgui.GObject.cast(evt.currentTarget)._treeNode;
            this._expandedStatusInEvt = node.expanded;
        };
        GTree.prototype.__expandedStateChanged = function (cc) {
            var node = cc.parent._treeNode;
            node.expanded = cc.selectedIndex == 1;
        };
        GTree.prototype.dispatchItemEvent = function (item, evt) {
            if (this._clickToExpand != 0) {
                var node = item._treeNode;
                if (node && this._expandedStatusInEvt == node.expanded) {
                    if (this._clickToExpand == 2) {} else node.expanded = !node.expanded;
                }
            }
            _super.prototype.dispatchItemEvent.call(this, item, evt);
        };
        GTree.prototype.setup_beforeAdd = function (buffer, beginPos) {
            _super.prototype.setup_beforeAdd.call(this, buffer, beginPos);
            buffer.seek(beginPos, 9);
            this._indent = buffer.readInt();
            this._clickToExpand = buffer.readByte();
        };
        GTree.prototype.readItems = function (buffer) {
            var cnt;
            var i;
            var nextPos;
            var str;
            var isFolder;
            var lastNode;
            var level;
            var prevLevel = 0;
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                str = buffer.readS();
                if (str == null) {
                    str = this.defaultItem;
                    if (!str) {
                        buffer.position = nextPos;
                        continue;
                    }
                }
                isFolder = buffer.readBool();
                level = buffer.readByte();
                var node = new fgui.GTreeNode(isFolder, str);
                node.expanded = true;
                if (i == 0) this._rootNode.addChild(node);else {
                    if (level > prevLevel) lastNode.addChild(node);else if (level < prevLevel) {
                        for (var j = level; j <= prevLevel; j++) {
                            lastNode = lastNode.parent;
                        }lastNode.addChild(node);
                    } else lastNode.parent.addChild(node);
                }
                lastNode = node;
                prevLevel = level;
                this.setupItem(buffer, node.cell);
                buffer.position = nextPos;
            }
        };
        GTree.helperIntList = new Array();
        return GTree;
    }(fgui.GList);
    fgui.GTree = GTree;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTreeNode = function () {
        function GTreeNode(hasChild, resURL) {
            this._expanded = false;
            this._level = 0;
            this._resURL = resURL;
            if (hasChild) this._children = new Array();
        }
        Object.defineProperty(GTreeNode.prototype, "expanded", {
            get: function get() {
                return this._expanded;
            },
            set: function set(value) {
                if (this._children == null) return;
                if (this._expanded != value) {
                    this._expanded = value;
                    if (this._tree != null) {
                        if (this._expanded) this._tree._afterExpanded(this);else this._tree._afterCollapsed(this);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "isFolder", {
            get: function get() {
                return this._children != null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "parent", {
            get: function get() {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "text", {
            get: function get() {
                if (this._cell != null) return this._cell.text;else return null;
            },
            set: function set(value) {
                if (this._cell != null) this._cell.text = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "icon", {
            get: function get() {
                if (this._cell != null) return this._cell.icon;else return null;
            },
            set: function set(value) {
                if (this._cell != null) this._cell.icon = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "cell", {
            get: function get() {
                return this._cell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTreeNode.prototype, "level", {
            get: function get() {
                return this._level;
            },
            enumerable: false,
            configurable: true
        });
        GTreeNode.prototype._setLevel = function (value) {
            this._level = value;
        };
        GTreeNode.prototype.addChild = function (child) {
            this.addChildAt(child, this._children.length);
            return child;
        };
        GTreeNode.prototype.addChildAt = function (child, index) {
            if (!child) throw new Error("child is null");
            var numChildren = this._children.length;
            if (index >= 0 && index <= numChildren) {
                if (child._parent == this) {
                    this.setChildIndex(child, index);
                } else {
                    if (child._parent) child._parent.removeChild(child);
                    var cnt = this._children.length;
                    if (index == cnt) this._children.push(child);else this._children.splice(index, 0, child);
                    child._parent = this;
                    child._level = this._level + 1;
                    child._setTree(this._tree);
                    if (this._tree != null && this == this._tree.rootNode || this._cell != null && this._cell.parent != null && this._expanded) this._tree._afterInserted(child);
                }
                return child;
            } else {
                throw new RangeError("Invalid child index");
            }
        };
        GTreeNode.prototype.removeChild = function (child) {
            var childIndex = this._children.indexOf(child);
            if (childIndex != -1) {
                this.removeChildAt(childIndex);
            }
            return child;
        };
        GTreeNode.prototype.removeChildAt = function (index) {
            if (index >= 0 && index < this.numChildren) {
                var child = this._children[index];
                this._children.splice(index, 1);
                child._parent = null;
                if (this._tree != null) {
                    child._setTree(null);
                    this._tree._afterRemoved(child);
                }
                return child;
            } else {
                throw "Invalid child index";
            }
        };
        GTreeNode.prototype.removeChildren = function (beginIndex, endIndex) {
            if (beginIndex === void 0) {
                beginIndex = 0;
            }
            if (endIndex === void 0) {
                endIndex = -1;
            }
            if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;
            for (var i = beginIndex; i <= endIndex; ++i) {
                this.removeChildAt(beginIndex);
            }
        };
        GTreeNode.prototype.getChildAt = function (index) {
            if (index >= 0 && index < this.numChildren) return this._children[index];else throw "Invalid child index";
        };
        GTreeNode.prototype.getChildIndex = function (child) {
            return this._children.indexOf(child);
        };
        GTreeNode.prototype.getPrevSibling = function () {
            if (this._parent == null) return null;
            var i = this._parent._children.indexOf(this);
            if (i <= 0) return null;
            return this._parent._children[i - 1];
        };
        GTreeNode.prototype.getNextSibling = function () {
            if (this._parent == null) return null;
            var i = this._parent._children.indexOf(this);
            if (i < 0 || i >= this._parent._children.length - 1) return null;
            return this._parent._children[i + 1];
        };
        GTreeNode.prototype.setChildIndex = function (child, index) {
            var oldIndex = this._children.indexOf(child);
            if (oldIndex == -1) throw "Not a child of this container";
            var cnt = this._children.length;
            if (index < 0) index = 0;else if (index > cnt) index = cnt;
            if (oldIndex == index) return;
            this._children.splice(oldIndex, 1);
            this._children.splice(index, 0, child);
            if (this._tree != null && this == this._tree.rootNode || this._cell != null && this._cell.parent != null && this._expanded) this._tree._afterMoved(child);
        };
        GTreeNode.prototype.swapChildren = function (child1, child2) {
            var index1 = this._children.indexOf(child1);
            var index2 = this._children.indexOf(child2);
            if (index1 == -1 || index2 == -1) throw "Not a child of this container";
            this.swapChildrenAt(index1, index2);
        };
        GTreeNode.prototype.swapChildrenAt = function (index1, index2) {
            var child1 = this._children[index1];
            var child2 = this._children[index2];
            this.setChildIndex(child1, index2);
            this.setChildIndex(child2, index1);
        };
        Object.defineProperty(GTreeNode.prototype, "numChildren", {
            get: function get() {
                return this._children.length;
            },
            enumerable: false,
            configurable: true
        });
        GTreeNode.prototype.expandToRoot = function () {
            var p = this;
            while (p) {
                p.expanded = true;
                p = p.parent;
            }
        };
        Object.defineProperty(GTreeNode.prototype, "tree", {
            get: function get() {
                return this._tree;
            },
            enumerable: false,
            configurable: true
        });
        GTreeNode.prototype._setTree = function (value) {
            this._tree = value;
            if (this._tree != null && this._tree.treeNodeWillExpand && this._expanded) this._tree.treeNodeWillExpand(this, true);
            if (this._children != null) {
                var cnt = this._children.length;
                for (var i = 0; i < cnt; i++) {
                    var node = this._children[i];
                    node._level = this._level + 1;
                    node._setTree(value);
                }
            }
        };
        return GTreeNode;
    }();
    fgui.GTreeNode = GTreeNode;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Margin = function () {
        function Margin() {
            this.left = 0;
            this.right = 0;
            this.top = 0;
            this.bottom = 0;
        }
        Margin.prototype.copy = function (source) {
            this.top = source.top;
            this.bottom = source.bottom;
            this.left = source.left;
            this.right = source.right;
        };
        Margin.prototype.isNone = function () {
            return this.left == 0 && this.right == 0 && this.top == 0 && this.bottom == 0;
        };
        return Margin;
    }();
    fgui.Margin = Margin;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var PackageItemLoadListener = function () {
        function PackageItemLoadListener() {}
        PackageItemLoadListener.prototype.compare = function (callback, thisArgs) {
            return this.callback == callback && this.thisArgs == thisArgs;
        };
        PackageItemLoadListener.prototype.call = function (args) {
            if (this.thisArgs) {
                this.callback.apply(this.thisArgs, [args]);
            } else {
                this.callback(args);
            }
        };
        return PackageItemLoadListener;
    }();
    var PackageItem = function () {
        function PackageItem() {
            this.width = 0;
            this.height = 0;
            this.tileGridIndice = 0;
            this.interval = 0;
            this.repeatDelay = 0;
            this._listeners = [];
        }
        PackageItem.prototype.setup = function (buffer, url) {};
        PackageItem.prototype.onLoad = function (onComplete, thisArgs) {
            var _this = this;
            var lsn = new PackageItemLoadListener();
            lsn.callback = onComplete;
            lsn.thisArgs = thisArgs;
            if (this.decoded) {
                lsn.call(this.asset);
            } else {
                this._listeners.push(lsn);
                if (!this.loading) {
                    this.loading = true;
                    this._doLoad(function (asset) {
                        _this.loading = false;
                        _this.decoded = true;
                        _this.asset = asset;
                        var listeners = _this._listeners;
                        _this._listeners = [];
                        listeners.forEach(function (lsn) {
                            lsn.call(asset);
                        });
                    });
                }
            }
        };
        PackageItem.prototype._doLoad = function (callback) {
            callback(null);
        };
        PackageItem.prototype.offLoad = function (onComplete, thisArgs) {
            var idx = -1;
            var cnt = this._listeners.length;
            for (var i = 0; i < cnt; ++i) {
                if (this._listeners[i].compare(onComplete, thisArgs)) {
                    idx = i;
                    break;
                }
            }
            if (idx >= 0) {
                this._listeners.splice(idx, 1);
            }
        };
        PackageItem.prototype.load = function () {
            return this.owner.getItemAsset(this);
        };
        PackageItem.prototype.getBranch = function () {
            if (this.branches && this.owner._branchIndex != -1) {
                var itemId = this.branches[this.owner._branchIndex];
                if (itemId) return this.owner.getItemById(itemId);
            }
            return this;
        };
        PackageItem.prototype.getHighResolution = function () {
            if (this.highResolution && fgui.GRoot.contentScaleLevel > 0) {
                var itemId = this.highResolution[fgui.GRoot.contentScaleLevel - 1];
                if (itemId) return this.owner.getItemById(itemId);
            }
            return this;
        };
        PackageItem.prototype.toString = function () {
            return this.name;
        };
        PackageItem.prototype.getSizeRateInAtlas = function () {
            var sprites = this.owner._sprites;
            var atlasSprite = sprites[this.id];
            if (atlasSprite) {
                if (atlasSprite.atlas && atlasSprite.originalSize) {
                    var atlas = atlasSprite.atlas;
                    var size = atlasSprite.originalSize;
                    return new cc.Vec2(size.width / atlas.width, size.height / atlas.height);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        };
        return PackageItem;
    }();
    fgui.PackageItem = PackageItem;
    var PackageImageItem = function (_super) {
        __extends(PackageImageItem, _super);
        function PackageImageItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageImageItem.prototype.setup = function (buffer) {
            this.objectType = fgui.ObjectType.Image;
            var scaleOption = buffer.readByte();
            if (scaleOption == 1) {
                this.scale9Grid = new cc.Rect();
                this.scale9Grid.x = buffer.readInt();
                this.scale9Grid.y = buffer.readInt();
                this.scale9Grid.width = buffer.readInt();
                this.scale9Grid.height = buffer.readInt();
                this.tileGridIndice = buffer.readInt();
            } else if (scaleOption == 2) this.scaleByTile = true;
            this.smoothing = buffer.readBool();
        };
        PackageImageItem.prototype._doLoad = function (callback) {
            var _this = this;
            var sprite = this.owner.getAtlasSprite(this.id);
            if (sprite != null) {
                sprite.atlas.onLoad(function (atlas) {
                    if (atlas) {
                        var atlasTexture = atlas;
                        var sf = new cc.SpriteFrame(atlasTexture, sprite.rect, sprite.rotated, new cc.Vec2(sprite.offset.x - (sprite.originalSize.width - sprite.rect.width) / 2, -(sprite.offset.y - (sprite.originalSize.height - sprite.rect.height) / 2)), sprite.originalSize);
                        if (_this.scale9Grid) {
                            sf.insetLeft = _this.scale9Grid.x;
                            sf.insetTop = _this.scale9Grid.y;
                            sf.insetRight = _this.width - _this.scale9Grid.xMax;
                            sf.insetBottom = _this.height - _this.scale9Grid.yMax;
                        }
                        callback(sf);
                    } else {
                        callback(null);
                    }
                }, null);
            } else {
                callback(null);
            }
        };
        return PackageImageItem;
    }(PackageItem);
    fgui.PackageImageItem = PackageImageItem;
    var PackageMovieClipItem = function (_super) {
        __extends(PackageMovieClipItem, _super);
        function PackageMovieClipItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageMovieClipItem.prototype.setup = function (buffer, url) {
            this.smoothing = buffer.readBool();
            this.objectType = fgui.ObjectType.MovieClip;
            this.rawData = buffer.readBuffer();
        };
        PackageMovieClipItem.prototype._loadFrame = function (i, buffer, callback) {
            var _this = this;
            if (i >= this.frames.length) {
                callback();
            } else {
                var nextPos = buffer.readShort();
                nextPos += buffer.position;
                var frame_1 = new fgui.Frame();
                frame_1.rect.x = buffer.readInt();
                frame_1.rect.y = buffer.readInt();
                frame_1.rect.width = buffer.readInt();
                frame_1.rect.height = buffer.readInt();
                frame_1.addDelay = buffer.readInt() / 1000;
                var spriteId = buffer.readS();
                var sprite_1;
                if (spriteId != null && (sprite_1 = this.owner.getAtlasSprite(spriteId)) != null) {
                    sprite_1.atlas.onLoad(function (asset) {
                        if (asset != null) {
                            var atlasTexture = asset;
                            var sx = _this.width / frame_1.rect.width;
                            frame_1.texture = new cc.SpriteFrame(atlasTexture, sprite_1.rect, sprite_1.rotated, new cc.Vec2(frame_1.rect.x - (_this.width - frame_1.rect.width) / 2, -(frame_1.rect.y - (_this.height - frame_1.rect.height) / 2)), new cc.Size(_this.width, _this.height));
                        }
                        _this.frames[i] = frame_1;
                        buffer.position = nextPos;
                        _this._loadFrame(i + 1, buffer, callback);
                    }, null);
                } else {
                    this.frames[i] = frame_1;
                    buffer.position = nextPos;
                    this._loadFrame(i + 1, buffer, callback);
                }
            }
        };
        PackageMovieClipItem.prototype._doLoad = function (callback) {
            var buffer = this.rawData;
            buffer.seek(0, 0);
            this.interval = buffer.readInt() / 1000;
            this.swing = buffer.readBool();
            this.repeatDelay = buffer.readInt() / 1000;
            buffer.seek(0, 1);
            var frameCount = buffer.readShort();
            this.frames = Array(frameCount);
            this._loadFrame(0, buffer, function () {
                callback(null);
            });
        };
        return PackageMovieClipItem;
    }(PackageItem);
    fgui.PackageMovieClipItem = PackageMovieClipItem;
    var PackageFontItem = function (_super) {
        __extends(PackageFontItem, _super);
        function PackageFontItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageFontItem.prototype.setup = function (buffer, url) {
            this.rawData = buffer.readBuffer();
        };
        PackageFontItem.prototype._assembleFont = function (mainSprite) {
            var retSprites = [];
            var font = new cc.LabelAtlas();
            this.asset = font;
            font._fntConfig = {
                commonHeight: 0,
                fontSize: 0,
                kerningDict: {},
                fontDefDictionary: {}
            };
            var dict = font._fntConfig.fontDefDictionary;
            var buffer = this.rawData;
            buffer.seek(0, 0);
            var ttf = buffer.readBool();
            var canTint = buffer.readBool();
            var resizable = buffer.readBool();
            buffer.readBool();
            var fontSize = buffer.readInt();
            var xadvance = buffer.readInt();
            var lineHeight = buffer.readInt();
            buffer.seek(0, 1);
            var bg = null;
            var cnt = buffer.readInt();
            for (var i = 0; i < cnt; i++) {
                var nextPos = buffer.readShort();
                nextPos += buffer.position;
                bg = {};
                var ch = buffer.readUshort();
                dict[ch] = bg;
                var rect = new cc.Rect();
                bg.rect = rect;
                var img = buffer.readS();
                rect.x = buffer.readInt();
                rect.y = buffer.readInt();
                bg.xOffset = buffer.readInt();
                bg.yOffset = buffer.readInt();
                rect.width = buffer.readInt();
                rect.height = buffer.readInt();
                bg.xAdvance = buffer.readInt();
                bg.channel = buffer.readByte();
                if (bg.channel == 1) bg.channel = 3;else if (bg.channel == 2) bg.channel = 2;else if (bg.channel == 3) bg.channel = 1;
                if (ttf) {
                    rect.x += mainSprite.rect.x;
                    rect.y += mainSprite.rect.y;
                } else {
                    var sprite = this.owner.getAtlasSprite(img);
                    if (sprite) {
                        rect.set(sprite.rect);
                        bg.xOffset += sprite.offset.x;
                        bg.yOffset += sprite.offset.y;
                        if (fontSize == 0) fontSize = sprite.originalSize.height;
                        retSprites.push(sprite);
                    }
                    if (bg.xAdvance == 0) {
                        if (xadvance == 0) bg.xAdvance = bg.xOffset + bg.rect.width;else bg.xAdvance = xadvance;
                    }
                }
                buffer.position = nextPos;
            }
            font.fontSize = fontSize;
            font._fntConfig.fontSize = fontSize;
            font._fntConfig.commonHeight = lineHeight == 0 ? fontSize : lineHeight;
            font._fntConfig.resizable = resizable;
            font._fntConfig.canTint = canTint;
            return retSprites;
        };
        PackageFontItem.prototype._tryLoadTexture = function (idx, sprites, callback) {
            var _this = this;
            if (idx >= sprites.length) {
                callback(null);
            } else {
                var sprite = sprites[idx];
                if (sprite) {
                    sprite.atlas.onLoad(function (atlas) {
                        if (atlas) {
                            callback(atlas);
                        } else {
                            _this._tryLoadTexture(idx + 1, sprites, callback);
                        }
                    }, null);
                } else {
                    this._tryLoadTexture(idx + 1, sprites, callback);
                }
            }
        };
        PackageFontItem.prototype._doLoad = function (callback) {
            var _this = this;
            var mainSprite = this.owner.getAtlasSprite(this.id);
            var subSprites = this._assembleFont(mainSprite);
            if (mainSprite) {
                subSprites.unshift(mainSprite);
            }
            var self = this;
            this._tryLoadTexture(0, subSprites, function (texture) {
                if (texture) {
                    var spriteFrame = new cc.SpriteFrame();
                    spriteFrame.setTexture(texture);
                    self.asset.spriteFrame = spriteFrame;
                    self.asset.onLoad();
                    callback(self.asset);
                } else {
                    console.error("[PackageFontItem] no texture for font", _this.name);
                    callback(null);
                }
            });
        };
        return PackageFontItem;
    }(PackageItem);
    fgui.PackageFontItem = PackageFontItem;
    var PackageComponentItem = function (_super) {
        __extends(PackageComponentItem, _super);
        function PackageComponentItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageComponentItem.prototype.setup = function (buffer, url) {
            var extension = buffer.readByte();
            if (extension > 0) this.objectType = extension;else this.objectType = fgui.ObjectType.Component;
            this.rawData = buffer.readBuffer();
            fgui.UIObjectFactory.resolveExtension(this);
        };
        PackageComponentItem.prototype._doLoad = function (callback) {
            callback(null);
        };
        return PackageComponentItem;
    }(PackageItem);
    fgui.PackageComponentItem = PackageComponentItem;
    var PackageAtlasItem = function (_super) {
        __extends(PackageAtlasItem, _super);
        function PackageAtlasItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageAtlasItem.prototype.setup = function (buffer, url) {
            this.file = url + cc.path.mainFileName(this.file);
        };
        PackageAtlasItem.prototype._doLoad = function (callback) {
            var _this = this;
            cc.loader.loadRes(this.file, cc.Texture2D, function (err, asset) {
                if (!asset || !asset.loaded) {
                    console.log("Resource '" + _this.file + "' not found");
                    callback(null);
                } else {
                    callback(asset);
                }
            });
        };
        return PackageAtlasItem;
    }(PackageItem);
    fgui.PackageAtlasItem = PackageAtlasItem;
    var PackageSoundItem = function (_super) {
        __extends(PackageSoundItem, _super);
        function PackageSoundItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageSoundItem.prototype.setup = function (buffer, url) {
            this.file = url + cc.path.mainFileName(this.file);
        };
        PackageSoundItem.prototype._doLoad = function (callback) {
            var _this = this;
            cc.loader.loadRes(this.file, cc.AudioClip, function (err, asset) {
                if (!asset || !asset.loaded) {
                    console.log("Resource '" + _this.file + "' not found");
                    callback(null);
                } else {
                    callback(asset);
                }
            });
        };
        return PackageSoundItem;
    }(PackageItem);
    fgui.PackageSoundItem = PackageSoundItem;
    var PackageMiscItem = function (_super) {
        __extends(PackageMiscItem, _super);
        function PackageMiscItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PackageMiscItem.prototype.setup = function (buffer, url) {
            this.file = url + cc.path.mainFileName(this.file);
        };
        PackageMiscItem.prototype._doLoad = function (callback) {
            var _this = this;
            if (this.file) {
                cc.loader.loadRes(this.file, cc.Asset, function (err, asset) {
                    if (!asset || !asset.loaded) {
                        console.log("Resource '" + _this.file + "' not found");
                        callback(null);
                    } else {
                        callback(asset);
                    }
                });
            } else {
                callback(null);
            }
        };
        return PackageMiscItem;
    }(PackageItem);
    fgui.PackageMiscItem = PackageMiscItem;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var PopupMenu = function () {
        function PopupMenu(url) {
            if (url === void 0) {
                url = null;
            }
            if (!url) {
                url = fgui.UIConfig.popupMenu;
                if (!url) throw "UIConfig.popupMenu not defined";
            }
            this._contentPane = fgui.UIPackage.createObjectFromURL(url).asCom;
            this._contentPane.on(fgui.Event.DISPLAY, this.onDisplay, this);
            this._list = this._contentPane.getChild("list");
            this._list.removeChildrenToPool();
            this._list.addRelation(this._contentPane, fgui.RelationType.Width);
            this._list.removeRelation(this._contentPane, fgui.RelationType.Height);
            this._contentPane.addRelation(this._list, fgui.RelationType.Height);
            this._list.on(fgui.Event.CLICK_ITEM, this.onClickItem, this);
        }
        PopupMenu.prototype.dispose = function () {
            this._contentPane.dispose();
        };
        PopupMenu.prototype.addItem = function (caption, callback) {
            var item = this._list.addItemFromPool().asButton;
            item.title = caption;
            item.data = callback;
            item.grayed = false;
            var c = item.getController("checked");
            if (c != null) c.selectedIndex = 0;
            return item;
        };
        PopupMenu.prototype.addItemAt = function (caption, index, callback) {
            var item = this._list.getFromPool().asButton;
            this._list.addChildAt(item, index);
            item.title = caption;
            item.data = callback;
            item.grayed = false;
            var c = item.getController("checked");
            if (c != null) c.selectedIndex = 0;
            return item;
        };
        PopupMenu.prototype.addSeperator = function () {
            if (fgui.UIConfig.popupMenu_seperator == null) throw "UIConfig.popupMenu_seperator not defined";
            this.list.addItemFromPool(fgui.UIConfig.popupMenu_seperator);
        };
        PopupMenu.prototype.getItemName = function (index) {
            var item = this._list.getChildAt(index);
            return item.name;
        };
        PopupMenu.prototype.setItemText = function (name, caption) {
            var item = this._list.getChild(name).asButton;
            item.title = caption;
        };
        PopupMenu.prototype.setItemVisible = function (name, visible) {
            var item = this._list.getChild(name).asButton;
            if (item.visible != visible) {
                item.visible = visible;
                this._list.setBoundsChangedFlag();
            }
        };
        PopupMenu.prototype.setItemGrayed = function (name, grayed) {
            var item = this._list.getChild(name).asButton;
            item.grayed = grayed;
        };
        PopupMenu.prototype.setItemCheckable = function (name, checkable) {
            var item = this._list.getChild(name).asButton;
            var c = item.getController("checked");
            if (c != null) {
                if (checkable) {
                    if (c.selectedIndex == 0) c.selectedIndex = 1;
                } else c.selectedIndex = 0;
            }
        };
        PopupMenu.prototype.setItemChecked = function (name, checked) {
            var item = this._list.getChild(name).asButton;
            var c = item.getController("checked");
            if (c != null) c.selectedIndex = checked ? 2 : 1;
        };
        PopupMenu.prototype.isItemChecked = function (name) {
            var item = this._list.getChild(name).asButton;
            var c = item.getController("checked");
            if (c != null) return c.selectedIndex == 2;else return false;
        };
        PopupMenu.prototype.removeItem = function (name) {
            var item = this._list.getChild(name);
            if (item != null) {
                var index = this._list.getChildIndex(item);
                this._list.removeChildToPoolAt(index);
                return true;
            } else return false;
        };
        PopupMenu.prototype.clearItems = function () {
            this._list.removeChildrenToPool();
        };
        Object.defineProperty(PopupMenu.prototype, "itemCount", {
            get: function get() {
                return this._list.numChildren;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PopupMenu.prototype, "contentPane", {
            get: function get() {
                return this._contentPane;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PopupMenu.prototype, "list", {
            get: function get() {
                return this._list;
            },
            enumerable: false,
            configurable: true
        });
        PopupMenu.prototype.show = function (target, downward) {
            if (target === void 0) {
                target = null;
            }
            var r = target != null ? target.root : fgui.GRoot.inst;
            r.showPopup(this.contentPane, target instanceof fgui.GRoot ? null : target, downward);
        };
        PopupMenu.prototype.onClickItem = function (itemObject, evt) {
            var _this = this;
            this._list._partner.callLater(function (dt) {
                _this.onClickItem2(itemObject, evt);
            }, 0.1);
        };
        PopupMenu.prototype.onClickItem2 = function (itemObject, evt) {
            var item = itemObject.asButton;
            if (item == null) return;
            if (item.grayed) {
                this._list.selectedIndex = -1;
                return;
            }
            var c = item.getController("checked");
            if (c != null && c.selectedIndex != 0) {
                if (c.selectedIndex == 1) c.selectedIndex = 2;else c.selectedIndex = 1;
            }
            var r = this._contentPane.parent;
            r.hidePopup(this.contentPane);
            if (item.data instanceof Function) item.data(item, evt);
        };
        PopupMenu.prototype.onDisplay = function () {
            this._list.selectedIndex = -1;
            this._list.resizeToFit(100000, 10);
        };
        return PopupMenu;
    }();
    fgui.PopupMenu = PopupMenu;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var RelationItem = function () {
        function RelationItem(owner) {
            this._owner = owner;
            this._defs = new Array();
        }
        Object.defineProperty(RelationItem.prototype, "owner", {
            get: function get() {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelationItem.prototype, "target", {
            get: function get() {
                return this._target;
            },
            set: function set(value) {
                if (this._target != value) {
                    if (this._target) this.releaseRefTarget(this._target);
                    this._target = value;
                    if (this._target) this.addRefTarget(this._target);
                }
            },
            enumerable: false,
            configurable: true
        });
        RelationItem.prototype.add = function (relationType, usePercent) {
            if (relationType == fgui.RelationType.Size) {
                this.add(fgui.RelationType.Width, usePercent);
                this.add(fgui.RelationType.Height, usePercent);
                return;
            }
            var length = this._defs.length;
            for (var i = 0; i < length; i++) {
                var def = this._defs[i];
                if (def.type == relationType) return;
            }
            this.internalAdd(relationType, usePercent);
        };
        RelationItem.prototype.internalAdd = function (relationType, usePercent) {
            if (relationType == fgui.RelationType.Size) {
                this.internalAdd(fgui.RelationType.Width, usePercent);
                this.internalAdd(fgui.RelationType.Height, usePercent);
                return;
            }
            var info = new RelationDef();
            info.percent = usePercent;
            info.type = relationType;
            info.axis = relationType <= fgui.RelationType.Right_Right || relationType == fgui.RelationType.Width || relationType >= fgui.RelationType.LeftExt_Left && relationType <= fgui.RelationType.RightExt_Right ? 0 : 1;
            this._defs.push(info);
            if (usePercent || relationType == fgui.RelationType.Left_Center || relationType == fgui.RelationType.Center_Center || relationType == fgui.RelationType.Right_Center || relationType == fgui.RelationType.Top_Middle || relationType == fgui.RelationType.Middle_Middle || relationType == fgui.RelationType.Bottom_Middle) this._owner.pixelSnapping = true;
        };
        RelationItem.prototype.remove = function (relationType) {
            if (relationType == fgui.RelationType.Size) {
                this.remove(fgui.RelationType.Width);
                this.remove(fgui.RelationType.Height);
                return;
            }
            var dc = this._defs.length;
            for (var k = 0; k < dc; k++) {
                if (this._defs[k].type == relationType) {
                    this._defs.splice(k, 1);
                    break;
                }
            }
        };
        RelationItem.prototype.copyFrom = function (source) {
            this.target = source.target;
            this._defs.length = 0;
            var length = source._defs.length;
            for (var i = 0; i < length; i++) {
                var info = source._defs[i];
                var info2 = new RelationDef();
                info2.copyFrom(info);
                this._defs.push(info2);
            }
        };
        RelationItem.prototype.dispose = function () {
            if (this._target != null) {
                this.releaseRefTarget(this._target);
                this._target = null;
            }
        };
        Object.defineProperty(RelationItem.prototype, "isEmpty", {
            get: function get() {
                return this._defs.length == 0;
            },
            enumerable: false,
            configurable: true
        });
        RelationItem.prototype.applyOnSelfResized = function (dWidth, dHeight, applyPivot) {
            var ox = this._owner.x;
            var oy = this._owner.y;
            var length = this._defs.length;
            for (var i = 0; i < length; i++) {
                var info = this._defs[i];
                switch (info.type) {
                    case fgui.RelationType.Center_Center:
                        this._owner.x -= (0.5 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                        break;
                    case fgui.RelationType.Right_Center:
                    case fgui.RelationType.Right_Left:
                    case fgui.RelationType.Right_Right:
                        this._owner.x -= (1 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                        break;
                    case fgui.RelationType.Middle_Middle:
                        this._owner.y -= (0.5 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                        break;
                    case fgui.RelationType.Bottom_Middle:
                    case fgui.RelationType.Bottom_Top:
                    case fgui.RelationType.Bottom_Bottom:
                        this._owner.y -= (1 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                        break;
                }
            }
            if (ox != this._owner.x || oy != this._owner.y) {
                ox = this._owner.x - ox;
                oy = this._owner.y - oy;
                this._owner.updateGearFromRelations(1, ox, oy);
                if (this._owner.parent != null) {
                    var len = this._owner.parent._transitions.length;
                    if (len > 0) {
                        for (var i = 0; i < len; ++i) {
                            this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                        }
                    }
                }
            }
        };
        RelationItem.prototype.applyOnXYChanged = function (info, dx, dy) {
            var tmp;
            switch (info.type) {
                case fgui.RelationType.Left_Left:
                case fgui.RelationType.Left_Center:
                case fgui.RelationType.Left_Right:
                case fgui.RelationType.Center_Center:
                case fgui.RelationType.Right_Left:
                case fgui.RelationType.Right_Center:
                case fgui.RelationType.Right_Right:
                    this._owner.x += dx;
                    break;
                case fgui.RelationType.Top_Top:
                case fgui.RelationType.Top_Middle:
                case fgui.RelationType.Top_Bottom:
                case fgui.RelationType.Middle_Middle:
                case fgui.RelationType.Bottom_Top:
                case fgui.RelationType.Bottom_Middle:
                case fgui.RelationType.Bottom_Bottom:
                    this._owner.y += dy;
                    break;
                case fgui.RelationType.Width:
                case fgui.RelationType.Height:
                    break;
                case fgui.RelationType.LeftExt_Left:
                case fgui.RelationType.LeftExt_Right:
                    if (this._owner != this._target.parent) {
                        tmp = this._owner.xMin;
                        this._owner.width = this._owner._rawWidth - dx;
                        this._owner.xMin = tmp + dx;
                    } else this._owner.width = this._owner._rawWidth - dx;
                    break;
                case fgui.RelationType.RightExt_Left:
                case fgui.RelationType.RightExt_Right:
                    if (this._owner != this._target.parent) {
                        tmp = this._owner.xMin;
                        this._owner.width = this._owner._rawWidth + dx;
                        this._owner.xMin = tmp;
                    } else this._owner.width = this._owner._rawWidth + dx;
                    break;
                case fgui.RelationType.TopExt_Top:
                case fgui.RelationType.TopExt_Bottom:
                    if (this._owner != this._target.parent) {
                        tmp = this._owner.yMin;
                        this._owner.height = this._owner._rawHeight - dy;
                        this._owner.yMin = tmp + dy;
                    } else this._owner.height = this._owner._rawHeight - dy;
                    break;
                case fgui.RelationType.BottomExt_Top:
                case fgui.RelationType.BottomExt_Bottom:
                    if (this._owner != this._target.parent) {
                        tmp = this._owner.yMin;
                        this._owner.height = this._owner._rawHeight + dy;
                        this._owner.yMin = tmp;
                    } else this._owner.height = this._owner._rawHeight + dy;
                    break;
            }
        };
        RelationItem.prototype.applyOnSizeChanged = function (info) {
            var pos = 0,
                pivot = 0,
                delta = 0;
            var v, tmp;
            if (info.axis == 0) {
                if (this._target != this._owner.parent) {
                    pos = this._target.x;
                    if (this._target.pivotAsAnchor) pivot = this._target.pivotX;
                }
                if (info.percent) {
                    if (this._targetWidth != 0) delta = this._target._width / this._targetWidth;
                } else delta = this._target._width - this._targetWidth;
            } else {
                if (this._target != this._owner.parent) {
                    pos = this._target.y;
                    if (this._target.pivotAsAnchor) pivot = this._target.pivotY;
                }
                if (info.percent) {
                    if (this._targetHeight != 0) delta = this._target._height / this._targetHeight;
                } else delta = this._target._height - this._targetHeight;
            }
            switch (info.type) {
                case fgui.RelationType.Left_Left:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else if (pivot != 0) this._owner.x += delta * -pivot;
                    break;
                case fgui.RelationType.Left_Center:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Left_Right:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (1 - pivot);
                    break;
                case fgui.RelationType.Center_Center:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth * 0.5 - pos) * delta - this._owner._rawWidth * 0.5;else this._owner.x += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Right_Left:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else if (pivot != 0) this._owner.x += delta * -pivot;
                    break;
                case fgui.RelationType.Right_Center:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Right_Right:
                    if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (1 - pivot);
                    break;
                case fgui.RelationType.Top_Top:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else if (pivot != 0) this._owner.y += delta * -pivot;
                    break;
                case fgui.RelationType.Top_Middle:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Top_Bottom:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (1 - pivot);
                    break;
                case fgui.RelationType.Middle_Middle:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight * 0.5 - pos) * delta - this._owner._rawHeight * 0.5;else this._owner.y += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Bottom_Top:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else if (pivot != 0) this._owner.y += delta * -pivot;
                    break;
                case fgui.RelationType.Bottom_Middle:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (0.5 - pivot);
                    break;
                case fgui.RelationType.Bottom_Bottom:
                    if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (1 - pivot);
                    break;
                case fgui.RelationType.Width:
                    if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceWidth - this._target.initWidth;else v = this._owner._rawWidth - this._targetWidth;
                    if (info.percent) v = v * delta;
                    if (this._target == this._owner.parent) {
                        if (this._owner.pivotAsAnchor) {
                            tmp = this._owner.xMin;
                            this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);
                            this._owner.xMin = tmp;
                        } else this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);
                    } else this._owner.width = this._target._width + v;
                    break;
                case fgui.RelationType.Height:
                    if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceHeight - this._target.initHeight;else v = this._owner._rawHeight - this._targetHeight;
                    if (info.percent) v = v * delta;
                    if (this._target == this._owner.parent) {
                        if (this._owner.pivotAsAnchor) {
                            tmp = this._owner.yMin;
                            this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);
                            this._owner.yMin = tmp;
                        } else this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);
                    } else this._owner.height = this._target._height + v;
                    break;
                case fgui.RelationType.LeftExt_Left:
                    tmp = this._owner.xMin;
                    if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
                    this._owner.width = this._owner._rawWidth - v;
                    this._owner.xMin = tmp + v;
                    break;
                case fgui.RelationType.LeftExt_Right:
                    tmp = this._owner.xMin;
                    if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
                    this._owner.width = this._owner._rawWidth - v;
                    this._owner.xMin = tmp + v;
                    break;
                case fgui.RelationType.RightExt_Left:
                    tmp = this._owner.xMin;
                    if (info.percent) v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);else v = delta * -pivot;
                    this._owner.width = this._owner._rawWidth + v;
                    this._owner.xMin = tmp;
                    break;
                case fgui.RelationType.RightExt_Right:
                    tmp = this._owner.xMin;
                    if (info.percent) {
                        if (this._owner == this._target.parent) {
                            if (this._owner._underConstruct) this._owner.width = pos + this._target._width - this._target._width * pivot + (this._owner.sourceWidth - pos - this._target.initWidth + this._target.initWidth * pivot) * delta;else this._owner.width = pos + (this._owner._rawWidth - pos) * delta;
                        } else {
                            v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);
                            this._owner.width = this._owner._rawWidth + v;
                            this._owner.xMin = tmp;
                        }
                    } else {
                        if (this._owner == this._target.parent) {
                            if (this._owner._underConstruct) this._owner.width = this._owner.sourceWidth + (this._target._width - this._target.initWidth) * (1 - pivot);else this._owner.width = this._owner._rawWidth + delta * (1 - pivot);
                        } else {
                            v = delta * (1 - pivot);
                            this._owner.width = this._owner._rawWidth + v;
                            this._owner.xMin = tmp;
                        }
                    }
                    break;
                case fgui.RelationType.TopExt_Top:
                    tmp = this._owner.yMin;
                    if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
                    this._owner.height = this._owner._rawHeight - v;
                    this._owner.yMin = tmp + v;
                    break;
                case fgui.RelationType.TopExt_Bottom:
                    tmp = this._owner.yMin;
                    if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
                    this._owner.height = this._owner._rawHeight - v;
                    this._owner.yMin = tmp + v;
                    break;
                case fgui.RelationType.BottomExt_Top:
                    tmp = this._owner.yMin;
                    if (info.percent) v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);else v = delta * -pivot;
                    this._owner.height = this._owner._rawHeight + v;
                    this._owner.yMin = tmp;
                    break;
                case fgui.RelationType.BottomExt_Bottom:
                    tmp = this._owner.yMin;
                    if (info.percent) {
                        if (this._owner == this._target.parent) {
                            if (this._owner._underConstruct) this._owner.height = pos + this._target._height - this._target._height * pivot + (this._owner.sourceHeight - pos - this._target.initHeight + this._target.initHeight * pivot) * delta;else this._owner.height = pos + (this._owner._rawHeight - pos) * delta;
                        } else {
                            v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);
                            this._owner.height = this._owner._rawHeight + v;
                            this._owner.yMin = tmp;
                        }
                    } else {
                        if (this._owner == this._target.parent) {
                            if (this._owner._underConstruct) this._owner.height = this._owner.sourceHeight + (this._target._height - this._target.initHeight) * (1 - pivot);else this._owner.height = this._owner._rawHeight + delta * (1 - pivot);
                        } else {
                            v = delta * (1 - pivot);
                            this._owner.height = this._owner._rawHeight + v;
                            this._owner.yMin = tmp;
                        }
                    }
                    break;
            }
        };
        RelationItem.prototype.addRefTarget = function (target) {
            if (target != this._owner.parent) target.on(fgui.Event.XY_CHANGED, this.__targetXYChanged, this);
            target.on(fgui.Event.SIZE_CHANGED, this.__targetSizeChanged, this);
            target.on(fgui.Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
            this._targetX = this._target.x;
            this._targetY = this._target.y;
            this._targetWidth = this._target._width;
            this._targetHeight = this._target._height;
        };
        RelationItem.prototype.releaseRefTarget = function (target) {
            if (!target.node) return;
            target.off(fgui.Event.XY_CHANGED, this.__targetXYChanged, this);
            target.off(fgui.Event.SIZE_CHANGED, this.__targetSizeChanged, this);
            target.off(fgui.Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
        };
        RelationItem.prototype.__targetXYChanged = function (evt) {
            if (this._owner.relations.handling != null || this._owner.group != null && this._owner.group._updating) {
                this._targetX = this._target.x;
                this._targetY = this._target.y;
                return;
            }
            this._owner.relations.handling = this._target;
            var ox = this._owner.x;
            var oy = this._owner.y;
            var dx = this._target.x - this._targetX;
            var dy = this._target.y - this._targetY;
            var length = this._defs.length;
            for (var i = 0; i < length; i++) {
                var info = this._defs[i];
                this.applyOnXYChanged(info, dx, dy);
            }
            this._targetX = this._target.x;
            this._targetY = this._target.y;
            if (ox != this._owner.x || oy != this._owner.y) {
                ox = this._owner.x - ox;
                oy = this._owner.y - oy;
                this._owner.updateGearFromRelations(1, ox, oy);
                if (this._owner.parent != null) {
                    var len = this._owner.parent._transitions.length;
                    if (len > 0) {
                        for (var i = 0; i < len; ++i) {
                            this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                        }
                    }
                }
            }
            this._owner.relations.handling = null;
        };
        RelationItem.prototype.__targetSizeChanged = function (evt) {
            if (this._owner.relations.handling != null) return;
            this._owner.relations.handling = this._target;
            var ox = this._owner.x;
            var oy = this._owner.y;
            var ow = this._owner._rawWidth;
            var oh = this._owner._rawHeight;
            var length = this._defs.length;
            for (var i = 0; i < length; i++) {
                var info = this._defs[i];
                this.applyOnSizeChanged(info);
            }
            this._targetWidth = this._target._width;
            this._targetHeight = this._target._height;
            if (ox != this._owner.x || oy != this._owner.y) {
                ox = this._owner.x - ox;
                oy = this._owner.y - oy;
                this._owner.updateGearFromRelations(1, ox, oy);
                if (this._owner.parent != null) {
                    var len = this._owner.parent._transitions.length;
                    if (len > 0) {
                        for (var i = 0; i < len; ++i) {
                            this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                        }
                    }
                }
            }
            if (ow != this._owner._rawWidth || oh != this._owner._rawHeight) {
                ow = this._owner._rawWidth - ow;
                oh = this._owner._rawHeight - oh;
                this._owner.updateGearFromRelations(2, ow, oh);
            }
            this._owner.relations.handling = null;
        };
        RelationItem.prototype.__targetSizeWillChange = function (evt) {
            this._owner.relations.sizeDirty = true;
        };
        return RelationItem;
    }();
    fgui.RelationItem = RelationItem;
    var RelationDef = function () {
        function RelationDef() {}
        RelationDef.prototype.copyFrom = function (source) {
            this.percent = source.percent;
            this.type = source.type;
            this.axis = source.axis;
        };
        return RelationDef;
    }();
    fgui.RelationDef = RelationDef;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Relations = function () {
        function Relations(owner) {
            this._owner = owner;
            this._items = new Array();
        }
        Relations.prototype.add = function (target, relationType, usePercent) {
            var length = this._items.length;
            for (var i = 0; i < length; i++) {
                var item = this._items[i];
                if (item.target == target) {
                    item.add(relationType, usePercent);
                    return;
                }
            }
            var newItem = new fgui.RelationItem(this._owner);
            newItem.target = target;
            newItem.add(relationType, usePercent);
            this._items.push(newItem);
        };
        Relations.prototype.remove = function (target, relationType) {
            if (relationType === void 0) {
                relationType = 0;
            }
            var cnt = this._items.length;
            var i = 0;
            while (i < cnt) {
                var item = this._items[i];
                if (item.target == target) {
                    item.remove(relationType);
                    if (item.isEmpty) {
                        item.dispose();
                        this._items.splice(i, 1);
                        cnt--;
                    } else i++;
                } else i++;
            }
        };
        Relations.prototype.contains = function (target) {
            var length = this._items.length;
            for (var i = 0; i < length; i++) {
                var item = this._items[i];
                if (item.target == target) return true;
            }
            return false;
        };
        Relations.prototype.clearFor = function (target) {
            var cnt = this._items.length;
            var i = 0;
            while (i < cnt) {
                var item = this._items[i];
                if (item.target == target) {
                    item.dispose();
                    this._items.splice(i, 1);
                    cnt--;
                } else i++;
            }
        };
        Relations.prototype.clearAll = function () {
            var length = this._items.length;
            for (var i = 0; i < length; i++) {
                var item = this._items[i];
                item.dispose();
            }
            this._items.length = 0;
        };
        Relations.prototype.copyFrom = function (source) {
            this.clearAll();
            var arr = source._items;
            var length = arr.length;
            for (var i = 0; i < length; i++) {
                var ri = arr[i];
                var item = new fgui.RelationItem(this._owner);
                item.copyFrom(ri);
                this._items.push(item);
            }
        };
        Relations.prototype.dispose = function () {
            this.clearAll();
        };
        Relations.prototype.onOwnerSizeChanged = function (dWidth, dHeight, applyPivot) {
            if (this._items.length == 0) return;
            var length = this._items.length;
            for (var i = 0; i < length; i++) {
                var item = this._items[i];
                item.applyOnSelfResized(dWidth, dHeight, applyPivot);
            }
        };
        Relations.prototype.ensureRelationsSizeCorrect = function () {
            if (this._items.length == 0) return;
            this.sizeDirty = false;
            var length = this._items.length;
            for (var i = 0; i < length; i++) {
                var item = this._items[i];
                item.target.ensureSizeCorrect();
            }
        };
        Object.defineProperty(Relations.prototype, "empty", {
            get: function get() {
                return this._items.length == 0;
            },
            enumerable: false,
            configurable: true
        });
        Relations.prototype.setup = function (buffer, parentToChild) {
            var cnt = buffer.readByte();
            var target;
            for (var i = 0; i < cnt; i++) {
                var targetIndex = buffer.readShort();
                if (targetIndex == -1) target = this._owner.parent;else if (parentToChild) target = this._owner.getChildAt(targetIndex);else target = this._owner.parent.getChildAt(targetIndex);
                var newItem = new fgui.RelationItem(this._owner);
                newItem.target = target;
                this._items.push(newItem);
                var cnt2 = buffer.readByte();
                for (var j = 0; j < cnt2; j++) {
                    var rt = buffer.readByte();
                    var usePercent = buffer.readBool();
                    newItem.internalAdd(rt, usePercent);
                }
            }
        };
        return Relations;
    }();
    fgui.Relations = Relations;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ScrollPane = function (_super) {
        __extends(ScrollPane, _super);
        function ScrollPane() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._aniFlag = 0;
            return _this;
        }
        ScrollPane.prototype.setup = function (buffer) {
            this._owner = this.node["$gobj"];
            this._maskContainer = new cc.Node("ScrollPane");
            this._maskContainer.setAnchorPoint(0, 1);
            this._maskContainer.parent = this._owner.node;
            this._container = this._owner._container;
            this._container.parent = this._maskContainer;
            this._scrollBarMargin = new fgui.Margin();
            this._mouseWheelEnabled = true;
            this._xPos = 0;
            this._yPos = 0;
            this._aniFlag = 0;
            this._tweening = 0;
            this._footerLockedSize = 0;
            this._headerLockedSize = 0;
            this._viewSize = new cc.Vec2();
            this._contentSize = new cc.Vec2();
            this._pageSize = new cc.Vec2(1, 1);
            this._overlapSize = new cc.Vec2();
            this._tweenTime = new cc.Vec2();
            this._tweenStart = new cc.Vec2();
            this._tweenDuration = new cc.Vec2();
            this._tweenChange = new cc.Vec2();
            this._velocity = new cc.Vec2();
            this._containerPos = new cc.Vec2();
            this._beginTouchPos = new cc.Vec2();
            this._lastTouchPos = new cc.Vec2();
            this._lastTouchGlobalPos = new cc.Vec2();
            this._scrollStep = fgui.UIConfig.defaultScrollStep;
            this._mouseWheelStep = this._scrollStep * 2;
            this._decelerationRate = fgui.UIConfig.defaultScrollDecelerationRate;
            this._owner.on(fgui.Event.TOUCH_BEGIN, this.onTouchBegin, this);
            this._owner.on(fgui.Event.TOUCH_MOVE, this.onTouchMove, this);
            this._owner.on(fgui.Event.TOUCH_END, this.onTouchEnd, this);
            this._owner.on(fgui.Event.MOUSE_WHEEL, this.onMouseWheel, this);
            this._scrollType = buffer.readByte();
            var scrollBarDisplay = buffer.readByte();
            var flags = buffer.readInt();
            if (buffer.readBool()) {
                this._scrollBarMargin.top = buffer.readInt();
                this._scrollBarMargin.bottom = buffer.readInt();
                this._scrollBarMargin.left = buffer.readInt();
                this._scrollBarMargin.right = buffer.readInt();
            }
            var vtScrollBarRes = buffer.readS();
            var hzScrollBarRes = buffer.readS();
            var headerRes = buffer.readS();
            var footerRes = buffer.readS();
            this._displayOnLeft = (flags & 1) != 0;
            this._snapToItem = (flags & 2) != 0;
            this._displayInDemand = (flags & 4) != 0;
            this._pageMode = (flags & 8) != 0;
            if (flags & 16) this._touchEffect = true;else if (flags & 32) this._touchEffect = false;else this._touchEffect = fgui.UIConfig.defaultScrollTouchEffect;
            if (flags & 64) this._bouncebackEffect = true;else if (flags & 128) this._bouncebackEffect = false;else this._bouncebackEffect = fgui.UIConfig.defaultScrollBounceEffect;
            this._inertiaDisabled = (flags & 256) != 0;
            if ((flags & 512) == 0) this._maskContainer.addComponent(cc.Mask);
            this._floating = (flags & 1024) != 0;
            if (scrollBarDisplay == fgui.ScrollBarDisplayType.Default) scrollBarDisplay = fgui.UIConfig.defaultScrollBarDisplay;
            if (scrollBarDisplay != fgui.ScrollBarDisplayType.Hidden) {
                if (this._scrollType == fgui.ScrollType.Both || this._scrollType == fgui.ScrollType.Vertical) {
                    var res = vtScrollBarRes ? vtScrollBarRes : fgui.UIConfig.verticalScrollBar;
                    if (res) {
                        this._vtScrollBar = fgui.UIPackage.createObjectFromURL(res);
                        if (!this._vtScrollBar) throw "cannot create scrollbar from " + res;
                        this._vtScrollBar.setScrollPane(this, true);
                        this._vtScrollBar.node.parent = this._owner.node;
                    }
                }
                if (this._scrollType == fgui.ScrollType.Both || this._scrollType == fgui.ScrollType.Horizontal) {
                    var res = hzScrollBarRes ? hzScrollBarRes : fgui.UIConfig.horizontalScrollBar;
                    if (res) {
                        this._hzScrollBar = fgui.UIPackage.createObjectFromURL(res);
                        if (!this._hzScrollBar) throw "cannot create scrollbar from " + res;
                        this._hzScrollBar.setScrollPane(this, false);
                        this._hzScrollBar.node.parent = this._owner.node;
                    }
                }
                this._scrollBarDisplayAuto = scrollBarDisplay == fgui.ScrollBarDisplayType.Auto;
                if (this._scrollBarDisplayAuto) {
                    if (this._vtScrollBar) this._vtScrollBar.node.active = false;
                    if (this._hzScrollBar) this._hzScrollBar.node.active = false;
                    this._owner.on(fgui.Event.ROLL_OVER, this.onRollOver, this);
                    this._owner.on(fgui.Event.ROLL_OUT, this.onRollOut, this);
                }
            }
            if (headerRes) {
                this._header = fgui.UIPackage.createObjectFromURL(headerRes);
                if (this._header == null) throw "cannot create scrollPane header from " + headerRes;else this._maskContainer.insertChild(this._header.node, 0);
            }
            if (footerRes) {
                this._footer = fgui.UIPackage.createObjectFromURL(footerRes);
                if (this._footer == null) throw "cannot create scrollPane footer from " + footerRes;else this._maskContainer.insertChild(this._footer.node, 0);
            }
            this._refreshBarAxis = this._scrollType == fgui.ScrollType.Both || this._scrollType == fgui.ScrollType.Vertical ? "y" : "x";
            this.setSize(this._owner.width, this._owner.height);
        };
        ScrollPane.prototype.onDestroy = function () {
            this._pageController = null;
            if (this._hzScrollBar != null) this._hzScrollBar.dispose();
            if (this._vtScrollBar != null) this._vtScrollBar.dispose();
            if (this._header != null) this._header.dispose();
            if (this._footer != null) this._footer.dispose();
        };
        ScrollPane.prototype.hitTest = function (globalPt) {
            var target;
            if (this._vtScrollBar) {
                target = this._vtScrollBar.hitTest(globalPt);
                if (target) return target;
            }
            if (this._hzScrollBar) {
                target = this._hzScrollBar.hitTest(globalPt);
                if (target) return target;
            }
            if (this._header && this._header.node.activeInHierarchy) {
                target = this._header.hitTest(globalPt);
                if (target) return target;
            }
            if (this._footer && this._footer.node.activeInHierarchy) {
                target = this._footer.hitTest(globalPt);
                if (target) return target;
            }
            var pt = this._maskContainer.convertToNodeSpaceAR(globalPt);
            pt.x += this._maskContainer.anchorX * this._viewSize.x;
            pt.y += this._maskContainer.anchorY * this._viewSize.y;
            if (pt.x >= 0 && pt.y >= 0 && pt.x < this._viewSize.x && pt.y < this._viewSize.y) return this._owner;else return null;
        };
        Object.defineProperty(ScrollPane.prototype, "owner", {
            get: function get() {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "hzScrollBar", {
            get: function get() {
                return this._hzScrollBar;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "vtScrollBar", {
            get: function get() {
                return this._vtScrollBar;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "header", {
            get: function get() {
                return this._header;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "footer", {
            get: function get() {
                return this._footer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "bouncebackEffect", {
            get: function get() {
                return this._bouncebackEffect;
            },
            set: function set(sc) {
                this._bouncebackEffect = sc;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "touchEffect", {
            get: function get() {
                return this._touchEffect;
            },
            set: function set(sc) {
                this._touchEffect = sc;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "scrollStep", {
            get: function get() {
                return this._scrollStep;
            },
            set: function set(val) {
                this._scrollStep = val;
                if (this._scrollStep == 0) this._scrollStep = fgui.UIConfig.defaultScrollStep;
                this._mouseWheelStep = this._scrollStep * 2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "decelerationRate", {
            get: function get() {
                return this._decelerationRate;
            },
            set: function set(val) {
                this._decelerationRate = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "snapToItem", {
            get: function get() {
                return this._snapToItem;
            },
            set: function set(value) {
                this._snapToItem = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "mouseWheelEnabled", {
            get: function get() {
                return this._mouseWheelEnabled;
            },
            set: function set(value) {
                this._mouseWheelEnabled = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "isDragged", {
            get: function get() {
                return this._dragged;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "percX", {
            get: function get() {
                return this._overlapSize.x == 0 ? 0 : this._xPos / this._overlapSize.x;
            },
            set: function set(value) {
                this.setPercX(value, false);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.setPercX = function (value, ani) {
            this._owner.ensureBoundsCorrect();
            this.setPosX(this._overlapSize.x * fgui.ToolSet.clamp01(value), ani);
        };
        Object.defineProperty(ScrollPane.prototype, "percY", {
            get: function get() {
                return this._overlapSize.y == 0 ? 0 : this._yPos / this._overlapSize.y;
            },
            set: function set(value) {
                this.setPercY(value, false);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.setPercY = function (value, ani) {
            this._owner.ensureBoundsCorrect();
            this.setPosY(this._overlapSize.y * fgui.ToolSet.clamp01(value), ani);
        };
        Object.defineProperty(ScrollPane.prototype, "posX", {
            get: function get() {
                return this._xPos;
            },
            set: function set(value) {
                this.setPosX(value, false);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.setPosX = function (value, ani) {
            this._owner.ensureBoundsCorrect();
            if (this._loop == 1) value = this.loopCheckingNewPos(value, "x");
            value = fgui.ToolSet.clamp(value, 0, this._overlapSize.x);
            if (value != this._xPos) {
                this._xPos = value;
                this.posChanged(ani);
            }
        };
        Object.defineProperty(ScrollPane.prototype, "posY", {
            get: function get() {
                return this._yPos;
            },
            set: function set(value) {
                this.setPosY(value, false);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.setPosY = function (value, ani) {
            this._owner.ensureBoundsCorrect();
            if (this._loop == 1) value = this.loopCheckingNewPos(value, "y");
            value = fgui.ToolSet.clamp(value, 0, this._overlapSize.y);
            if (value != this._yPos) {
                this._yPos = value;
                this.posChanged(ani);
            }
        };
        Object.defineProperty(ScrollPane.prototype, "contentWidth", {
            get: function get() {
                return this._contentSize.x;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "contentHeight", {
            get: function get() {
                return this._contentSize.y;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "viewWidth", {
            get: function get() {
                return this._viewSize.x;
            },
            set: function set(value) {
                value = value + this._owner.margin.left + this._owner.margin.right;
                if (this._vtScrollBar != null && !this._floating) value += this._vtScrollBar.width;
                this._owner.width = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "viewHeight", {
            get: function get() {
                return this._viewSize.y;
            },
            set: function set(value) {
                value = value + this._owner.margin.top + this._owner.margin.bottom;
                if (this._hzScrollBar != null && !this._floating) value += this._hzScrollBar.height;
                this._owner.height = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "currentPageX", {
            get: function get() {
                if (!this._pageMode) return 0;
                var page = Math.floor(this._xPos / this._pageSize.x);
                if (this._xPos - page * this._pageSize.x > this._pageSize.x * 0.5) page++;
                return page;
            },
            set: function set(value) {
                this.setCurrentPageX(value, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "currentPageY", {
            get: function get() {
                if (!this._pageMode) return 0;
                var page = Math.floor(this._yPos / this._pageSize.y);
                if (this._yPos - page * this._pageSize.y > this._pageSize.y * 0.5) page++;
                return page;
            },
            set: function set(value) {
                this.setCurrentPageY(value, false);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.setCurrentPageX = function (value, ani) {
            if (!this._pageMode) return;
            this._owner.ensureBoundsCorrect();
            if (this._overlapSize.x > 0) this.setPosX(value * this._pageSize.x, ani);
        };
        ScrollPane.prototype.setCurrentPageY = function (value, ani) {
            if (!this._pageMode) return;
            this._owner.ensureBoundsCorrect();
            if (this._overlapSize.y > 0) this.setPosY(value * this._pageSize.y, ani);
        };
        Object.defineProperty(ScrollPane.prototype, "isBottomMost", {
            get: function get() {
                return this._yPos == this._overlapSize.y || this._overlapSize.y == 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "isRightMost", {
            get: function get() {
                return this._xPos == this._overlapSize.x || this._overlapSize.x == 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "pageController", {
            get: function get() {
                return this._pageController;
            },
            set: function set(value) {
                this._pageController = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "scrollingPosX", {
            get: function get() {
                return fgui.ToolSet.clamp(-this._container.x, 0, this._overlapSize.x);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScrollPane.prototype, "scrollingPosY", {
            get: function get() {
                return fgui.ToolSet.clamp(- -this._container.y, 0, this._overlapSize.y);
            },
            enumerable: false,
            configurable: true
        });
        ScrollPane.prototype.scrollTop = function (ani) {
            this.setPercY(0, ani);
        };
        ScrollPane.prototype.scrollBottom = function (ani) {
            this.setPercY(1, ani);
        };
        ScrollPane.prototype.scrollUp = function (ratio, ani) {
            if (ratio == undefined) ratio = 1;
            if (this._pageMode) this.setPosY(this._yPos - this._pageSize.y * ratio, ani);else this.setPosY(this._yPos - this._scrollStep * ratio, ani);
            ;
        };
        ScrollPane.prototype.scrollDown = function (ratio, ani) {
            if (ratio == undefined) ratio = 1;
            if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * ratio, ani);else this.setPosY(this._yPos + this._scrollStep * ratio, ani);
        };
        ScrollPane.prototype.scrollLeft = function (ratio, ani) {
            if (ratio == undefined) ratio = 1;
            if (this._pageMode) this.setPosX(this._xPos - this._pageSize.x * ratio, ani);else this.setPosX(this._xPos - this._scrollStep * ratio, ani);
        };
        ScrollPane.prototype.scrollRight = function (ratio, ani) {
            if (ratio == undefined) ratio = 1;
            if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * ratio, ani);else this.setPosX(this._xPos + this._scrollStep * ratio, ani);
        };
        ScrollPane.prototype.scrollToView = function (target, ani, setFirst) {
            this._owner.ensureBoundsCorrect();
            if (this._needRefresh) this.refresh();
            var rect;
            if (target instanceof fgui.GObject) {
                if (target.parent != this._owner) {
                    target.parent.localToGlobalRect(target.x, target.y, target.width, target.height, ScrollPane.sHelperRect);
                    rect = this._owner.globalToLocalRect(ScrollPane.sHelperRect.x, ScrollPane.sHelperRect.y, ScrollPane.sHelperRect.width, ScrollPane.sHelperRect.height, ScrollPane.sHelperRect);
                } else {
                    rect = ScrollPane.sHelperRect;
                    rect.x = target.x;
                    rect.y = target.y;
                    rect.width = target.width;
                    rect.height = target.height;
                }
            } else rect = target;
            if (this._overlapSize.y > 0) {
                var bottom = this._yPos + this._viewSize.y;
                if (setFirst || rect.y <= this._yPos || rect.height >= this._viewSize.y) {
                    if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else this.setPosY(rect.y, ani);
                } else if (rect.y + rect.height > bottom) {
                    if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else if (rect.height <= this._viewSize.y / 2) this.setPosY(rect.y + rect.height * 2 - this._viewSize.y, ani);else this.setPosY(rect.y + rect.height - this._viewSize.y, ani);
                }
            }
            if (this._overlapSize.x > 0) {
                var right = this._xPos + this._viewSize.x;
                if (setFirst || rect.x <= this._xPos || rect.width >= this._viewSize.x) {
                    if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else this.setPosX(rect.x, ani);
                } else if (rect.x + rect.width > right) {
                    if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else if (rect.width <= this._viewSize.x / 2) this.setPosX(rect.x + rect.width * 2 - this._viewSize.x, ani);else this.setPosX(rect.x + rect.width - this._viewSize.x, ani);
                }
            }
            if (!ani && this._needRefresh) this.refresh();
        };
        ScrollPane.prototype.isChildInView = function (obj) {
            if (this._overlapSize.y > 0) {
                var dist = obj.y + -this._container.y;
                if (dist < -obj.height || dist > this._viewSize.y) return false;
            }
            if (this._overlapSize.x > 0) {
                dist = obj.x + this._container.x;
                if (dist < -obj.width || dist > this._viewSize.x) return false;
            }
            return true;
        };
        ScrollPane.prototype.cancelDragging = function () {
            if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
            ScrollPane._gestureFlag = 0;
            this._dragged = false;
        };
        ScrollPane.prototype.lockHeader = function (size) {
            if (this._headerLockedSize == size) return;
            var cx = this._container.x;
            var cy = -this._container.y;
            var cr = this._refreshBarAxis == "x" ? cx : cy;
            this._headerLockedSize = size;
            if (!this._refreshEventDispatching && cr >= 0) {
                this._tweenStart.x = cx;
                this._tweenStart.y = cy;
                this._tweenChange.set(cc.Vec2.ZERO);
                this._tweenChange[this._refreshBarAxis] = this._headerLockedSize - this._tweenStart[this._refreshBarAxis];
                this._tweenDuration.x = this._tweenDuration.y = ScrollPane.TWEEN_TIME_DEFAULT;
                this.startTween(2);
            }
        };
        ScrollPane.prototype.lockFooter = function (size) {
            if (this._footerLockedSize == size) return;
            var cx = this._container.x;
            var cy = -this._container.y;
            var cr = this._refreshBarAxis == "x" ? cx : cy;
            this._footerLockedSize = size;
            if (!this._refreshEventDispatching && cr <= -this._overlapSize[this._refreshBarAxis]) {
                this._tweenStart.x = cx;
                this._tweenStart.y = cy;
                this._tweenChange.set(cc.Vec2.ZERO);
                var max = this._overlapSize[this._refreshBarAxis];
                if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
                this._tweenChange[this._refreshBarAxis] = -max - this._tweenStart[this._refreshBarAxis];
                this._tweenDuration.x = this._tweenDuration.y = ScrollPane.TWEEN_TIME_DEFAULT;
                this.startTween(2);
            }
        };
        ScrollPane.prototype.onOwnerSizeChanged = function () {
            this.setSize(this._owner.width, this._owner.height);
            this.posChanged(false);
        };
        ScrollPane.prototype.handleControllerChanged = function (c) {
            if (this._pageController == c) {
                if (this._scrollType == fgui.ScrollType.Horizontal) this.setCurrentPageX(c.selectedIndex, true);else this.setCurrentPageY(c.selectedIndex, true);
            }
        };
        ScrollPane.prototype.updatePageController = function () {
            if (this._pageController != null && !this._pageController.changing) {
                var index;
                if (this._scrollType == fgui.ScrollType.Horizontal) index = this.currentPageX;else index = this.currentPageY;
                if (index < this._pageController.pageCount) {
                    var c = this._pageController;
                    this._pageController = null;
                    c.selectedIndex = index;
                    this._pageController = c;
                }
            }
        };
        ScrollPane.prototype.adjustMaskContainer = function () {
            var mx = 0;
            if (this._displayOnLeft && this._vtScrollBar != null && !this._floating) mx = Math.floor(this._owner.margin.left + this._vtScrollBar.width);
            this._maskContainer.setAnchorPoint(this._owner._alignOffset.x / this._viewSize.x, 1 - this._owner._alignOffset.y / this._viewSize.y);
            if (this._owner._customMask) this._maskContainer.setPosition(mx + this._owner._alignOffset.x, -this._owner._alignOffset.y);else this._maskContainer.setPosition(this._owner._pivotCorrectX + mx + this._owner._alignOffset.x, this._owner._pivotCorrectY - this._owner._alignOffset.y);
        };
        ScrollPane.prototype.setSize = function (aWidth, aHeight) {
            if (this._hzScrollBar) {
                this._hzScrollBar.y = aHeight - this._hzScrollBar.height;
                if (this._vtScrollBar) {
                    this._hzScrollBar.width = aWidth - this._vtScrollBar.width - this._scrollBarMargin.left - this._scrollBarMargin.right;
                    if (this._displayOnLeft) this._hzScrollBar.x = this._scrollBarMargin.left + this._vtScrollBar.width;else this._hzScrollBar.x = this._scrollBarMargin.left;
                } else {
                    this._hzScrollBar.width = aWidth - this._scrollBarMargin.left - this._scrollBarMargin.right;
                    this._hzScrollBar.x = this._scrollBarMargin.left;
                }
            }
            if (this._vtScrollBar) {
                if (!this._displayOnLeft) this._vtScrollBar.x = aWidth - this._vtScrollBar.width;
                if (this._hzScrollBar) this._vtScrollBar.height = aHeight - this._hzScrollBar.height - this._scrollBarMargin.top - this._scrollBarMargin.bottom;else this._vtScrollBar.height = aHeight - this._scrollBarMargin.top - this._scrollBarMargin.bottom;
                this._vtScrollBar.y = this._scrollBarMargin.top;
            }
            this._viewSize.x = aWidth;
            this._viewSize.y = aHeight;
            if (this._hzScrollBar && !this._floating) this._viewSize.y -= this._hzScrollBar.height;
            if (this._vtScrollBar && !this._floating) this._viewSize.x -= this._vtScrollBar.width;
            this._viewSize.x -= this._owner.margin.left + this._owner.margin.right;
            this._viewSize.y -= this._owner.margin.top + this._owner.margin.bottom;
            this._viewSize.x = Math.max(1, this._viewSize.x);
            this._viewSize.y = Math.max(1, this._viewSize.y);
            this._pageSize.x = this._viewSize.x;
            this._pageSize.y = this._viewSize.y;
            this.adjustMaskContainer();
            this.handleSizeChanged();
        };
        ScrollPane.prototype.setContentSize = function (aWidth, aHeight) {
            if (this._contentSize.x == aWidth && this._contentSize.y == aHeight) return;
            this._contentSize.x = aWidth;
            this._contentSize.y = aHeight;
            this.handleSizeChanged();
        };
        ScrollPane.prototype.changeContentSizeOnScrolling = function (deltaWidth, deltaHeight, deltaPosX, deltaPosY) {
            var isRightmost = this._xPos == this._overlapSize.x;
            var isBottom = this._yPos == this._overlapSize.y;
            this._contentSize.x += deltaWidth;
            this._contentSize.y += deltaHeight;
            this.handleSizeChanged();
            if (this._tweening == 1) {
                if (deltaWidth != 0 && isRightmost && this._tweenChange.x < 0) {
                    this._xPos = this._overlapSize.x;
                    this._tweenChange.x = -this._xPos - this._tweenStart.x;
                }
                if (deltaHeight != 0 && isBottom && this._tweenChange.y < 0) {
                    this._yPos = this._overlapSize.y;
                    this._tweenChange.y = -this._yPos - this._tweenStart.y;
                }
            } else if (this._tweening == 2) {
                if (deltaPosX != 0) {
                    this._container.x -= deltaPosX;
                    this._tweenStart.x -= deltaPosX;
                    this._xPos = -this._container.x;
                }
                if (deltaPosY != 0) {
                    this._container.y += deltaPosY;
                    this._tweenStart.y -= deltaPosY;
                    this._yPos = - -this._container.y;
                }
            } else if (this._dragged) {
                if (deltaPosX != 0) {
                    this._container.x -= deltaPosX;
                    this._containerPos.x -= deltaPosX;
                    this._xPos = -this._container.x;
                }
                if (deltaPosY != 0) {
                    this._container.y += deltaPosY;
                    this._containerPos.y -= deltaPosY;
                    this._yPos = - -this._container.y;
                }
            } else {
                if (deltaWidth != 0 && isRightmost) {
                    this._xPos = this._overlapSize.x;
                    this._container.x = -this._xPos;
                }
                if (deltaHeight != 0 && isBottom) {
                    this._yPos = this._overlapSize.y;
                    this._container.y = this._yPos;
                }
            }
            if (this._pageMode) this.updatePageController();
        };
        ScrollPane.prototype.handleSizeChanged = function () {
            if (this._displayInDemand) {
                this._vScrollNone = this._contentSize.y <= this._viewSize.y;
                this._hScrollNone = this._contentSize.x <= this._viewSize.x;
            }
            if (this._vtScrollBar) {
                if (this._contentSize.y == 0) this._vtScrollBar.setDisplayPerc(0);else this._vtScrollBar.setDisplayPerc(Math.min(1, this._viewSize.y / this._contentSize.y));
            }
            if (this._hzScrollBar) {
                if (this._contentSize.x == 0) this._hzScrollBar.setDisplayPerc(0);else this._hzScrollBar.setDisplayPerc(Math.min(1, this._viewSize.x / this._contentSize.x));
            }
            this.updateScrollBarVisible();
            var maskWidth = this._viewSize.x;
            var maskHeight = this._viewSize.y;
            if (this._vScrollNone && this._vtScrollBar) maskWidth += this._vtScrollBar.width;
            if (this._hScrollNone && this._hzScrollBar) maskHeight += this._hzScrollBar.height;
            this._maskContainer.setContentSize(maskWidth, maskHeight);
            if (this._vtScrollBar) this._vtScrollBar.handlePositionChanged();
            if (this._hzScrollBar) this._hzScrollBar.handlePositionChanged();
            if (this._header) this._header.handlePositionChanged();
            if (this._footer) this._footer.handlePositionChanged();
            if (this._scrollType == fgui.ScrollType.Horizontal || this._scrollType == fgui.ScrollType.Both) this._overlapSize.x = Math.ceil(Math.max(0, this._contentSize.x - this._viewSize.x));else this._overlapSize.x = 0;
            if (this._scrollType == fgui.ScrollType.Vertical || this._scrollType == fgui.ScrollType.Both) this._overlapSize.y = Math.ceil(Math.max(0, this._contentSize.y - this._viewSize.y));else this._overlapSize.y = 0;
            this._xPos = fgui.ToolSet.clamp(this._xPos, 0, this._overlapSize.x);
            this._yPos = fgui.ToolSet.clamp(this._yPos, 0, this._overlapSize.y);
            var max = this._overlapSize[this._refreshBarAxis];
            if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
            if (this._refreshBarAxis == "x") this._container.setPosition(fgui.ToolSet.clamp(this._container.x, -max, this._headerLockedSize), -fgui.ToolSet.clamp(-this._container.y, -this._overlapSize.y, 0));else this._container.setPosition(fgui.ToolSet.clamp(this._container.x, -this._overlapSize.x, 0), -fgui.ToolSet.clamp(-this._container.y, -max, this._headerLockedSize));
            if (this._header != null) {
                if (this._refreshBarAxis == "x") this._header.height = this._viewSize.y;else this._header.width = this._viewSize.x;
            }
            if (this._footer != null) {
                if (this._refreshBarAxis == "y") this._footer.height = this._viewSize.y;else this._footer.width = this._viewSize.x;
            }
            this.updateScrollBarPos();
            if (this._pageMode) this.updatePageController();
        };
        ScrollPane.prototype.posChanged = function (ani) {
            if (this._aniFlag == 0) this._aniFlag = ani ? 1 : -1;else if (this._aniFlag == 1 && !ani) this._aniFlag = -1;
            this._needRefresh = true;
            if (!cc.director.getScheduler().isScheduled(this.refresh, this)) this.scheduleOnce(this.refresh);
        };
        ScrollPane.prototype.refresh = function (dt) {
            this._needRefresh = false;
            this.unschedule(this.refresh);
            if (this._pageMode || this._snapToItem) {
                ScrollPane.sEndPos.x = -this._xPos;
                ScrollPane.sEndPos.y = -this._yPos;
                this.alignPosition(ScrollPane.sEndPos, false);
                this._xPos = -ScrollPane.sEndPos.x;
                this._yPos = -ScrollPane.sEndPos.y;
            }
            this.refresh2();
            this._owner.node.emit(fgui.Event.SCROLL, this._owner);
            if (this._needRefresh) {
                this._needRefresh = false;
                this.unschedule(this.refresh);
                this.refresh2();
            }
            this.updateScrollBarPos();
            this._aniFlag = 0;
        };
        ScrollPane.prototype.refresh2 = function () {
            if (this._aniFlag == 1 && !this._dragged) {
                var posX;
                var posY;
                if (this._overlapSize.x > 0) posX = -Math.floor(this._xPos);else {
                    if (this._container.x != 0) this._container.x = 0;
                    posX = 0;
                }
                if (this._overlapSize.y > 0) posY = -Math.floor(this._yPos);else {
                    if (this._container.y != 0) this._container.y = 0;
                    posY = 0;
                }
                if (posX != this._container.x || posY != -this._container.y) {
                    this._tweenDuration.x = this._tweenDuration.y = ScrollPane.TWEEN_TIME_GO;
                    this._tweenStart.x = this._container.x;
                    this._tweenStart.y = -this._container.y;
                    this._tweenChange.x = posX - this._tweenStart.x;
                    this._tweenChange.y = posY - this._tweenStart.y;
                    this.startTween(1);
                } else if (this._tweening != 0) this.killTween();
            } else {
                if (this._tweening != 0) this.killTween();
                this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));
                this.loopCheckingCurrent();
            }
            if (this._pageMode) this.updatePageController();
        };
        ScrollPane.prototype.onTouchBegin = function (evt) {
            if (!this._touchEffect) return;
            evt.captureTouch();
            if (this._tweening != 0) {
                this.killTween();
                fgui.GRoot.inst.inputProcessor.cancelClick(evt.touchId);
                this._dragged = true;
            } else this._dragged = false;
            var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, ScrollPane.sHelperPoint);
            this._containerPos.x = this._container.x;
            this._containerPos.y = -this._container.y;
            this._beginTouchPos.set(pt);
            this._lastTouchPos.set(pt);
            this._lastTouchGlobalPos.set(evt.pos);
            this._isHoldAreaDone = false;
            this._velocity.set(cc.Vec2.ZERO);
            ;
            this._velocityScale = 1;
            this._lastMoveTime = fgui.ToolSet.getTime();
        };
        ScrollPane.prototype.onTouchMove = function (evt) {
            if (!cc.isValid(this._owner.node)) return;
            if (!this._touchEffect) return;
            if (fgui.GObject.draggingObject != null && fgui.GObject.draggingObject.onStage) return;
            if (ScrollPane.draggingPane != null && ScrollPane.draggingPane != this && ScrollPane.draggingPane._owner.onStage) return;
            var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, ScrollPane.sHelperPoint);
            var sensitivity = fgui.UIConfig.touchScrollSensitivity;
            var diff, diff2;
            var sv, sh, st;
            if (this._scrollType == fgui.ScrollType.Vertical) {
                if (!this._isHoldAreaDone) {
                    ScrollPane._gestureFlag |= 1;
                    diff = Math.abs(this._beginTouchPos.y - pt.y);
                    if (diff < sensitivity) return;
                    if ((ScrollPane._gestureFlag & 2) != 0) {
                        diff2 = Math.abs(this._beginTouchPos.x - pt.x);
                        if (diff < diff2) return;
                    }
                }
                sv = true;
            } else if (this._scrollType == fgui.ScrollType.Horizontal) {
                if (!this._isHoldAreaDone) {
                    ScrollPane._gestureFlag |= 2;
                    diff = Math.abs(this._beginTouchPos.x - pt.x);
                    if (diff < sensitivity) return;
                    if ((ScrollPane._gestureFlag & 1) != 0) {
                        diff2 = Math.abs(this._beginTouchPos.y - pt.y);
                        if (diff < diff2) return;
                    }
                }
                sh = true;
            } else {
                ScrollPane._gestureFlag = 3;
                if (!this._isHoldAreaDone) {
                    diff = Math.abs(this._beginTouchPos.y - pt.y);
                    if (diff < sensitivity) {
                        diff = Math.abs(this._beginTouchPos.x - pt.x);
                        if (diff < sensitivity) return;
                    }
                }
                sv = sh = true;
            }
            var newPosX = Math.floor(this._containerPos.x + pt.x - this._beginTouchPos.x);
            var newPosY = Math.floor(this._containerPos.y + pt.y - this._beginTouchPos.y);
            if (sv) {
                if (newPosY > 0) {
                    if (!this._bouncebackEffect) this._container.y = 0;else if (this._header != null && this._header.maxHeight != 0) this._container.y = -Math.floor(Math.min(newPosY * 0.5, this._header.maxHeight));else this._container.y = -Math.floor(Math.min(newPosY * 0.5, this._viewSize.y * ScrollPane.PULL_RATIO));
                } else if (newPosY < -this._overlapSize.y) {
                    if (!this._bouncebackEffect) this._container.y = this._overlapSize.y;else if (this._footer != null && this._footer.maxHeight > 0) this._container.y = -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._footer.maxHeight) - this._overlapSize.y);else this._container.y = -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._viewSize.y * ScrollPane.PULL_RATIO) - this._overlapSize.y);
                } else this._container.y = -newPosY;
            }
            if (sh) {
                if (newPosX > 0) {
                    if (!this._bouncebackEffect) this._container.x = 0;else if (this._header != null && this._header.maxWidth != 0) this._container.x = Math.floor(Math.min(newPosX * 0.5, this._header.maxWidth));else this._container.x = Math.floor(Math.min(newPosX * 0.5, this._viewSize.x * ScrollPane.PULL_RATIO));
                } else if (newPosX < 0 - this._overlapSize.x) {
                    if (!this._bouncebackEffect) this._container.x = -this._overlapSize.x;else if (this._footer != null && this._footer.maxWidth > 0) this._container.x = Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._footer.maxWidth) - this._overlapSize.x);else this._container.x = Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._viewSize.x * ScrollPane.PULL_RATIO) - this._overlapSize.x);
                } else this._container.x = newPosX;
            }
            var now = fgui.ToolSet.getTime();
            var deltaTime = Math.max(now - this._lastMoveTime, 1 / 60);
            var deltaPositionX = pt.x - this._lastTouchPos.x;
            var deltaPositionY = pt.y - this._lastTouchPos.y;
            if (!sh) deltaPositionX = 0;
            if (!sv) deltaPositionY = 0;
            if (deltaTime != 0) {
                var frameRate = 60;
                var elapsed = deltaTime * frameRate - 1;
                if (elapsed > 1) {
                    var factor = Math.pow(0.833, elapsed);
                    this._velocity.x = this._velocity.x * factor;
                    this._velocity.y = this._velocity.y * factor;
                }
                this._velocity.x = fgui.ToolSet.lerp(this._velocity.x, deltaPositionX * 60 / frameRate / deltaTime, deltaTime * 10);
                this._velocity.y = fgui.ToolSet.lerp(this._velocity.y, deltaPositionY * 60 / frameRate / deltaTime, deltaTime * 10);
            }
            var deltaGlobalPositionX = this._lastTouchGlobalPos.x - evt.pos.x;
            var deltaGlobalPositionY = this._lastTouchGlobalPos.y - evt.pos.y;
            if (deltaPositionX != 0) this._velocityScale = Math.abs(deltaGlobalPositionX / deltaPositionX);else if (deltaPositionY != 0) this._velocityScale = Math.abs(deltaGlobalPositionY / deltaPositionY);
            this._lastTouchPos.set(pt);
            this._lastTouchGlobalPos.x = evt.pos.x;
            this._lastTouchGlobalPos.y = evt.pos.y;
            this._lastMoveTime = now;
            if (this._overlapSize.x > 0) this._xPos = fgui.ToolSet.clamp(-this._container.x, 0, this._overlapSize.x);
            if (this._overlapSize.y > 0) this._yPos = fgui.ToolSet.clamp(- -this._container.y, 0, this._overlapSize.y);
            if (this._loop != 0) {
                newPosX = this._container.x;
                newPosY = -this._container.y;
                if (this.loopCheckingCurrent()) {
                    this._containerPos.x += this._container.x - newPosX;
                    this._containerPos.y += -this._container.y - newPosY;
                }
            }
            ScrollPane.draggingPane = this;
            this._isHoldAreaDone = true;
            this._dragged = true;
            this.updateScrollBarPos();
            this.updateScrollBarVisible();
            if (this._pageMode) this.updatePageController();
            this._owner.node.emit(fgui.Event.SCROLL), this._owner;
        };
        ScrollPane.prototype.onTouchEnd = function (evt) {
            if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
            ScrollPane._gestureFlag = 0;
            if (!this._dragged || !this._touchEffect || !this._owner.node.activeInHierarchy) {
                this._dragged = false;
                return;
            }
            this._dragged = false;
            this._tweenStart.x = this._container.x;
            this._tweenStart.y = -this._container.y;
            ScrollPane.sEndPos.set(this._tweenStart);
            var flag = false;
            if (this._container.x > 0) {
                ScrollPane.sEndPos.x = 0;
                flag = true;
            } else if (this._container.x < -this._overlapSize.x) {
                ScrollPane.sEndPos.x = -this._overlapSize.x;
                flag = true;
            }
            if (-this._container.y > 0) {
                ScrollPane.sEndPos.y = 0;
                flag = true;
            } else if (-this._container.y < -this._overlapSize.y) {
                ScrollPane.sEndPos.y = -this._overlapSize.y;
                flag = true;
            }
            if (flag) {
                this._tweenChange.x = ScrollPane.sEndPos.x - this._tweenStart.x;
                this._tweenChange.y = ScrollPane.sEndPos.y - this._tweenStart.y;
                if (this._tweenChange.x < -fgui.UIConfig.touchDragSensitivity || this._tweenChange.y < -fgui.UIConfig.touchDragSensitivity) {
                    this._refreshEventDispatching = true;
                    this._owner.node.emit(fgui.Event.PULL_DOWN_RELEASE), this._owner;
                    this._refreshEventDispatching = false;
                } else if (this._tweenChange.x > fgui.UIConfig.touchDragSensitivity || this._tweenChange.y > fgui.UIConfig.touchDragSensitivity) {
                    this._refreshEventDispatching = true;
                    this._owner.node.emit(fgui.Event.PULL_UP_RELEASE, this._owner);
                    this._refreshEventDispatching = false;
                }
                if (this._headerLockedSize > 0 && ScrollPane.sEndPos[this._refreshBarAxis] == 0) {
                    ScrollPane.sEndPos[this._refreshBarAxis] = this._headerLockedSize;
                    this._tweenChange.x = ScrollPane.sEndPos.x - this._tweenStart.x;
                    this._tweenChange.y = ScrollPane.sEndPos.y - this._tweenStart.y;
                } else if (this._footerLockedSize > 0 && ScrollPane.sEndPos[this._refreshBarAxis] == -this._overlapSize[this._refreshBarAxis]) {
                    var max = this._overlapSize[this._refreshBarAxis];
                    if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
                    ScrollPane.sEndPos[this._refreshBarAxis] = -max;
                    this._tweenChange.x = ScrollPane.sEndPos.x - this._tweenStart.x;
                    this._tweenChange.y = ScrollPane.sEndPos.y - this._tweenStart.y;
                }
                this._tweenDuration.x = this._tweenDuration.y = ScrollPane.TWEEN_TIME_DEFAULT;
            } else {
                if (!this._inertiaDisabled) {
                    var frameRate = 60;
                    var elapsed = (fgui.ToolSet.getTime() - this._lastMoveTime) * frameRate - 1;
                    if (elapsed > 1) {
                        var factor = Math.pow(0.833, elapsed);
                        this._velocity.x = this._velocity.x * factor;
                        this._velocity.y = this._velocity.y * factor;
                    }
                    this.updateTargetAndDuration(this._tweenStart, ScrollPane.sEndPos);
                } else this._tweenDuration.x = this._tweenDuration.y = ScrollPane.TWEEN_TIME_DEFAULT;
                ScrollPane.sOldChange.x = ScrollPane.sEndPos.x - this._tweenStart.x;
                ScrollPane.sOldChange.y = ScrollPane.sEndPos.y - this._tweenStart.y;
                this.loopCheckingTarget(ScrollPane.sEndPos);
                if (this._pageMode || this._snapToItem) this.alignPosition(ScrollPane.sEndPos, true);
                this._tweenChange.x = ScrollPane.sEndPos.x - this._tweenStart.x;
                this._tweenChange.y = ScrollPane.sEndPos.y - this._tweenStart.y;
                if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
                    this.updateScrollBarVisible();
                    return;
                }
                if (this._pageMode || this._snapToItem) {
                    this.fixDuration("x", ScrollPane.sOldChange.x);
                    this.fixDuration("y", ScrollPane.sOldChange.y);
                }
            }
            this.startTween(2);
        };
        ScrollPane.prototype.onRollOver = function () {
            this._hover = true;
            this.updateScrollBarVisible();
        };
        ScrollPane.prototype.onRollOut = function () {
            this._hover = false;
            this.updateScrollBarVisible();
        };
        ScrollPane.prototype.onMouseWheel = function (evt) {
            if (!this._mouseWheelEnabled) return;
            var delta = evt.mouseWheelDelta > 0 ? -1 : 1;
            if (this._overlapSize.x > 0 && this._overlapSize.y == 0) {
                if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * delta, false);else this.setPosX(this._xPos + this._mouseWheelStep * delta, false);
            } else {
                if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * delta, false);else this.setPosY(this._yPos + this._mouseWheelStep * delta, false);
            }
        };
        ScrollPane.prototype.updateScrollBarPos = function () {
            if (this._vtScrollBar != null) this._vtScrollBar.setScrollPerc(this._overlapSize.y == 0 ? 0 : fgui.ToolSet.clamp(this._container.y, 0, this._overlapSize.y) / this._overlapSize.y);
            if (this._hzScrollBar != null) this._hzScrollBar.setScrollPerc(this._overlapSize.x == 0 ? 0 : fgui.ToolSet.clamp(-this._container.x, 0, this._overlapSize.x) / this._overlapSize.x);
            this.checkRefreshBar();
        };
        ScrollPane.prototype.updateScrollBarVisible = function () {
            if (this._vtScrollBar) {
                if (this._viewSize.y <= this._vtScrollBar.minSize || this._vScrollNone) this._vtScrollBar.node.active = false;else this.updateScrollBarVisible2(this._vtScrollBar);
            }
            if (this._hzScrollBar) {
                if (this._viewSize.x <= this._hzScrollBar.minSize || this._hScrollNone) this._hzScrollBar.node.active = false;else this.updateScrollBarVisible2(this._hzScrollBar);
            }
        };
        ScrollPane.prototype.updateScrollBarVisible2 = function (bar) {
            if (this._scrollBarDisplayAuto) fgui.GTween.kill(bar, false, "alpha");
            if (this._scrollBarDisplayAuto && !this._hover && this._tweening == 0 && !this._dragged && !bar.gripDragging) {
                if (bar.node.active) fgui.GTween.to(1, 0, 0.5).setDelay(0.5).onComplete(this.__barTweenComplete, this).setTarget(bar, "alpha");
            } else {
                bar.alpha = 1;
                bar.node.active = true;
            }
        };
        ScrollPane.prototype.__barTweenComplete = function (tweener) {
            var bar = tweener.target;
            bar.alpha = 1;
            bar.node.active = false;
        };
        ScrollPane.prototype.getLoopPartSize = function (division, axis) {
            return (this._contentSize[axis] + (axis == "x" ? this._owner.columnGap : this._owner.lineGap)) / division;
        };
        ScrollPane.prototype.loopCheckingCurrent = function () {
            var changed = false;
            if (this._loop == 1 && this._overlapSize.x > 0) {
                if (this._xPos < 0.001) {
                    this._xPos += this.getLoopPartSize(2, "x");
                    changed = true;
                } else if (this._xPos >= this._overlapSize.x) {
                    this._xPos -= this.getLoopPartSize(2, "x");
                    changed = true;
                }
            } else if (this._loop == 2 && this._overlapSize.y > 0) {
                if (this._yPos < 0.001) {
                    this._yPos += this.getLoopPartSize(2, "y");
                    changed = true;
                } else if (this._yPos >= this._overlapSize.y) {
                    this._yPos -= this.getLoopPartSize(2, "y");
                    changed = true;
                }
            }
            if (changed) {
                this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));
            }
            return changed;
        };
        ScrollPane.prototype.loopCheckingTarget = function (endPos) {
            if (this._loop == 1) this.loopCheckingTarget2(endPos, "x");
            if (this._loop == 2) this.loopCheckingTarget2(endPos, "y");
        };
        ScrollPane.prototype.loopCheckingTarget2 = function (endPos, axis) {
            var halfSize;
            var tmp;
            if (endPos[axis] > 0) {
                halfSize = this.getLoopPartSize(2, axis);
                tmp = this._tweenStart[axis] - halfSize;
                if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
                    endPos[axis] -= halfSize;
                    this._tweenStart[axis] = tmp;
                }
            } else if (endPos[axis] < -this._overlapSize[axis]) {
                halfSize = this.getLoopPartSize(2, axis);
                tmp = this._tweenStart[axis] + halfSize;
                if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
                    endPos[axis] += halfSize;
                    this._tweenStart[axis] = tmp;
                }
            }
        };
        ScrollPane.prototype.loopCheckingNewPos = function (value, axis) {
            if (this._overlapSize[axis] == 0) return value;
            var pos = axis == "x" ? this._xPos : this._yPos;
            var changed = false;
            var v;
            if (value < 0.001) {
                value += this.getLoopPartSize(2, axis);
                if (value > pos) {
                    v = this.getLoopPartSize(6, axis);
                    v = Math.ceil((value - pos) / v) * v;
                    pos = fgui.ToolSet.clamp(pos + v, 0, this._overlapSize[axis]);
                    changed = true;
                }
            } else if (value >= this._overlapSize[axis]) {
                value -= this.getLoopPartSize(2, axis);
                if (value < pos) {
                    v = this.getLoopPartSize(6, axis);
                    v = Math.ceil((pos - value) / v) * v;
                    pos = fgui.ToolSet.clamp(pos - v, 0, this._overlapSize[axis]);
                    changed = true;
                }
            }
            if (changed) {
                if (axis == "x") this._container.x = -Math.floor(pos);else this._container.y = Math.floor(pos);
            }
            return value;
        };
        ScrollPane.prototype.alignPosition = function (pos, inertialScrolling) {
            if (this._pageMode) {
                pos.x = this.alignByPage(pos.x, "x", inertialScrolling);
                pos.y = this.alignByPage(pos.y, "y", inertialScrolling);
            } else if (this._snapToItem) {
                var pt = this._owner.getSnappingPosition(-pos.x, -pos.y, ScrollPane.sHelperPoint);
                if (pos.x < 0 && pos.x > -this._overlapSize.x) pos.x = -pt.x;
                if (pos.y < 0 && pos.y > -this._overlapSize.y) pos.y = -pt.y;
            }
        };
        ScrollPane.prototype.alignByPage = function (pos, axis, inertialScrolling) {
            var page;
            if (pos > 0) page = 0;else if (pos < -this._overlapSize[axis]) page = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else {
                page = Math.floor(-pos / this._pageSize[axis]);
                var change = inertialScrolling ? pos - this._containerPos[axis] : pos - (axis == "x" ? this._container.x : -this._container.y);
                var testPageSize = Math.min(this._pageSize[axis], this._contentSize[axis] - (page + 1) * this._pageSize[axis]);
                var delta = -pos - page * this._pageSize[axis];
                if (Math.abs(change) > this._pageSize[axis]) {
                    if (delta > testPageSize * 0.5) page++;
                } else {
                    if (delta > testPageSize * (change < 0 ? 0.3 : 0.7)) page++;
                }
                pos = -page * this._pageSize[axis];
                if (pos < -this._overlapSize[axis]) pos = -this._overlapSize[axis];
            }
            if (inertialScrolling) {
                var oldPos = this._tweenStart[axis];
                var oldPage;
                if (oldPos > 0) oldPage = 0;else if (oldPos < -this._overlapSize[axis]) oldPage = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else oldPage = Math.floor(-oldPos / this._pageSize[axis]);
                var startPage = Math.floor(-this._containerPos[axis] / this._pageSize[axis]);
                if (Math.abs(page - startPage) > 1 && Math.abs(oldPage - startPage) <= 1) {
                    if (page > startPage) page = startPage + 1;else page = startPage - 1;
                    pos = -page * this._pageSize[axis];
                }
            }
            return pos;
        };
        ScrollPane.prototype.updateTargetAndDuration = function (orignPos, resultPos) {
            resultPos.x = this.updateTargetAndDuration2(orignPos.x, "x");
            resultPos.y = this.updateTargetAndDuration2(orignPos.y, "y");
        };
        ScrollPane.prototype.updateTargetAndDuration2 = function (pos, axis) {
            var v = this._velocity[axis];
            var duration = 0;
            if (pos > 0) pos = 0;else if (pos < -this._overlapSize[axis]) pos = -this._overlapSize[axis];else {
                var isMobile = cc.sys.isMobile;
                var v2 = Math.abs(v) * this._velocityScale;
                if (isMobile) v2 *= 1136 / Math.max(cc.winSize.width, cc.winSize.height);
                var ratio = 0;
                if (this._pageMode || !isMobile) {
                    if (v2 > 500) ratio = Math.pow((v2 - 500) / 500, 2);
                } else {
                    if (v2 > 1000) ratio = Math.pow((v2 - 1000) / 1000, 2);
                }
                if (ratio != 0) {
                    if (ratio > 1) ratio = 1;
                    v2 *= ratio;
                    v *= ratio;
                    this._velocity[axis] = v;
                    duration = Math.log(60 / v2) / Math.log(this._decelerationRate) / 60;
                    var change = Math.floor(v * duration * 0.4);
                    pos += change;
                }
            }
            if (duration < ScrollPane.TWEEN_TIME_DEFAULT) duration = ScrollPane.TWEEN_TIME_DEFAULT;
            this._tweenDuration[axis] = duration;
            return pos;
        };
        ScrollPane.prototype.fixDuration = function (axis, oldChange) {
            if (this._tweenChange[axis] == 0 || Math.abs(this._tweenChange[axis]) >= Math.abs(oldChange)) return;
            var newDuration = Math.abs(this._tweenChange[axis] / oldChange) * this._tweenDuration[axis];
            if (newDuration < ScrollPane.TWEEN_TIME_DEFAULT) newDuration = ScrollPane.TWEEN_TIME_DEFAULT;
            this._tweenDuration[axis] = newDuration;
        };
        ScrollPane.prototype.startTween = function (type) {
            this._tweenTime.set(cc.Vec2.ZERO);
            this._tweening = type;
            this.updateScrollBarVisible();
        };
        ScrollPane.prototype.killTween = function () {
            if (this._tweening == 1) {
                this._container.setPosition(this._tweenStart.x + this._tweenChange.x, -(this._tweenStart.y + this._tweenChange.y));
                this._owner.node.emit(fgui.Event.SCROLL, this._owner);
            }
            this._tweening = 0;
            this.updateScrollBarVisible();
            this._owner.node.emit(fgui.Event.SCROLL_END, this._owner);
        };
        ScrollPane.prototype.checkRefreshBar = function () {
            if (this._header == null && this._footer == null) return;
            var pos = this._refreshBarAxis == "x" ? this._container.x : -this._container.y;
            if (this._header != null) {
                if (pos > 0) {
                    this._header.node.active = true;
                    var pt = ScrollPane.sHelperPoint;
                    pt.x = this._header.width;
                    pt.y = this._header.height;
                    pt[this._refreshBarAxis] = pos;
                    this._header.setSize(pt.x, pt.y);
                } else {
                    this._header.node.active = false;
                }
            }
            if (this._footer != null) {
                var max = this._overlapSize[this._refreshBarAxis];
                if (pos < -max || max == 0 && this._footerLockedSize > 0) {
                    this._footer.node.active = true;
                    pt = ScrollPane.sHelperPoint;
                    pt.x = this._footer.x;
                    pt.y = this._footer.y;
                    if (max > 0) pt[this._refreshBarAxis] = pos + this._contentSize[this._refreshBarAxis];else pt[this._refreshBarAxis] = Math.max(Math.min(pos + this._viewSize[this._refreshBarAxis], this._viewSize[this._refreshBarAxis] - this._footerLockedSize), this._viewSize[this._refreshBarAxis] - this._contentSize[this._refreshBarAxis]);
                    this._footer.setPosition(pt.x, pt.y);
                    pt.x = this._footer.width;
                    pt.y = this._footer.height;
                    if (max > 0) pt[this._refreshBarAxis] = -max - pos;else pt[this._refreshBarAxis] = this._viewSize[this._refreshBarAxis] - this._footer[this._refreshBarAxis];
                    this._footer.setSize(pt.x, pt.y);
                } else {
                    this._footer.node.active = false;
                }
            }
        };
        ScrollPane.prototype.update = function (dt) {
            if (this._tweening == 0) return;
            var nx = this.runTween("x", dt);
            var ny = this.runTween("y", dt);
            this._container.setPosition(nx, -ny);
            if (this._tweening == 2) {
                if (this._overlapSize.x > 0) this._xPos = fgui.ToolSet.clamp(-nx, 0, this._overlapSize.x);
                if (this._overlapSize.y > 0) this._yPos = fgui.ToolSet.clamp(-ny, 0, this._overlapSize.y);
                if (this._pageMode) this.updatePageController();
            }
            if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
                this._tweening = 0;
                this.loopCheckingCurrent();
                this.updateScrollBarPos();
                this.updateScrollBarVisible();
                this._owner.node.emit(fgui.Event.SCROLL, this._owner);
                this._owner.node.emit(fgui.Event.SCROLL_END, this._owner);
            } else {
                this.updateScrollBarPos();
                this._owner.node.emit(fgui.Event.SCROLL, this._owner);
            }
            return true;
        };
        ScrollPane.prototype.runTween = function (axis, dt) {
            var newValue;
            if (this._tweenChange[axis] != 0) {
                this._tweenTime[axis] += dt;
                if (this._tweenTime[axis] >= this._tweenDuration[axis]) {
                    newValue = this._tweenStart[axis] + this._tweenChange[axis];
                    this._tweenChange[axis] = 0;
                } else {
                    var ratio = ScrollPane.easeFunc(this._tweenTime[axis], this._tweenDuration[axis]);
                    newValue = this._tweenStart[axis] + Math.floor(this._tweenChange[axis] * ratio);
                }
                var threshold1 = 0;
                var threshold2 = -this._overlapSize[axis];
                if (this._headerLockedSize > 0 && this._refreshBarAxis == axis) threshold1 = this._headerLockedSize;
                if (this._footerLockedSize > 0 && this._refreshBarAxis == axis) {
                    var max = this._overlapSize[this._refreshBarAxis];
                    if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
                    threshold2 = -max;
                }
                if (this._tweening == 2 && this._bouncebackEffect) {
                    if (newValue > 20 + threshold1 && this._tweenChange[axis] > 0 || newValue > threshold1 && this._tweenChange[axis] == 0) {
                        this._tweenTime[axis] = 0;
                        this._tweenDuration[axis] = ScrollPane.TWEEN_TIME_DEFAULT;
                        this._tweenChange[axis] = -newValue + threshold1;
                        this._tweenStart[axis] = newValue;
                    } else if (newValue < threshold2 - 20 && this._tweenChange[axis] < 0 || newValue < threshold2 && this._tweenChange[axis] == 0) {
                        this._tweenTime[axis] = 0;
                        this._tweenDuration[axis] = ScrollPane.TWEEN_TIME_DEFAULT;
                        this._tweenChange[axis] = threshold2 - newValue;
                        this._tweenStart[axis] = newValue;
                    }
                } else {
                    if (newValue > threshold1) {
                        newValue = threshold1;
                        this._tweenChange[axis] = 0;
                    } else if (newValue < threshold2) {
                        newValue = threshold2;
                        this._tweenChange[axis] = 0;
                    }
                }
            } else newValue = axis == "x" ? this._container.x : -this._container.y;
            return newValue;
        };
        ScrollPane.easeFunc = function (t, d) {
            return (t = t / d - 1) * t * t + 1;
        };
        ScrollPane._gestureFlag = 0;
        ScrollPane.TWEEN_TIME_GO = 0.5;
        ScrollPane.TWEEN_TIME_DEFAULT = 0.3;
        ScrollPane.PULL_RATIO = 0.5;
        ScrollPane.sHelperPoint = new cc.Vec2();
        ScrollPane.sHelperRect = new cc.Rect();
        ScrollPane.sEndPos = new cc.Vec2();
        ScrollPane.sOldChange = new cc.Vec2();
        return ScrollPane;
    }(cc.Component);
    fgui.ScrollPane = ScrollPane;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Transition = function () {
        function Transition(owner) {
            this._ownerBaseX = 0;
            this._ownerBaseY = 0;
            this._totalTimes = 0;
            this._totalTasks = 0;
            this._playing = false;
            this._paused = false;
            this._options = 0;
            this._reversed = false;
            this._totalDuration = 0;
            this._autoPlay = false;
            this._autoPlayTimes = 1;
            this._autoPlayDelay = 0;
            this._timeScale = 1;
            this._startTime = 0;
            this._endTime = 0;
            this._owner = owner;
            this._items = new Array();
        }
        Transition.prototype.play = function (onComplete, times, delay, startTime, endTime) {
            this._play(onComplete, times, delay, startTime, endTime, false);
        };
        Transition.prototype.playReverse = function (onComplete, times, delay) {
            this._play(onComplete, times, delay, 0, -1, true);
        };
        Transition.prototype.changePlayTimes = function (value) {
            this._totalTimes = value;
        };
        Transition.prototype.setAutoPlay = function (value, times, delay) {
            if (times == undefined) times = -1;
            if (delay == undefined) delay = 0;
            if (this._autoPlay != value) {
                this._autoPlay = value;
                this._autoPlayTimes = times;
                this._autoPlayDelay = delay;
                if (this._autoPlay) {
                    if (this._owner.onStage) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
                } else {
                    if (!this._owner.onStage) this.stop(false, true);
                }
            }
        };
        Transition.prototype._play = function (onComplete, times, delay, startTime, endTime, reversed) {
            if (times == undefined) times = 1;
            if (delay == undefined) delay = 0;
            if (startTime == undefined) startTime = 0;
            if (endTime == undefined) endTime = -1;
            this.stop(true, true);
            this._totalTimes = times;
            this._reversed = reversed;
            this._startTime = startTime;
            this._endTime = endTime;
            this._playing = true;
            this._paused = false;
            this._onComplete = onComplete;
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.target == null) {
                    if (item.targetId) item.target = this._owner.getChildById(item.targetId);else item.target = this._owner;
                } else if (item.target != this._owner && item.target.parent != this._owner) item.target = null;
                if (item.target != null && item.type == TransitionActionType.Transition) {
                    var trans = item.target.getTransition(item.value.transName);
                    if (trans == this) trans = null;
                    if (trans != null) {
                        if (item.value.playTimes == 0) {
                            var j;
                            for (j = i - 1; j >= 0; j--) {
                                var item2 = this._items[j];
                                if (item2.type == TransitionActionType.Transition) {
                                    if (item2.value.trans == trans) {
                                        item2.value.stopTime = item.time - item2.time;
                                        break;
                                    }
                                }
                            }
                            if (j < 0) item.value.stopTime = 0;else trans = null;
                        } else item.value.stopTime = -1;
                    }
                    item.value.trans = trans;
                }
            }
            if (delay == 0) this.onDelayedPlay();else fgui.GTween.delayedCall(delay).onComplete(this.onDelayedPlay, this);
        };
        Transition.prototype.stop = function (setToComplete, processCallback) {
            if (setToComplete == undefined) setToComplete = true;
            if (!this._playing) return;
            this._playing = false;
            this._totalTasks = 0;
            this._totalTimes = 0;
            var func = this._onComplete;
            this._onComplete = null;
            fgui.GTween.kill(this);
            var cnt = this._items.length;
            if (this._reversed) {
                for (var i = cnt - 1; i >= 0; i--) {
                    var item = this._items[i];
                    if (item.target == null) continue;
                    this.stopItem(item, setToComplete);
                }
            } else {
                for (i = 0; i < cnt; i++) {
                    item = this._items[i];
                    if (item.target == null) continue;
                    this.stopItem(item, setToComplete);
                }
            }
            if (processCallback && func != null) {
                func();
            }
        };
        Transition.prototype.stopItem = function (item, setToComplete) {
            if (item.displayLockToken != 0) {
                item.target.releaseDisplayLock(item.displayLockToken);
                item.displayLockToken = 0;
            }
            if (item.tweener != null) {
                item.tweener.kill(setToComplete);
                item.tweener = null;
                if (item.type == TransitionActionType.Shake && !setToComplete) {
                    item.target._gearLocked = true;
                    item.target.setPosition(item.target.x - item.value.lastOffsetX, item.target.y - item.value.lastOffsetY);
                    item.target._gearLocked = false;
                }
            }
            if (item.type == TransitionActionType.Transition) {
                var trans = item.value.trans;
                if (trans != null) trans.stop(setToComplete, false);
            }
        };
        Transition.prototype.setPaused = function (paused) {
            if (!this._playing || this._paused == paused) return;
            this._paused = paused;
            var tweener = fgui.GTween.getTween(this);
            if (tweener != null) tweener.setPaused(paused);
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.target == null) continue;
                if (item.type == TransitionActionType.Transition) {
                    if (item.value.trans != null) item.value.trans.setPaused(paused);
                } else if (item.type == TransitionActionType.Animation) {
                    if (paused) {
                        item.value.flag = item.target.getProp(fgui.ObjectPropID.Playing);
                        item.target.setProp(fgui.ObjectPropID.Playing, false);
                    } else item.target.setProp(fgui.ObjectPropID.Playing, item.value.flag);
                }
                if (item.tweener != null) item.tweener.setPaused(paused);
            }
        };
        Transition.prototype.dispose = function () {
            if (this._playing) fgui.GTween.kill(this);
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.tweener != null) {
                    item.tweener.kill();
                    item.tweener = null;
                }
                item.target = null;
                item.hook = null;
                if (item.tweenConfig != null) item.tweenConfig.endHook = null;
            }
            this._items.length = 0;
            this._playing = false;
            this._onComplete = null;
        };
        Object.defineProperty(Transition.prototype, "playing", {
            get: function get() {
                return this._playing;
            },
            enumerable: false,
            configurable: true
        });
        Transition.prototype.setValue = function (label) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var cnt = this._items.length;
            var value;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.label == label) {
                    if (item.tweenConfig != null) value = item.tweenConfig.startValue;else value = item.value;
                } else if (item.tweenConfig != null && item.tweenConfig.endLabel == label) {
                    value = item.tweenConfig.endValue;
                } else continue;
                switch (item.type) {
                    case TransitionActionType.XY:
                    case TransitionActionType.Size:
                    case TransitionActionType.Pivot:
                    case TransitionActionType.Scale:
                    case TransitionActionType.Skew:
                        value.b1 = true;
                        value.b2 = true;
                        value.f1 = parseFloat(args[0]);
                        value.f2 = parseFloat(args[1]);
                        break;
                    case TransitionActionType.Alpha:
                        value.f1 = parseFloat(args[0]);
                        break;
                    case TransitionActionType.Rotation:
                        value.f1 = parseFloat(args[0]);
                        break;
                    case TransitionActionType.Color:
                        value.f1 = parseFloat(args[0]);
                        break;
                    case TransitionActionType.Animation:
                        value.frame = parseInt(args[0]);
                        if (args.length > 1) value.playing = args[1];
                        break;
                    case TransitionActionType.Visible:
                        value.visible = args[0];
                        break;
                    case TransitionActionType.Sound:
                        value.sound = args[0];
                        if (args.length > 1) value.volume = parseFloat(args[1]);
                        break;
                    case TransitionActionType.Transition:
                        value.transName = args[0];
                        if (args.length > 1) value.playTimes = parseInt(args[1]);
                        break;
                    case TransitionActionType.Shake:
                        value.amplitude = parseFloat(args[0]);
                        if (args.length > 1) value.duration = parseFloat(args[1]);
                        break;
                    case TransitionActionType.ColorFilter:
                        value.f1 = parseFloat(args[0]);
                        value.f2 = parseFloat(args[1]);
                        value.f3 = parseFloat(args[2]);
                        value.f4 = parseFloat(args[3]);
                        break;
                    case TransitionActionType.Text:
                    case TransitionActionType.Icon:
                        value.text = args[0];
                        break;
                }
            }
        };
        Transition.prototype.setHook = function (label, callback) {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.label == label) {
                    item.hook = callback;
                    break;
                } else if (item.tweenConfig != null && item.tweenConfig.endLabel == label) {
                    item.tweenConfig.endHook = callback;
                    break;
                }
            }
        };
        Transition.prototype.clearHooks = function () {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                item.hook = null;
                if (item.tweenConfig != null) item.tweenConfig.endHook = null;
            }
        };
        Transition.prototype.setTarget = function (label, newTarget) {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.label == label) {
                    item.targetId = newTarget.id;
                    item.target = null;
                }
            }
        };
        Transition.prototype.setDuration = function (label, value) {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.tweenConfig != null && item.label == label) item.tweenConfig.duration = value;
            }
        };
        Transition.prototype.getLabelTime = function (label) {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.label == label) return item.time;else if (item.tweenConfig != null && item.tweenConfig.endLabel == label) return item.time + item.tweenConfig.duration;
            }
            return Number.NaN;
        };
        Object.defineProperty(Transition.prototype, "timeScale", {
            get: function get() {
                return this._timeScale;
            },
            set: function set(value) {
                if (this._timeScale != value) {
                    this._timeScale = value;
                    if (this._playing) {
                        var cnt = this._items.length;
                        for (var i = 0; i < cnt; i++) {
                            var item = this._items[i];
                            if (item.tweener != null) item.tweener.setTimeScale(value);else if (item.type == TransitionActionType.Transition) {
                                if (item.value.trans != null) item.value.trans.timeScale = value;
                            } else if (item.type == TransitionActionType.Animation) {
                                if (item.target != null) item.target.setProp(fgui.ObjectPropID.TimeScale, value);
                            }
                        }
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Transition.prototype.updateFromRelations = function (targetId, dx, dy) {
            var cnt = this._items.length;
            if (cnt == 0) return;
            for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.type == TransitionActionType.XY && item.targetId == targetId) {
                    if (item.tweenConfig != null) {
                        item.tweenConfig.startValue.f1 += dx;
                        item.tweenConfig.startValue.f2 += dy;
                        item.tweenConfig.endValue.f1 += dx;
                        item.tweenConfig.endValue.f2 += dy;
                    } else {
                        item.value.f1 += dx;
                        item.value.f2 += dy;
                    }
                }
            }
        };
        Transition.prototype.onEnable = function () {
            if (this._autoPlay && !this._playing) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
        };
        Transition.prototype.onDisable = function () {
            if ((this._options & Transition.OPTION_AUTO_STOP_DISABLED) == 0) this.stop((this._options & Transition.OPTION_AUTO_STOP_AT_END) != 0 ? true : false, false);
        };
        Transition.prototype.onDelayedPlay = function () {
            this.internalPlay();
            this._playing = this._totalTasks > 0;
            if (this._playing) {
                if ((this._options & Transition.OPTION_IGNORE_DISPLAY_CONTROLLER) != 0) {
                    var cnt = this._items.length;
                    for (var i = 0; i < cnt; i++) {
                        var item = this._items[i];
                        if (item.target != null && item.target != this._owner) item.displayLockToken = item.target.addDisplayLock();
                    }
                }
            } else if (this._onComplete != null) {
                var func = this._onComplete;
                this._onComplete = null;
                func();
            }
        };
        Transition.prototype.internalPlay = function () {
            this._ownerBaseX = this._owner.x;
            this._ownerBaseY = this._owner.y;
            this._totalTasks = 0;
            var cnt = this._items.length;
            var item;
            var needSkipAnimations = false;
            var i;
            if (!this._reversed) {
                for (i = 0; i < cnt; i++) {
                    item = this._items[i];
                    if (item.target == null) continue;
                    if (item.type == TransitionActionType.Animation && this._startTime != 0 && item.time <= this._startTime) {
                        needSkipAnimations = true;
                        item.value.flag = false;
                    } else this.playItem(item);
                }
            } else {
                for (i = cnt - 1; i >= 0; i--) {
                    item = this._items[i];
                    if (item.target == null) continue;
                    this.playItem(item);
                }
            }
            if (needSkipAnimations) this.skipAnimations();
        };
        Transition.prototype.playItem = function (item) {
            var time;
            if (item.tweenConfig != null) {
                if (this._reversed) time = this._totalDuration - item.time - item.tweenConfig.duration;else time = item.time;
                if (this._endTime == -1 || time <= this._endTime) {
                    var startValue;
                    var endValue;
                    if (this._reversed) {
                        startValue = item.tweenConfig.endValue;
                        endValue = item.tweenConfig.startValue;
                    } else {
                        startValue = item.tweenConfig.startValue;
                        endValue = item.tweenConfig.endValue;
                    }
                    item.value.b1 = startValue.b1 || endValue.b1;
                    item.value.b2 = startValue.b2 || endValue.b2;
                    switch (item.type) {
                        case TransitionActionType.XY:
                        case TransitionActionType.Size:
                        case TransitionActionType.Scale:
                        case TransitionActionType.Skew:
                            item.tweener = fgui.GTween.to2(startValue.f1, startValue.f2, endValue.f1, endValue.f2, item.tweenConfig.duration);
                            break;
                        case TransitionActionType.Alpha:
                        case TransitionActionType.Rotation:
                            item.tweener = fgui.GTween.to(startValue.f1, endValue.f1, item.tweenConfig.duration);
                            break;
                        case TransitionActionType.Color:
                            item.tweener = fgui.GTween.toColor(startValue.f1, endValue.f1, item.tweenConfig.duration);
                            break;
                        case TransitionActionType.ColorFilter:
                            item.tweener = fgui.GTween.to4(startValue.f1, startValue.f2, startValue.f3, startValue.f4, endValue.f1, endValue.f2, endValue.f3, endValue.f4, item.tweenConfig.duration);
                            break;
                    }
                    item.tweener.setDelay(time).setEase(item.tweenConfig.easeType).setRepeat(item.tweenConfig.repeat, item.tweenConfig.yoyo).setTimeScale(this._timeScale).setTarget(item).onStart(this.onTweenStart, this).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
                    if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - time);
                    this._totalTasks++;
                }
            } else if (item.type == TransitionActionType.Shake) {
                if (this._reversed) time = this._totalDuration - item.time - item.value.duration;else time = item.time;
                item.value.offsetX = item.value.offsetY = 0;
                item.value.lastOffsetX = item.value.lastOffsetY = 0;
                item.tweener = fgui.GTween.shake(0, 0, item.value.amplitude, item.value.duration).setDelay(time).setTimeScale(this._timeScale).setTarget(item).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
                if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - item.time);
                this._totalTasks++;
            } else {
                if (this._reversed) time = this._totalDuration - item.time;else time = item.time;
                if (time <= this._startTime) {
                    this.applyValue(item);
                    this.callHook(item, false);
                } else if (this._endTime == -1 || time <= this._endTime) {
                    this._totalTasks++;
                    item.tweener = fgui.GTween.delayedCall(time).setTimeScale(this._timeScale).setTarget(item).onComplete(this.onDelayedPlayItem, this);
                }
            }
            if (item.tweener != null) item.tweener.seek(this._startTime);
        };
        Transition.prototype.skipAnimations = function () {
            var frame;
            var playStartTime;
            var playTotalTime;
            var value;
            var target;
            var item;
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                item = this._items[i];
                if (item.type != TransitionActionType.Animation || item.time > this._startTime) continue;
                value = item.value;
                if (value.flag) continue;
                target = item.target;
                frame = target.getProp(fgui.ObjectPropID.Frame);
                playStartTime = target.getProp(fgui.ObjectPropID.Playing) ? 0 : -1;
                playTotalTime = 0;
                for (var j = i; j < cnt; j++) {
                    item = this._items[j];
                    if (item.type != TransitionActionType.Animation || item.target != target || item.time > this._startTime) continue;
                    value = item.value;
                    value.flag = true;
                    if (value.frame != -1) {
                        frame = value.frame;
                        if (value.playing) playStartTime = item.time;else playStartTime = -1;
                        playTotalTime = 0;
                    } else {
                        if (value.playing) {
                            if (playStartTime < 0) playStartTime = item.time;
                        } else {
                            if (playStartTime >= 0) playTotalTime += item.time - playStartTime;
                            playStartTime = -1;
                        }
                    }
                    this.callHook(item, false);
                }
                if (playStartTime >= 0) playTotalTime += this._startTime - playStartTime;
                target.setProp(fgui.ObjectPropID.Playing, playStartTime >= 0);
                target.setProp(fgui.ObjectPropID.Frame, frame);
                if (playTotalTime > 0) target.setProp(fgui.ObjectPropID.DeltaTime, playTotalTime * 1000);
            }
        };
        Transition.prototype.onDelayedPlayItem = function (tweener) {
            var item = tweener.target;
            item.tweener = null;
            this._totalTasks--;
            this.applyValue(item);
            this.callHook(item, false);
            this.checkAllComplete();
        };
        Transition.prototype.onTweenStart = function (tweener) {
            var item = tweener.target;
            if (item.type == TransitionActionType.XY || item.type == TransitionActionType.Size) {
                var startValue;
                var endValue;
                if (this._reversed) {
                    startValue = item.tweenConfig.endValue;
                    endValue = item.tweenConfig.startValue;
                } else {
                    startValue = item.tweenConfig.startValue;
                    endValue = item.tweenConfig.endValue;
                }
                if (item.type == TransitionActionType.XY) {
                    if (item.target != this._owner) {
                        if (!startValue.b1) tweener.startValue.x = item.target.x;else if (startValue.b3) tweener.startValue.x = startValue.f1 * this._owner.width;
                        if (!startValue.b2) tweener.startValue.y = item.target.y;else if (startValue.b3) tweener.startValue.y = startValue.f2 * this._owner.height;
                        if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;else if (endValue.b3) tweener.endValue.x = endValue.f1 * this._owner.width;
                        if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;else if (endValue.b3) tweener.endValue.y = endValue.f2 * this._owner.height;
                    } else {
                        if (!startValue.b1) tweener.startValue.x = item.target.x - this._ownerBaseX;
                        if (!startValue.b2) tweener.startValue.y = item.target.y - this._ownerBaseY;
                        if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                        if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
                    }
                } else {
                    if (!startValue.b1) tweener.startValue.x = item.target.width;
                    if (!startValue.b2) tweener.startValue.y = item.target.height;
                    if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                    if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
                }
                if (item.tweenConfig.path) {
                    item.value.b1 = item.value.b2 = true;
                    tweener.setPath(item.tweenConfig.path);
                }
            }
            this.callHook(item, false);
        };
        Transition.prototype.onTweenUpdate = function (tweener) {
            var item = tweener.target;
            switch (item.type) {
                case TransitionActionType.XY:
                case TransitionActionType.Size:
                case TransitionActionType.Scale:
                case TransitionActionType.Skew:
                    item.value.f1 = tweener.value.x;
                    item.value.f2 = tweener.value.y;
                    if (item.tweenConfig.path) {
                        item.value.f1 += tweener.startValue.x;
                        item.value.f2 += tweener.startValue.y;
                    }
                    break;
                case TransitionActionType.Alpha:
                case TransitionActionType.Rotation:
                    item.value.f1 = tweener.value.x;
                    break;
                case TransitionActionType.Color:
                    item.value.f1 = tweener.value.color;
                    break;
                case TransitionActionType.ColorFilter:
                    item.value.f1 = tweener.value.x;
                    item.value.f2 = tweener.value.y;
                    item.value.f3 = tweener.value.z;
                    item.value.f4 = tweener.value.w;
                    break;
                case TransitionActionType.Shake:
                    item.value.offsetX = tweener.deltaValue.x;
                    item.value.offsetY = tweener.deltaValue.y;
                    break;
            }
            this.applyValue(item);
        };
        Transition.prototype.onTweenComplete = function (tweener) {
            var item = tweener.target;
            item.tweener = null;
            this._totalTasks--;
            if (tweener.allCompleted) this.callHook(item, true);
            this.checkAllComplete();
        };
        Transition.prototype.onPlayTransCompleted = function (item) {
            this._totalTasks--;
            this.checkAllComplete();
        };
        Transition.prototype.callHook = function (item, tweenEnd) {
            if (tweenEnd) {
                if (item.tweenConfig != null && item.tweenConfig.endHook != null) item.tweenConfig.endHook(item.label);
            } else {
                if (item.time >= this._startTime && item.hook != null) item.hook(item.label);
            }
        };
        Transition.prototype.checkAllComplete = function () {
            if (this._playing && this._totalTasks == 0) {
                if (this._totalTimes < 0) {
                    this.internalPlay();
                } else {
                    this._totalTimes--;
                    if (this._totalTimes > 0) this.internalPlay();else {
                        this._playing = false;
                        var cnt = this._items.length;
                        for (var i = 0; i < cnt; i++) {
                            var item = this._items[i];
                            if (item.target != null && item.displayLockToken != 0) {
                                item.target.releaseDisplayLock(item.displayLockToken);
                                item.displayLockToken = 0;
                            }
                        }
                        if (this._onComplete != null) {
                            var func = this._onComplete;
                            this._onComplete = null;
                            func();
                        }
                    }
                }
            }
        };
        Transition.prototype.applyValue = function (item) {
            item.target._gearLocked = true;
            var value = item.value;
            switch (item.type) {
                case TransitionActionType.XY:
                    if (item.target == this._owner) {
                        if (value.b1 && value.b2) item.target.setPosition(value.f1 + this._ownerBaseX, value.f2 + this._ownerBaseY);else if (value.b1) item.target.x = value.f1 + this._ownerBaseX;else item.target.y = value.f2 + this._ownerBaseY;
                    } else {
                        if (value.b3) {
                            if (value.b1 && value.b2) item.target.setPosition(value.f1 * this._owner.width, value.f2 * this._owner.height);else if (value.b1) item.target.x = value.f1 * this._owner.width;else if (value.b2) item.target.y = value.f2 * this._owner.height;
                        } else {
                            if (value.b1 && value.b2) item.target.setPosition(value.f1, value.f2);else if (value.b1) item.target.x = value.f1;else if (value.b2) item.target.y = value.f2;
                        }
                    }
                    break;
                case TransitionActionType.Size:
                    if (!value.b1) value.f1 = item.target.width;
                    if (!value.b2) value.f2 = item.target.height;
                    item.target.setSize(value.f1, value.f2);
                    break;
                case TransitionActionType.Pivot:
                    item.target.setPivot(value.f1, value.f2, item.target.pivotAsAnchor);
                    break;
                case TransitionActionType.Alpha:
                    item.target.alpha = value.f1;
                    break;
                case TransitionActionType.Rotation:
                    item.target.rotation = value.f1;
                    break;
                case TransitionActionType.Scale:
                    item.target.setScale(value.f1, value.f2);
                    break;
                case TransitionActionType.Skew:
                    item.target.setSkew(value.f1, value.f2);
                    break;
                case TransitionActionType.Color:
                    item.target.setProp(fgui.ObjectPropID.Color, value.f1);
                    break;
                case TransitionActionType.Animation:
                    if (value.frame >= 0) item.target.setProp(fgui.ObjectPropID.Frame, value.frame);
                    item.target.setProp(fgui.ObjectPropID.Playing, value.playing);
                    item.target.setProp(fgui.ObjectPropID.TimeScale, this._timeScale);
                    break;
                case TransitionActionType.Visible:
                    item.target.visible = value.visible;
                    break;
                case TransitionActionType.Transition:
                    if (this._playing) {
                        var trans = value.trans;
                        if (trans != null) {
                            this._totalTasks++;
                            var startTime = this._startTime > item.time ? this._startTime - item.time : 0;
                            var endTime = this._endTime >= 0 ? this._endTime - item.time : -1;
                            if (value.stopTime >= 0 && (endTime < 0 || endTime > value.stopTime)) endTime = value.stopTime;
                            trans.timeScale = this._timeScale;
                            trans._play(function () {
                                this.onPlayTransCompleted(item);
                            }.bind(this), value.playTimes, 0, startTime, endTime, this._reversed);
                        }
                    }
                    break;
                case TransitionActionType.Sound:
                    if (this._playing && item.time >= this._startTime) {
                        if (value.audioClip == null) {
                            var pi = fgui.UIPackage.getItemByURL(value.sound);
                            if (pi) value.audioClip = pi.owner.getItemAsset(pi);
                        }
                        if (value.audioClip) fgui.GRoot.inst.playOneShotSound(value.audioClip, value.volume);
                    }
                    break;
                case TransitionActionType.Shake:
                    item.target.setPosition(item.target.x - value.lastOffsetX + value.offsetX, item.target.y - value.lastOffsetY + value.offsetY);
                    value.lastOffsetX = value.offsetX;
                    value.lastOffsetY = value.offsetY;
                    break;
                case TransitionActionType.ColorFilter:
                    {
                        break;
                    }
                case TransitionActionType.Text:
                    item.target.text = value.text;
                    break;
                case TransitionActionType.Icon:
                    item.target.icon = value.text;
                    break;
            }
            item.target._gearLocked = false;
        };
        Transition.prototype.setup = function (buffer) {
            this.name = buffer.readS();
            this._options = buffer.readInt();
            this._autoPlay = buffer.readBool();
            this._autoPlayTimes = buffer.readInt();
            this._autoPlayDelay = buffer.readFloat();
            var cnt = buffer.readShort();
            for (var i = 0; i < cnt; i++) {
                var dataLen = buffer.readShort();
                var curPos = buffer.position;
                buffer.seek(curPos, 0);
                var item = new TransitionItem(buffer.readByte());
                this._items[i] = item;
                item.time = buffer.readFloat();
                var targetId = buffer.readShort();
                if (targetId < 0) item.targetId = "";else item.targetId = this._owner.getChildAt(targetId).id;
                item.label = buffer.readS();
                if (buffer.readBool()) {
                    buffer.seek(curPos, 1);
                    item.tweenConfig = new TweenConfig();
                    item.tweenConfig.duration = buffer.readFloat();
                    if (item.time + item.tweenConfig.duration > this._totalDuration) this._totalDuration = item.time + item.tweenConfig.duration;
                    item.tweenConfig.easeType = buffer.readByte();
                    item.tweenConfig.repeat = buffer.readInt();
                    item.tweenConfig.yoyo = buffer.readBool();
                    item.tweenConfig.endLabel = buffer.readS();
                    buffer.seek(curPos, 2);
                    this.decodeValue(item, buffer, item.tweenConfig.startValue);
                    buffer.seek(curPos, 3);
                    this.decodeValue(item, buffer, item.tweenConfig.endValue);
                    if (buffer.version >= 2) {
                        var pathLen = buffer.readInt();
                        if (pathLen > 0) {
                            item.tweenConfig.path = new fgui.GPath();
                            var pts = new Array();
                            for (var j = 0; j < pathLen; j++) {
                                var curveType = buffer.readByte();
                                switch (curveType) {
                                    case fgui.CurveType.Bezier:
                                        pts.push(fgui.GPathPoint.newBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                                        break;
                                    case fgui.CurveType.CubicBezier:
                                        pts.push(fgui.GPathPoint.newCubicBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                                        break;
                                    default:
                                        pts.push(fgui.GPathPoint.newPoint(buffer.readFloat(), buffer.readFloat(), curveType));
                                        break;
                                }
                            }
                            item.tweenConfig.path.create(pts);
                        }
                    }
                } else {
                    if (item.time > this._totalDuration) this._totalDuration = item.time;
                    buffer.seek(curPos, 2);
                    this.decodeValue(item, buffer, item.value);
                }
                buffer.position = curPos + dataLen;
            }
        };
        Transition.prototype.decodeValue = function (item, buffer, value) {
            switch (item.type) {
                case TransitionActionType.XY:
                case TransitionActionType.Size:
                case TransitionActionType.Pivot:
                case TransitionActionType.Skew:
                    value.b1 = buffer.readBool();
                    value.b2 = buffer.readBool();
                    value.f1 = buffer.readFloat();
                    value.f2 = buffer.readFloat();
                    if (buffer.version >= 2 && item.type == TransitionActionType.XY) value.b3 = buffer.readBool();
                    break;
                case TransitionActionType.Alpha:
                case TransitionActionType.Rotation:
                    value.f1 = buffer.readFloat();
                    break;
                case TransitionActionType.Scale:
                    value.f1 = buffer.readFloat();
                    value.f2 = buffer.readFloat();
                    break;
                case TransitionActionType.Color:
                    value.f1 = buffer.readColor().toRGBValue();
                    break;
                case TransitionActionType.Animation:
                    value.playing = buffer.readBool();
                    value.frame = buffer.readInt();
                    break;
                case TransitionActionType.Visible:
                    value.visible = buffer.readBool();
                    break;
                case TransitionActionType.Sound:
                    value.sound = buffer.readS();
                    value.volume = buffer.readFloat();
                    break;
                case TransitionActionType.Transition:
                    value.transName = buffer.readS();
                    value.playTimes = buffer.readInt();
                    break;
                case TransitionActionType.Shake:
                    value.amplitude = buffer.readFloat();
                    value.duration = buffer.readFloat();
                    break;
                case TransitionActionType.ColorFilter:
                    value.f1 = buffer.readFloat();
                    value.f2 = buffer.readFloat();
                    value.f3 = buffer.readFloat();
                    value.f4 = buffer.readFloat();
                    break;
                case TransitionActionType.Text:
                case TransitionActionType.Icon:
                    value.text = buffer.readS();
                    break;
            }
        };
        Transition.OPTION_IGNORE_DISPLAY_CONTROLLER = 1;
        Transition.OPTION_AUTO_STOP_DISABLED = 2;
        Transition.OPTION_AUTO_STOP_AT_END = 4;
        return Transition;
    }();
    fgui.Transition = Transition;
    var TransitionActionType = function () {
        function TransitionActionType() {}
        TransitionActionType.XY = 0;
        TransitionActionType.Size = 1;
        TransitionActionType.Scale = 2;
        TransitionActionType.Pivot = 3;
        TransitionActionType.Alpha = 4;
        TransitionActionType.Rotation = 5;
        TransitionActionType.Color = 6;
        TransitionActionType.Animation = 7;
        TransitionActionType.Visible = 8;
        TransitionActionType.Sound = 9;
        TransitionActionType.Transition = 10;
        TransitionActionType.Shake = 11;
        TransitionActionType.ColorFilter = 12;
        TransitionActionType.Skew = 13;
        TransitionActionType.Text = 14;
        TransitionActionType.Icon = 15;
        TransitionActionType.Unknown = 16;
        return TransitionActionType;
    }();
    var TransitionItem = function () {
        function TransitionItem(type) {
            this.type = type;
            switch (type) {
                case TransitionActionType.XY:
                case TransitionActionType.Size:
                case TransitionActionType.Scale:
                case TransitionActionType.Pivot:
                case TransitionActionType.Skew:
                case TransitionActionType.Alpha:
                case TransitionActionType.Rotation:
                case TransitionActionType.Color:
                case TransitionActionType.ColorFilter:
                    this.value = new TValue();
                    break;
                case TransitionActionType.Animation:
                    this.value = new TValue_Animation();
                    break;
                case TransitionActionType.Shake:
                    this.value = new TValue_Shake();
                    break;
                case TransitionActionType.Sound:
                    this.value = new TValue_Sound();
                    break;
                case TransitionActionType.Transition:
                    this.value = new TValue_Transition();
                    break;
                case TransitionActionType.Visible:
                    this.value = new TValue_Visible();
                    break;
                case TransitionActionType.Text:
                case TransitionActionType.Icon:
                    this.value = new TValue_Text();
                    break;
            }
        }
        return TransitionItem;
    }();
    var TweenConfig = function () {
        function TweenConfig() {
            this.duration = 0;
            this.repeat = 0;
            this.yoyo = false;
            this.easeType = fgui.EaseType.QuadOut;
            this.startValue = new TValue();
            this.endValue = new TValue();
        }
        return TweenConfig;
    }();
    var TValue_Visible = function () {
        function TValue_Visible() {}
        return TValue_Visible;
    }();
    var TValue_Animation = function () {
        function TValue_Animation() {}
        return TValue_Animation;
    }();
    var TValue_Sound = function () {
        function TValue_Sound() {}
        return TValue_Sound;
    }();
    var TValue_Transition = function () {
        function TValue_Transition() {}
        return TValue_Transition;
    }();
    var TValue_Shake = function () {
        function TValue_Shake() {}
        return TValue_Shake;
    }();
    var TValue_Text = function () {
        function TValue_Text() {}
        return TValue_Text;
    }();
    var TValue = function () {
        function TValue() {
            this.f1 = this.f2 = this.f3 = this.f4 = 0;
            this.b1 = this.b2 = true;
        }
        return TValue;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var TranslationHelper = function () {
        function TranslationHelper() {}
        TranslationHelper.loadFromXML = function (source) {
            TranslationHelper.strings = {};
            var xml = new cc["SAXParser"]().parse(source).documentElement;
            var nodes = xml.childNodes;
            var length1 = nodes.length;
            for (var i1 = 0; i1 < length1; i1++) {
                var cxml = nodes[i1];
                if (cxml.tagName == "string") {
                    var key = cxml.getAttribute("name");
                    var text = cxml.childNodes.length > 0 ? cxml.firstChild.nodeValue : "";
                    var i = key.indexOf("-");
                    if (i == -1) continue;
                    var key2 = key.substr(0, i);
                    var key3 = key.substr(i + 1);
                    var col = TranslationHelper.strings[key2];
                    if (!col) {
                        col = {};
                        TranslationHelper.strings[key2] = col;
                    }
                    col[key3] = text;
                }
            }
        };
        TranslationHelper.translateComponent = function (item) {
            if (TranslationHelper.strings == null) return;
            var compStrings = TranslationHelper.strings[item.owner.id + item.id];
            if (compStrings == null) return;
            var elementId, value;
            var buffer = item.rawData;
            var nextPos;
            var itemCount;
            var i, j, k;
            var dataLen;
            var curPos;
            var valueCnt;
            var page;
            buffer.seek(0, 2);
            var childCount = buffer.readShort();
            for (i = 0; i < childCount; i++) {
                dataLen = buffer.readShort();
                curPos = buffer.position;
                buffer.seek(curPos, 0);
                var baseType = buffer.readByte();
                var type = baseType;
                buffer.skip(4);
                elementId = buffer.readS();
                if (type == fgui.ObjectType.Component) {
                    if (buffer.seek(curPos, 6)) type = buffer.readByte();
                }
                buffer.seek(curPos, 1);
                if ((value = compStrings[elementId + "-tips"]) != null) buffer.writeS(value);
                buffer.seek(curPos, 2);
                var gearCnt = buffer.readShort();
                for (j = 0; j < gearCnt; j++) {
                    nextPos = buffer.readShort();
                    nextPos += buffer.position;
                    if (buffer.readByte() == 6) {
                        buffer.skip(2);
                        valueCnt = buffer.readShort();
                        for (k = 0; k < valueCnt; k++) {
                            page = buffer.readS();
                            if (page != null) {
                                if ((value = compStrings[elementId + "-texts_" + k]) != null) buffer.writeS(value);else buffer.skip(2);
                            }
                        }
                        if (buffer.readBool() && (value = compStrings[elementId + "-texts_def"]) != null) buffer.writeS(value);
                    }
                    if (baseType == fgui.ObjectType.Component && buffer.version >= 2) {
                        buffer.seek(curPos, 4);
                        buffer.skip(2);
                        buffer.skip(4 * buffer.readShort());
                        var cpCount = buffer.readShort();
                        for (var k = 0; k < cpCount; k++) {
                            var target = buffer.readS();
                            var propertyId = buffer.readShort();
                            if (propertyId == 0 && (value = compStrings[elementId + "-cp-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
                        }
                    }
                    buffer.position = nextPos;
                }
                switch (type) {
                    case fgui.ObjectType.Text:
                    case fgui.ObjectType.RichText:
                    case fgui.ObjectType.InputText:
                        {
                            if ((value = compStrings[elementId]) != null) {
                                buffer.seek(curPos, 6);
                                buffer.writeS(value);
                            }
                            if ((value = compStrings[elementId + "-prompt"]) != null) {
                                buffer.seek(curPos, 4);
                                buffer.writeS(value);
                            }
                            break;
                        }
                    case fgui.ObjectType.List:
                    case fgui.ObjectType.Tree:
                        {
                            buffer.seek(curPos, 8);
                            buffer.skip(2);
                            itemCount = buffer.readShort();
                            for (j = 0; j < itemCount; j++) {
                                nextPos = buffer.readShort();
                                nextPos += buffer.position;
                                buffer.skip(2);
                                if (type == fgui.ObjectType.Tree) buffer.skip(2);
                                if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);else buffer.skip(2);
                                if ((value = compStrings[elementId + "-" + j + "-0"]) != null) buffer.writeS(value);else buffer.skip(2);
                                if (buffer.version >= 2) {
                                    buffer.skip(6);
                                    buffer.skip(buffer.readUshort() * 4);
                                    var cpCount = buffer.readUshort();
                                    for (var k = 0; k < cpCount; k++) {
                                        var target = buffer.readS();
                                        var propertyId = buffer.readUshort();
                                        if (propertyId == 0 && (value = compStrings[elementId + "-" + j + "-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
                                    }
                                }
                                buffer.position = nextPos;
                            }
                            break;
                        }
                    case fgui.ObjectType.Label:
                        {
                            if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                                if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                                buffer.skip(2);
                                if (buffer.readBool()) buffer.skip(4);
                                buffer.skip(4);
                                if (buffer.readBool() && (value = compStrings[elementId + "-prompt"]) != null) buffer.writeS(value);
                            }
                            break;
                        }
                    case fgui.ObjectType.Button:
                        {
                            if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                                if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                                if ((value = compStrings[elementId + "-0"]) != null) buffer.writeS(value);
                            }
                            break;
                        }
                    case fgui.ObjectType.ComboBox:
                        {
                            if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                                itemCount = buffer.readShort();
                                for (j = 0; j < itemCount; j++) {
                                    nextPos = buffer.readShort();
                                    nextPos += buffer.position;
                                    if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);
                                    buffer.position = nextPos;
                                }
                                if ((value = compStrings[elementId]) != null) buffer.writeS(value);
                            }
                            break;
                        }
                }
                buffer.position = curPos + dataLen;
            }
        };
        TranslationHelper.strings = null;
        return TranslationHelper;
    }();
    fgui.TranslationHelper = TranslationHelper;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var UIConfig = function () {
        function UIConfig() {}
        UIConfig.defaultFont = "Arial";
        UIConfig.modalLayerColor = new cc.Color(0x33, 0x33, 0x33, 0x33);
        UIConfig.buttonSoundVolumeScale = 1;
        UIConfig.defaultScrollStep = 25;
        UIConfig.defaultScrollDecelerationRate = 0.967;
        UIConfig.defaultScrollBarDisplay = fgui.ScrollBarDisplayType.Visible;
        UIConfig.defaultScrollTouchEffect = true;
        UIConfig.defaultScrollBounceEffect = true;
        UIConfig.defaultComboBoxVisibleItemCount = 10;
        UIConfig.touchScrollSensitivity = 20;
        UIConfig.touchDragSensitivity = 10;
        UIConfig.clickDragSensitivity = 2;
        UIConfig.bringWindowToFrontOnClick = true;
        UIConfig.frameTimeForAsyncUIConstruction = 0.002;
        UIConfig.linkUnderline = true;
        UIConfig.defaultUIGroup = "UI";
        return UIConfig;
    }();
    fgui.UIConfig = UIConfig;
    var _flag = false;
    fgui.addLoadHandler = function (ext) {
        var _a, _b;
        if (_flag) return;
        _flag = true;
        if (!ext) ext = "bin";
        cc.loader.addDownloadHandlers((_a = {}, _a[ext] = cc.loader.downloader["extMap"].binary, _a));
        cc.loader.addLoadHandlers((_b = {}, _b[ext] = function (item, callback) {
            item._owner.rawBuffer = item.content;
            return item.content;
        }, _b));
    };
    var _fontRegistry = {};
    fgui.registerFont = function (name, font) {
        if (font instanceof cc.Font) _fontRegistry[name] = font;else _fontRegistry[name] = cc.loader.getRes(name, cc.Font);
    };
    fgui.getFontByName = function (name) {
        return _fontRegistry[name];
    };
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var UIObjectFactory = function () {
        function UIObjectFactory() {}
        UIObjectFactory.setPackageItemExtension = function (url, type) {
            UIObjectFactory.setExtension(url, type);
        };
        UIObjectFactory.setExtension = function (url, type) {
            if (url == null) {
                console.error("Invalid url for type: ", type);
                throw "Invaild url: " + url;
            }
            var pi = fgui.UIPackage.getItemByURL(url);
            if (pi != null) pi.extensionType = type;
            UIObjectFactory.extensions[url] = type;
        };
        UIObjectFactory.setLoaderExtension = function (type) {
            UIObjectFactory.loaderType = type;
        };
        UIObjectFactory.resolveExtension = function (pi) {
            pi.extensionType = UIObjectFactory.extensions["ui://" + pi.owner.id + pi.id];
            if (!pi.extensionType) pi.extensionType = UIObjectFactory.extensions["ui://" + pi.owner.name + "/" + pi.name];
        };
        UIObjectFactory.newObject = function (pi) {
            if (pi.extensionType != null) return new pi.extensionType();else return this.newObject2(pi.objectType);
        };
        UIObjectFactory.newObject2 = function (type) {
            switch (type) {
                case fgui.ObjectType.Image:
                    return new fgui.GImage();
                case fgui.ObjectType.MovieClip:
                    return new fgui.GMovieClip();
                case fgui.ObjectType.Component:
                    return new fgui.GComponent();
                case fgui.ObjectType.Text:
                    return new fgui.GTextField();
                case fgui.ObjectType.RichText:
                    return new fgui.GRichTextField();
                case fgui.ObjectType.InputText:
                    return new fgui.GTextInput();
                case fgui.ObjectType.Group:
                    return new fgui.GGroup();
                case fgui.ObjectType.List:
                    return new fgui.GList();
                case fgui.ObjectType.Graph:
                    return new fgui.GGraph();
                case fgui.ObjectType.Loader:
                    if (UIObjectFactory.loaderType != null) return new UIObjectFactory.loaderType();else return new fgui.GLoader();
                case fgui.ObjectType.Button:
                    return new fgui.GButton();
                case fgui.ObjectType.Label:
                    return new fgui.GLabel();
                case fgui.ObjectType.ProgressBar:
                    return new fgui.GProgressBar();
                case fgui.ObjectType.Slider:
                    return new fgui.GSlider();
                case fgui.ObjectType.ScrollBar:
                    return new fgui.GScrollBar();
                case fgui.ObjectType.ComboBox:
                    return new fgui.GComboBox();
                case fgui.ObjectType.Tree:
                    return new fgui.GTree();
                default:
                    return null;
            }
        };
        UIObjectFactory.extensions = {};
        return UIObjectFactory;
    }();
    fgui.UIObjectFactory = UIObjectFactory;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var UIPackage = function () {
        function UIPackage() {
            this._items = new Array();
            this._assetUrls = [];
            this._itemsById = {};
            this._itemsByName = {};
            this._sprites = {};
            this._dependencies = Array();
            this._branches = Array();
            this._branchIndex = -1;
        }
        Object.defineProperty(UIPackage, "branch", {
            get: function get() {
                return UIPackage._branch;
            },
            set: function set(value) {
                UIPackage._branch = value;
                for (var pkgId in UIPackage._instById) {
                    var pkg = UIPackage._instById[pkgId];
                    if (pkg._branches) {
                        pkg._branchIndex = pkg._branches.indexOf(value);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        UIPackage.getVar = function (key) {
            return UIPackage._vars[key];
        };
        UIPackage.setVar = function (key, value) {
            UIPackage._vars[key] = value;
        };
        UIPackage.getById = function (id) {
            return UIPackage._instById[id];
        };
        UIPackage.getByName = function (name) {
            return UIPackage._instByName[name];
        };
        UIPackage.addPackage = function (url) {
            var pkg = UIPackage._instById[url];
            if (pkg) return pkg;
            var asset = cc.loader.getRes(url);
            if (!asset) throw "Resource '" + url + "' not ready";
            if (!asset.rawBuffer) throw "Missing asset data. Call UIConfig.registerLoader first!";
            pkg = new UIPackage();
            pkg.loadPackage(new fgui.ByteBuffer(asset.rawBuffer), url);
            pkg.assetUrls = [];
            var cnt = pkg._items.length;
            for (var i = 0; i < cnt; i++) {
                var pi = pkg._items[i];
                if (pi.type == fgui.PackageItemType.Atlas || pi.type == fgui.PackageItemType.Sound) pkg.assetUrls.push(pi.file);
            }
            if (pkg.name.indexOf("lan_") >= 0) UIPackage._curLanItem = pkg;
            UIPackage._instById[pkg.id] = pkg;
            UIPackage._instByName[pkg.name] = pkg;
            UIPackage._instById[pkg._url] = pkg;
            return pkg;
        };
        UIPackage.loadPackage = function (url, loadRes, completeCallback) {
            cc.loader.loadRes(url, function (err, asset) {
                if (err) {
                    completeCallback(err);
                    return;
                }
                if (!asset.rawBuffer) throw "Missing asset data. Call UIConfig.registerLoader first!";
                if (loadRes) {
                    var pkg_1 = new UIPackage();
                    pkg_1.loadPackage(new fgui.ByteBuffer(asset.rawBuffer), url);
                    var cnt = pkg_1._items.length;
                    var urls = [];
                    for (var i = 0; i < cnt; i++) {
                        var pi = pkg_1._items[i];
                        if (pi.type == fgui.PackageItemType.Atlas || pi.type == fgui.PackageItemType.Sound) urls.push(pi.file);
                    }
                    cc.loader.loadResArray(urls, function (err, assets) {
                        if (!err) {
                            UIPackage._instById[pkg_1.id] = pkg_1;
                            UIPackage._instByName[pkg_1.name] = pkg_1;
                        }
                        completeCallback(err);
                    });
                } else {
                    completeCallback(err);
                }
            });
        };
        UIPackage.getPackage = function (packageIdOrName) {
            var pkg = UIPackage._instByName[packageIdOrName];
            if (!pkg) {
                pkg = UIPackage._instById[packageIdOrName];
            }
            return pkg;
        };
        UIPackage.removePackage = function (packageIdOrName) {
            var pkg = UIPackage._instById[packageIdOrName];
            if (!pkg) pkg = UIPackage._instByName[packageIdOrName];
            if (!pkg) throw "No package found: " + packageIdOrName;
            pkg.dispose();
            if (pkg.name == "lan_cn") {
                return;
            }
            delete UIPackage._instById[pkg.id];
            if (pkg._url != null) delete UIPackage._instById[pkg._url];
            delete UIPackage._instByName[pkg.name];
        };
        UIPackage.createObject = function (pkgName, resName, userClass) {
            if (userClass === void 0) {
                userClass = null;
            }
            var pkg = UIPackage.getByName(pkgName);
            if (pkg) return pkg.createObject(resName, userClass);else return null;
        };
        UIPackage.createObjectFromURL = function (url, userClass) {
            if (userClass === void 0) {
                userClass = null;
            }
            var pi = UIPackage.getItemByURL(url);
            if (pi) return pi.owner.internalCreateObject(pi, userClass);else return null;
        };
        UIPackage.getItemURL = function (pkgName, resName) {
            var pkg = UIPackage.getByName(pkgName);
            if (!pkg) return null;
            var pi = pkg._itemsByName[resName];
            if (!pi) return null;
            return "ui://" + pkg.id + pi.id;
        };
        UIPackage.getItemByURL = function (url) {
            var pos1 = url.indexOf("//");
            if (pos1 == -1) return null;
            var pos2 = url.indexOf("/", pos1 + 2);
            if (pos2 == -1) {
                if (url.length > 13) {
                    var pkgId = url.substr(5, 8);
                    var pkg = UIPackage.getById(pkgId);
                    if (pkg != null) {
                        var srcId = url.substr(13);
                        if (pkg.name == "lan_cn") {
                            return UIPackage._curLanItem.getItemByName(pkg.getItemById(srcId).name);
                        }
                        return pkg.getItemById(srcId);
                    }
                }
            } else {
                var pkgName = url.substr(pos1 + 2, pos2 - pos1 - 2);
                if (pkgName == "lan_cn") {
                    pkg = UIPackage._curLanItem;
                } else {
                    pkg = UIPackage.getByName(pkgName);
                }
                if (pkg != null) {
                    var srcName = url.substr(pos2 + 1);
                    return pkg.getItemByName(srcName);
                }
            }
            return null;
        };
        UIPackage.normalizeURL = function (url) {
            if (url == null) return null;
            var pos1 = url.indexOf("//");
            if (pos1 == -1) return null;
            var pos2 = url.indexOf("/", pos1 + 2);
            if (pos2 == -1) return url;
            var pkgName = url.substr(pos1 + 2, pos2 - pos1 - 2);
            var srcName = url.substr(pos2 + 1);
            return UIPackage.getItemURL(pkgName, srcName);
        };
        UIPackage.setStringsSource = function (source) {
            fgui.TranslationHelper.loadFromXML(source);
        };
        Object.defineProperty(UIPackage.prototype, "assetUrls", {
            get: function get() {
                return this._assetUrls;
            },
            set: function set(urls) {
                this._assetUrls = urls;
            },
            enumerable: false,
            configurable: true
        });
        UIPackage.prototype.loadPackage = function (buffer, url) {
            if (buffer.readUint() != 0x46475549) throw "FairyGUI: old package format found in '" + url + "'";
            this._url = url;
            buffer.version = buffer.readInt();
            var ver2 = buffer.version >= 2;
            var compressed = buffer.readBool();
            this._id = buffer.readString();
            this._name = buffer.readString();
            buffer.skip(20);
            var indexTablePos = buffer.position;
            var cnt;
            var i;
            var nextPos;
            var str;
            var branchIncluded;
            buffer.seek(indexTablePos, 4);
            cnt = buffer.readInt();
            var stringTable = new Array(cnt);
            buffer.stringTable = stringTable;
            for (i = 0; i < cnt; i++) {
                stringTable[i] = buffer.readString();
            }if (buffer.seek(indexTablePos, 5)) {
                cnt = buffer.readInt();
                for (i = 0; i < cnt; i++) {
                    var index = buffer.readUshort();
                    var len = buffer.readInt();
                    stringTable[index] = buffer.readString(len);
                }
            }
            buffer.seek(indexTablePos, 0);
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                this._dependencies.push({ id: buffer.readS(), name: buffer.readS() });
            }if (ver2) {
                cnt = buffer.readShort();
                if (cnt > 0) {
                    this._branches = buffer.readSArray(cnt);
                    if (UIPackage._branch) this._branchIndex = this._branches.indexOf(UIPackage._branch);
                }
                branchIncluded = cnt > 0;
            }
            buffer.seek(indexTablePos, 1);
            var pi;
            url = url + "_";
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                nextPos = buffer.readInt();
                nextPos += buffer.position;
                var type = buffer.readByte();
                if (type == fgui.PackageItemType.Image) {
                    pi = new fgui.PackageImageItem();
                } else if (type == fgui.PackageItemType.MovieClip) {
                    pi = new fgui.PackageMovieClipItem();
                } else if (type == fgui.PackageItemType.Font) {
                    pi = new fgui.PackageFontItem();
                } else if (type == fgui.PackageItemType.Component) {
                    pi = new fgui.PackageComponentItem();
                } else if (type = fgui.PackageItemType.Atlas) {
                    pi = new fgui.PackageAtlasItem();
                } else if (type == fgui.PackageItemType.Sound) {
                    pi = new fgui.PackageSoundItem();
                } else if (type == fgui.PackageItemType.Misc) {
                    pi = new fgui.PackageMiscItem();
                } else {
                    pi = new fgui.PackageItem();
                }
                pi.type = type;
                pi.owner = this;
                pi.id = buffer.readS();
                pi.name = buffer.readS();
                buffer.readS();
                pi.file = buffer.readS();
                buffer.readBool();
                pi.width = buffer.readInt();
                pi.height = buffer.readInt();
                pi.setup(buffer, url);
                if (ver2) {
                    str = buffer.readS();
                    if (str) pi.name = str + "/" + pi.name;
                    var branchCnt = buffer.readUbyte();
                    if (branchCnt > 0) {
                        if (branchIncluded) pi.branches = buffer.readSArray(branchCnt);else this._itemsById[buffer.readS()] = pi;
                    }
                    var highResCnt = buffer.readUbyte();
                    if (highResCnt > 0) pi.highResolution = buffer.readSArray(highResCnt);
                }
                this._items.push(pi);
                this._itemsById[pi.id] = pi;
                if (pi.name != null) this._itemsByName[pi.name] = pi;
                buffer.position = nextPos;
            }
            buffer.seek(indexTablePos, 2);
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
                nextPos = buffer.readShort();
                nextPos += buffer.position;
                var itemId = buffer.readS();
                pi = this._itemsById[buffer.readS()];
                var sprite = new AtlasSprite();
                sprite.atlas = pi;
                sprite.rect.x = buffer.readInt();
                sprite.rect.y = buffer.readInt();
                sprite.rect.width = buffer.readInt();
                sprite.rect.height = buffer.readInt();
                sprite.rotated = buffer.readBool();
                if (ver2 && buffer.readBool()) {
                    sprite.offset.x = buffer.readInt();
                    sprite.offset.y = buffer.readInt();
                    sprite.originalSize.width = buffer.readInt();
                    sprite.originalSize.height = buffer.readInt();
                } else {
                    sprite.originalSize.width = sprite.rect.width;
                    sprite.originalSize.height = sprite.rect.height;
                }
                this._sprites[itemId] = sprite;
                buffer.position = nextPos;
            }
            if (buffer.seek(indexTablePos, 3)) {
                cnt = buffer.readShort();
                for (i = 0; i < cnt; i++) {
                    nextPos = buffer.readInt();
                    nextPos += buffer.position;
                    pi = this._itemsById[buffer.readS()];
                    if (pi && pi.type == fgui.PackageItemType.Image) pi.hitTestData = new fgui.PixelHitTestData(buffer);
                    buffer.position = nextPos;
                }
            }
        };
        UIPackage.prototype.dispose = function () {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var pi = this._items[i];
                if (pi.asset) {
                    if (pi.asset._uuid) {
                        var deps = cc.loader.getDependsRecursively(pi.asset);
                        if (deps) {
                            cc.loader.release(deps);
                        }
                    } else {
                        var nativeUrl = pi.asset.nativeUrl;
                        if (nativeUrl) {
                            cc.loader.release(nativeUrl);
                        }
                        pi.asset.destroy();
                    }
                }
            }
            this._assetUrls.forEach(function (url) {
                var asset = cc.loader.getRes(url);
                if (asset) {
                    var deps = cc.loader.getDependsRecursively(asset);
                    cc.loader.release(deps);
                }
            });
            this._assetUrls = [];
        };
        Object.defineProperty(UIPackage.prototype, "id", {
            get: function get() {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UIPackage.prototype, "name", {
            get: function get() {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UIPackage.prototype, "url", {
            get: function get() {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        UIPackage.prototype.createObject = function (resName, userClass) {
            if (userClass === void 0) {
                userClass = null;
            }
            var pi = this._itemsByName[resName];
            if (pi) return this.internalCreateObject(pi, userClass);else return null;
        };
        UIPackage.prototype.internalCreateObject = function (item, userClass) {
            if (userClass === void 0) {
                userClass = null;
            }
            var g;
            if (item.type == fgui.PackageItemType.Component) {
                if (userClass != null) g = new userClass();else g = fgui.UIObjectFactory.newObject(item);
            } else g = fgui.UIObjectFactory.newObject(item);
            if (g == null) return null;
            UIPackage._constructing++;
            g.packageItem = item;
            g.name = item.name;
            g.constructFromResource();
            UIPackage._constructing--;
            return g;
        };
        UIPackage.prototype.getItemById = function (itemId) {
            return this._itemsById[itemId];
        };
        UIPackage.prototype.getItemByName = function (resName) {
            return this._itemsByName[resName];
        };
        UIPackage.prototype.getItemAssetByName = function (resName) {
            var pi = this._itemsByName[resName];
            if (pi == null) {
                throw "Resource not found -" + resName;
            }
            return this.getItemAsset(pi);
        };
        UIPackage.prototype.getItemAsset = function (item) {
            switch (item.type) {
                case fgui.PackageItemType.Image:
                    if (!item.decoded) {
                        item.decoded = true;
                        var sprite = this._sprites[item.id];
                        if (sprite != null) {
                            var atlasTexture = this.getItemAsset(sprite.atlas);
                            if (atlasTexture != null) {
                                var sf = new cc.SpriteFrame(atlasTexture, sprite.rect, sprite.rotated, new cc.Vec2(sprite.offset.x - (sprite.originalSize.width - sprite.rect.width) / 2, -(sprite.offset.y - (sprite.originalSize.height - sprite.rect.height) / 2)), sprite.originalSize);
                                if (item.scale9Grid) {
                                    sf.insetLeft = item.scale9Grid.x;
                                    sf.insetTop = item.scale9Grid.y;
                                    sf.insetRight = item.width - item.scale9Grid.xMax;
                                    sf.insetBottom = item.height - item.scale9Grid.yMax;
                                }
                                item.asset = sf;
                            } else {}
                        }
                    }
                    return item.asset;
                case fgui.PackageItemType.Atlas:
                    if (!item.decoded) {
                        item.decoded = true;
                        item.asset = cc.loader.getRes(item.file);
                        if (!item.asset) console.log("Resource '" + item.file + "' not found, please check default.res.json!");
                    }
                    return item.asset;
                case fgui.PackageItemType.Sound:
                    if (!item.decoded) {
                        item.decoded = true;
                        item.asset = cc.loader.getRes(item.file);
                        if (!item.asset) console.log("Resource '" + item.file + "' not found, please check default.res.json!");
                    }
                    return item.asset;
                case fgui.PackageItemType.Font:
                    if (!item.decoded) {
                        item.decoded = true;
                        this.loadFont(item);
                    }
                    return item.asset;
                case fgui.PackageItemType.MovieClip:
                    if (!item.decoded) {
                        item.decoded = true;
                        this.loadMovieClip(item);
                    }
                    return null;
                case fgui.PackageItemType.Misc:
                    if (item.file) return cc.loader.getRes(item.file);else return null;
                default:
                    return null;
            }
        };
        UIPackage.prototype.getAtlasSprite = function (idx) {
            return this._sprites[idx];
        };
        UIPackage.prototype.loadAllAssets = function () {
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
                var pi = this._items[i];
                pi.load();
            }
        };
        UIPackage.prototype.loadMovieClip = function (item) {
            var buffer = item.rawData;
            buffer.seek(0, 0);
            item.interval = buffer.readInt() / 1000;
            item.swing = buffer.readBool();
            item.repeatDelay = buffer.readInt() / 1000;
            buffer.seek(0, 1);
            var frameCount = buffer.readShort();
            item.frames = Array(frameCount);
            var spriteId;
            var frame;
            var sprite;
            for (var i = 0; i < frameCount; i++) {
                var nextPos = buffer.readShort();
                nextPos += buffer.position;
                frame = new fgui.Frame();
                frame.rect.x = buffer.readInt();
                frame.rect.y = buffer.readInt();
                frame.rect.width = buffer.readInt();
                frame.rect.height = buffer.readInt();
                frame.addDelay = buffer.readInt() / 1000;
                spriteId = buffer.readS();
                if (spriteId != null && (sprite = this._sprites[spriteId]) != null) {
                    var atlasTexture = this.getItemAsset(sprite.atlas);
                    if (atlasTexture != null) {
                        var sx = item.width / frame.rect.width;
                        frame.texture = new cc.SpriteFrame(atlasTexture, sprite.rect, sprite.rotated, new cc.Vec2(frame.rect.x - (item.width - frame.rect.width) / 2, -(frame.rect.y - (item.height - frame.rect.height) / 2)), new cc.Size(item.width, item.height));
                    }
                }
                item.frames[i] = frame;
                buffer.position = nextPos;
            }
        };
        UIPackage.prototype.loadFont = function (item) {
            var font = new cc.LabelAtlas();
            item.asset = font;
            font._fntConfig = {
                commonHeight: 0,
                fontSize: 0,
                kerningDict: {},
                fontDefDictionary: {}
            };
            var dict = font._fntConfig.fontDefDictionary;
            var buffer = item.rawData;
            buffer.seek(0, 0);
            var ttf = buffer.readBool();
            var canTint = buffer.readBool();
            var resizable = buffer.readBool();
            buffer.readBool();
            var fontSize = buffer.readInt();
            var xadvance = buffer.readInt();
            var lineHeight = buffer.readInt();
            var mainTexture;
            var mainSprite = this._sprites[item.id];
            if (mainSprite != null) mainTexture = this.getItemAsset(mainSprite.atlas);
            buffer.seek(0, 1);
            var bg = null;
            var cnt = buffer.readInt();
            for (var i = 0; i < cnt; i++) {
                var nextPos = buffer.readShort();
                nextPos += buffer.position;
                bg = {};
                var ch = buffer.readUshort();
                dict[ch] = bg;
                var rect = new cc.Rect();
                bg.rect = rect;
                var img = buffer.readS();
                rect.x = buffer.readInt();
                rect.y = buffer.readInt();
                bg.xOffset = buffer.readInt();
                bg.yOffset = buffer.readInt();
                rect.width = buffer.readInt();
                rect.height = buffer.readInt();
                bg.xAdvance = buffer.readInt();
                bg.channel = buffer.readByte();
                if (bg.channel == 1) bg.channel = 3;else if (bg.channel == 2) bg.channel = 2;else if (bg.channel == 3) bg.channel = 1;
                if (ttf) {
                    rect.x += mainSprite.rect.x;
                    rect.y += mainSprite.rect.y;
                } else {
                    var sprite = this._sprites[img];
                    if (sprite) {
                        rect.set(sprite.rect);
                        bg.xOffset += sprite.offset.x;
                        bg.yOffset += sprite.offset.y;
                        if (fontSize == 0) fontSize = sprite.originalSize.height;
                        if (!mainTexture) {
                            sprite.atlas.load();
                            mainTexture = sprite.atlas.asset;
                        }
                    }
                    if (bg.xAdvance == 0) {
                        if (xadvance == 0) bg.xAdvance = bg.xOffset + bg.rect.width;else bg.xAdvance = xadvance;
                    }
                }
                buffer.position = nextPos;
            }
            font.fontSize = fontSize;
            font._fntConfig.fontSize = fontSize;
            font._fntConfig.commonHeight = lineHeight == 0 ? fontSize : lineHeight;
            font._fntConfig.resizable = resizable;
            font._fntConfig.canTint = canTint;
            var spriteFrame = new cc.SpriteFrame();
            spriteFrame.setTexture(mainTexture);
            font.spriteFrame = spriteFrame;
            font.onLoad();
        };
        UIPackage._constructing = 0;
        UIPackage._instById = {};
        UIPackage._instByName = {};
        UIPackage._branch = "";
        UIPackage._vars = {};
        return UIPackage;
    }();
    fgui.UIPackage = UIPackage;
    var AtlasSprite = function () {
        function AtlasSprite() {
            this.rect = new cc.Rect();
            this.offset = new cc.Vec2(0, 0);
            this.originalSize = new cc.Size(0, 0);
        }
        return AtlasSprite;
    }();
    fgui.AtlasSprite = AtlasSprite;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Window = function (_super) {
        __extends(Window, _super);
        function Window() {
            var _this = _super.call(this) || this;
            _this._requestingCmd = 0;
            _this._uiSources = new Array();
            _this.bringToFontOnClick = fgui.UIConfig.bringWindowToFrontOnClick;
            _this._node.on(fgui.Event.TOUCH_BEGIN, _this.onTouchBegin_1, _this, true);
            return _this;
        }
        Window.prototype.genPartner = function () {
            this._partner = this._node.addComponent(fgui.GActivatePartner);
        };
        Window.prototype.addUISource = function (source) {
            this._uiSources.push(source);
        };
        Object.defineProperty(Window.prototype, "contentPane", {
            get: function get() {
                return this._contentPane;
            },
            set: function set(val) {
                if (this._contentPane != val) {
                    if (this._contentPane != null) this.removeChild(this._contentPane);
                    this._contentPane = val;
                    if (this._contentPane != null) {
                        this._contentPane.name = this._name + "contentPane";
                        this.addChild(this._contentPane);
                        this.setSize(this._contentPane.width, this._contentPane.height);
                        this._contentPane.addRelation(this, fgui.RelationType.Size);
                        this._frame = this._contentPane.getChild("frame");
                        if (this._frame != null) {
                            this.closeButton = this._frame.getChild("closeButton");
                            this.dragArea = this._frame.getChild("dragArea");
                            this.contentArea = this._frame.getChild("contentArea");
                        }
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "frame", {
            get: function get() {
                return this._frame;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "closeButton", {
            get: function get() {
                return this._closeButton;
            },
            set: function set(value) {
                if (this._closeButton != null) this._closeButton.offClick(this.closeEventHandler, this);
                this._closeButton = value;
                if (this._closeButton != null) this._closeButton.onClick(this.closeEventHandler, this);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "dragArea", {
            get: function get() {
                return this._dragArea;
            },
            set: function set(value) {
                if (this._dragArea != value) {
                    if (this._dragArea != null) {
                        this._dragArea.draggable = false;
                        this._dragArea.off(fgui.Event.DRAG_START, this.onDragStart_1, this);
                    }
                    this._dragArea = value;
                    if (this._dragArea != null) {
                        this._dragArea.draggable = true;
                        this._dragArea.on(fgui.Event.DRAG_START, this.onDragStart_1, this);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "contentArea", {
            get: function get() {
                return this._contentArea;
            },
            set: function set(value) {
                this._contentArea = value;
            },
            enumerable: false,
            configurable: true
        });
        Window.prototype.show = function () {
            fgui.GRoot.inst.showWindow(this);
        };
        Window.prototype.showOn = function (root) {
            root.showWindow(this);
        };
        Window.prototype.hide = function (remove) {
            if (remove === void 0) {
                remove = true;
            }
            if (this.isShowing) this.doHideAnimation(remove);
        };
        Window.prototype.hideImmediately = function (remove) {
            if (remove === void 0) {
                remove = true;
            }
            var r = this.parent instanceof fgui.GRoot ? this.parent : null;
            if (!r) r = fgui.GRoot.inst;
            r.hideWindowImmediately(this, remove);
        };
        Window.prototype.centerOn = function (r, restraint) {
            this.setPosition(Math.round((r.width - this.width) / 2), Math.round((r.height - this.height) / 2));
            if (restraint) {
                this.addRelation(r, fgui.RelationType.Center_Center);
                this.addRelation(r, fgui.RelationType.Middle_Middle);
            }
        };
        Window.prototype.toggleStatus = function () {
            if (this.isTop) this.hide();else this.show();
        };
        Object.defineProperty(Window.prototype, "isShowing", {
            get: function get() {
                return this.parent != null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "isTop", {
            get: function get() {
                return this.parent != null && this.parent.getChildIndex(this) == this.parent.numChildren - 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "modal", {
            get: function get() {
                return this._modal;
            },
            set: function set(val) {
                this._modal = val;
            },
            enumerable: false,
            configurable: true
        });
        Window.prototype.bringToFront = function () {
            this.root.bringToFront(this);
        };
        Window.prototype.showModalWait = function (requestingCmd) {
            if (requestingCmd != undefined) this._requestingCmd = requestingCmd;
            if (fgui.UIConfig.windowModalWaiting) {
                if (!this._modalWaitPane) this._modalWaitPane = fgui.UIPackage.createObjectFromURL(fgui.UIConfig.windowModalWaiting);
                this.layoutModalWaitPane();
                this.addChild(this._modalWaitPane);
            }
        };
        Window.prototype.layoutModalWaitPane = function () {
            if (this._contentArea != null) {
                var pt = this._frame.localToGlobal();
                pt = this.globalToLocal(pt.x, pt.y, pt);
                this._modalWaitPane.setPosition(pt.x + this._contentArea.x, pt.y + this._contentArea.y);
                this._modalWaitPane.setSize(this._contentArea.width, this._contentArea.height);
            } else this._modalWaitPane.setSize(this.width, this.height);
        };
        Window.prototype.closeModalWait = function (requestingCmd) {
            if (requestingCmd === void 0) {
                requestingCmd = 0;
            }
            if (requestingCmd != 0) {
                if (this._requestingCmd != requestingCmd) return false;
            }
            this._requestingCmd = 0;
            if (this._modalWaitPane && this._modalWaitPane.parent != null) this.removeChild(this._modalWaitPane);
            return true;
        };
        Object.defineProperty(Window.prototype, "modalWaiting", {
            get: function get() {
                return this._modalWaitPane && this._modalWaitPane.parent != null;
            },
            enumerable: false,
            configurable: true
        });
        Window.prototype.init = function () {
            if (this._inited || this._loading) return;
            if (this._uiSources.length > 0) {
                this._loading = false;
                var cnt = this._uiSources.length;
                for (var i = 0; i < cnt; i++) {
                    var lib = this._uiSources[i];
                    if (!lib.loaded) {
                        lib.load(this.__uiLoadComplete, this);
                        this._loading = true;
                    }
                }
                if (!this._loading) this._init();
            } else this._init();
        };
        Window.prototype.onInit = function () {};
        Window.prototype.onShown = function () {};
        Window.prototype.onHide = function () {};
        Window.prototype.doShowAnimation = function () {
            this.onShown();
        };
        Window.prototype.doHideAnimation = function (remove) {
            if (remove === void 0) {
                remove = true;
            }
            this.hideImmediately(remove);
        };
        Window.prototype.__uiLoadComplete = function () {
            var cnt = this._uiSources.length;
            for (var i = 0; i < cnt; i++) {
                var lib = this._uiSources[i];
                if (!lib.loaded) return;
            }
            this._loading = false;
            this._init();
        };
        Window.prototype._init = function () {
            this._inited = true;
            this.onInit();
            if (this.isShowing) this.doShowAnimation();
        };
        Window.prototype.dispose = function () {
            if (this.parent != null) this.hideImmediately();
            _super.prototype.dispose.call(this);
        };
        Window.prototype.closeEventHandler = function (evt) {
            this.hide();
        };
        Window.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            if (!this._inited) this.init();else this.doShowAnimation();
        };
        Window.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.closeModalWait();
            this.onHide();
        };
        Window.prototype.onTouchBegin_1 = function (evt) {
            if (this.isShowing && this.bringToFontOnClick) this.bringToFront();
        };
        Window.prototype.onDragStart_1 = function (evt) {
            var original = fgui.GObject.cast(evt.currentTarget);
            original.stopDrag();
            this.startDrag(evt.touchId);
        };
        return Window;
    }(fgui.GComponent);
    fgui.Window = Window;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ControllerAction = function () {
        function ControllerAction() {}
        ControllerAction.createAction = function (type) {
            switch (type) {
                case 0:
                    return new fgui.PlayTransitionAction();
                case 1:
                    return new fgui.ChangePageAction();
            }
            return null;
        };
        ControllerAction.prototype.run = function (controller, prevPage, curPage) {
            if ((this.fromPage == null || this.fromPage.length == 0 || this.fromPage.indexOf(prevPage) != -1) && (this.toPage == null || this.toPage.length == 0 || this.toPage.indexOf(curPage) != -1)) this.enter(controller);else this.leave(controller);
        };
        ControllerAction.prototype.enter = function (controller) {};
        ControllerAction.prototype.leave = function (controller) {};
        ControllerAction.prototype.setup = function (buffer) {
            var cnt;
            var i;
            cnt = buffer.readShort();
            this.fromPage = [];
            for (i = 0; i < cnt; i++) {
                this.fromPage[i] = buffer.readS();
            }cnt = buffer.readShort();
            this.toPage = [];
            for (i = 0; i < cnt; i++) {
                this.toPage[i] = buffer.readS();
            }
        };
        return ControllerAction;
    }();
    fgui.ControllerAction = ControllerAction;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ChangePageAction = function (_super) {
        __extends(ChangePageAction, _super);
        function ChangePageAction() {
            return _super.call(this) || this;
        }
        ChangePageAction.prototype.enter = function (controller) {
            if (!this.controllerName) return;
            var gcom;
            if (this.objectId) {
                var obj = controller.parent.getChildById(this.objectId);
                if (obj instanceof fgui.GComponent) gcom = obj;else return;
            } else gcom = controller.parent;
            if (gcom) {
                var cc = gcom.getController(this.controllerName);
                if (cc && cc != controller && !cc.changing) {
                    if (this.targetPage == "~1") {
                        if (controller.selectedIndex < cc.pageCount) cc.selectedIndex = controller.selectedIndex;
                    } else if (this.targetPage == "~2") cc.selectedPage = controller.selectedPage;else cc.selectedPageId = this.targetPage;
                }
            }
        };
        ChangePageAction.prototype.setup = function (buffer) {
            _super.prototype.setup.call(this, buffer);
            this.objectId = buffer.readS();
            this.controllerName = buffer.readS();
            this.targetPage = buffer.readS();
        };
        return ChangePageAction;
    }(fgui.ControllerAction);
    fgui.ChangePageAction = ChangePageAction;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var PlayTransitionAction = function (_super) {
        __extends(PlayTransitionAction, _super);
        function PlayTransitionAction() {
            var _this = _super.call(this) || this;
            _this.playTimes = 1;
            _this.delay = 0;
            _this.stopOnExit = false;
            return _this;
        }
        PlayTransitionAction.prototype.enter = function (controller) {
            var trans = controller.parent.getTransition(this.transitionName);
            if (trans) {
                if (this._currentTransition && this._currentTransition.playing) trans.changePlayTimes(this.playTimes);else trans.play(null, this.playTimes, this.delay);
                this._currentTransition = trans;
            }
        };
        PlayTransitionAction.prototype.leave = function (controller) {
            if (this.stopOnExit && this._currentTransition) {
                this._currentTransition.stop();
                this._currentTransition = null;
            }
        };
        PlayTransitionAction.prototype.setup = function (buffer) {
            _super.prototype.setup.call(this, buffer);
            this.transitionName = buffer.readS();
            this.playTimes = buffer.readInt();
            this.delay = buffer.readFloat();
            this.stopOnExit = buffer.readBool();
        };
        return PlayTransitionAction;
    }(fgui.ControllerAction);
    fgui.PlayTransitionAction = PlayTransitionAction;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var BlendMode;
    (function (BlendMode) {
        BlendMode[BlendMode["Normal"] = 0] = "Normal";
        BlendMode[BlendMode["None"] = 1] = "None";
        BlendMode[BlendMode["Add"] = 2] = "Add";
        BlendMode[BlendMode["Multiply"] = 3] = "Multiply";
        BlendMode[BlendMode["Screen"] = 4] = "Screen";
        BlendMode[BlendMode["Erase"] = 5] = "Erase";
        BlendMode[BlendMode["Mask"] = 6] = "Mask";
        BlendMode[BlendMode["Below"] = 7] = "Below";
        BlendMode[BlendMode["Off"] = 8] = "Off";
        BlendMode[BlendMode["Custom1"] = 9] = "Custom1";
        BlendMode[BlendMode["Custom2"] = 10] = "Custom2";
        BlendMode[BlendMode["Custom3"] = 11] = "Custom3";
    })(BlendMode = fgui.BlendMode || (fgui.BlendMode = {}));
    var BlendModeUtils = function () {
        function BlendModeUtils() {}
        BlendModeUtils.apply = function (node, blendMode) {
            var f = BlendModeUtils.factors[blendMode];
            var renderers = node.getComponentsInChildren(cc.RenderComponent);
            renderers.forEach(function (element) {
                element.srcBlendFactor = f[0];
                element.dstBlendFactor = f[1];
            });
        };
        BlendModeUtils.override = function (blendMode, srcFactor, dstFactor) {
            BlendModeUtils.factors[blendMode][0] = srcFactor;
            BlendModeUtils.factors[blendMode][1] = dstFactor;
        };
        BlendModeUtils.factors = [[cc.macro.SRC_ALPHA, cc.macro.ONE_MINUS_SRC_ALPHA], [cc.macro.ONE, cc.macro.ONE], [cc.macro.SRC_ALPHA, cc.macro.ONE], [cc.macro.DST_COLOR, cc.macro.ONE_MINUS_SRC_ALPHA], [cc.macro.ONE, cc.macro.ONE_MINUS_SRC_COLOR], [cc.macro.ZERO, cc.macro.ONE_MINUS_SRC_ALPHA], [cc.macro.ZERO, cc.macro.SRC_ALPHA], [cc.macro.ONE_MINUS_DST_ALPHA, cc.macro.DST_ALPHA], [cc.macro.ONE, cc.macro.ZERO], [cc.macro.SRC_ALPHA, cc.macro.ONE_MINUS_SRC_ALPHA], [cc.macro.SRC_ALPHA, cc.macro.ONE_MINUS_SRC_ALPHA], [cc.macro.SRC_ALPHA, cc.macro.ONE_MINUS_SRC_ALPHA]];
        return BlendModeUtils;
    }();
    fgui.BlendModeUtils = BlendModeUtils;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Image = function (_super) {
        __extends(Image, _super);
        function Image() {
            var _this = _super.call(this) || this;
            _this._flip = fgui.FlipType.None;
            _this._fillMethod = fgui.FillMethod.None;
            _this._fillOrigin = fgui.FillOrigin.Left;
            _this._fillAmount = 0;
            _this._fillClockwise = false;
            _this._grayed = false;
            return _this;
        }
        Object.defineProperty(Image.prototype, "flip", {
            get: function get() {
                return this._flip;
            },
            set: function set(value) {
                if (this._flip != value) {
                    this._flip = value;
                    var sx = 1,
                        sy = 1;
                    if (this._flip == fgui.FlipType.Horizontal || this._flip == fgui.FlipType.Both) sx = -1;
                    if (this._flip == fgui.FlipType.Vertical || this._flip == fgui.FlipType.Both) sy = -1;
                    if (sx != 1 || sy != 1) this.node.setAnchorPoint(0.5, 0.5);
                    this.node.setScale(sx, sy);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "fillMethod", {
            get: function get() {
                return this._fillMethod;
            },
            set: function set(value) {
                if (this._fillMethod != value) {
                    this._fillMethod = value;
                    if (this._fillMethod != 0) {
                        this.type = cc.Sprite.Type.FILLED;
                        if (this._fillMethod <= 3) this.fillType = this._fillMethod - 1;else this.fillType = cc.Sprite.FillType.RADIAL;
                        this.fillCenter = new cc.Vec2(0.5, 0.5);
                        this.setupFill();
                    } else {
                        this.type = cc.Sprite.Type.SIMPLE;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "fillOrigin", {
            get: function get() {
                return this._fillOrigin;
            },
            set: function set(value) {
                if (this._fillOrigin != value) {
                    this._fillOrigin = value;
                    if (this._fillMethod != 0) this.setupFill();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "fillClockwise", {
            get: function get() {
                return this._fillClockwise;
            },
            set: function set(value) {
                if (this._fillClockwise != value) {
                    this._fillClockwise = value;
                    if (this._fillMethod != 0) this.setupFill();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "fillAmount", {
            get: function get() {
                return this._fillAmount;
            },
            set: function set(value) {
                if (this._fillAmount != value) {
                    this._fillAmount = value;
                    if (this._fillMethod != 0) {
                        if (this._fillClockwise) this.fillRange = -this._fillAmount;else this.fillRange = this._fillAmount;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Image.prototype.setupFill = function () {
            if (this._fillMethod == fgui.FillMethod.Horizontal || this._fillMethod == fgui.FillMethod.Vertical) {
                this._fillClockwise = this._fillOrigin == fgui.FillOrigin.Right || this._fillOrigin == fgui.FillOrigin.Bottom;
                this.fillStart = this._fillClockwise ? 1 : 0;
            } else {
                var origin_1 = this._fillOrigin;
                switch (origin_1) {
                    case fgui.FillOrigin.Right:
                        this.fillOrigin = 0;
                        break;
                    case fgui.FillOrigin.Top:
                        this.fillStart = 0.25;
                        break;
                    case fgui.FillOrigin.Left:
                        this.fillStart = 0.5;
                        break;
                    case fgui.FillOrigin.Bottom:
                        this.fillStart = 0.75;
                        break;
                }
            }
        };
        Object.defineProperty(Image.prototype, "grayed", {
            get: function get() {
                return this._grayed;
            },
            set: function set(value) {
                if (this._grayed == value) return;
                this._grayed = value;
                var material;
                if (value) {
                    material = this._graySpriteMaterial;
                    if (!material) {
                        material = cc.Material.getBuiltinMaterial('2d-gray-sprite');
                    }
                    if (cc.Material.getInstantiatedMaterial) {
                        material = this._graySpriteMaterial = cc.Material.getInstantiatedMaterial(material, this);
                    } else {
                        material = this._graySpriteMaterial = cc.Material.create(material, this);
                    }
                } else {
                    material = this._spriteMaterial;
                    if (!material) {
                        material = cc.Material.getBuiltinMaterial('2d-sprite', this);
                    }
                    if (cc.Material.getInstantiatedMaterial) {
                        material = this._spriteMaterial = cc.Material.getInstantiatedMaterial(material, this);
                    } else {
                        material = this._spriteMaterial = cc.Material.create(material, this);
                    }
                }
                this.setMaterial(0, material);
            },
            enumerable: false,
            configurable: true
        });
        ;
        return Image;
    }(cc.Sprite);
    fgui.Image = Image;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Frame = function () {
        function Frame() {
            this.addDelay = 0;
            this.rect = new cc.Rect();
        }
        return Frame;
    }();
    fgui.Frame = Frame;
    var MovieClip = function (_super) {
        __extends(MovieClip, _super);
        function MovieClip() {
            var _this = _super.call(this) || this;
            _this.interval = 0;
            _this.repeatDelay = 0;
            _this.timeScale = 1;
            _this._playing = true;
            _this._frameCount = 0;
            _this._frame = 0;
            _this._start = 0;
            _this._end = 0;
            _this._times = 0;
            _this._endAt = 0;
            _this._status = 0;
            _this._smoothing = true;
            _this._frameElapsed = 0;
            _this._reversed = false;
            _this._repeatedCount = 0;
            _this.setPlaySettings();
            return _this;
        }
        Object.defineProperty(MovieClip.prototype, "frames", {
            get: function get() {
                return this._frames;
            },
            set: function set(value) {
                this._frames = value;
                if (this._frames != null) {
                    this._frameCount = this._frames.length;
                    if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
                    if (this._endAt == -1 || this._endAt > this._frameCount - 1) this._endAt = this._frameCount - 1;
                    if (this._frame < 0 || this._frame > this._frameCount - 1) this._frame = this._frameCount - 1;
                    this.type = cc.Sprite.Type.SIMPLE;
                    this.drawFrame();
                    this._frameElapsed = 0;
                    this._repeatedCount = 0;
                    this._reversed = false;
                } else {
                    this._frameCount = 0;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MovieClip.prototype, "frameCount", {
            get: function get() {
                return this._frameCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MovieClip.prototype, "frame", {
            get: function get() {
                return this._frame;
            },
            set: function set(value) {
                if (this._frame != value) {
                    if (this._frames != null && value >= this._frameCount) value = this._frameCount - 1;
                    this._frame = value;
                    this._frameElapsed = 0;
                    this.drawFrame();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MovieClip.prototype, "playing", {
            get: function get() {
                return this._playing;
            },
            set: function set(value) {
                if (this._playing != value) {
                    this._playing = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MovieClip.prototype, "smoothing", {
            get: function get() {
                return this._smoothing;
            },
            set: function set(value) {
                this._smoothing = value;
            },
            enumerable: false,
            configurable: true
        });
        MovieClip.prototype.rewind = function () {
            this._frame = 0;
            this._frameElapsed = 0;
            this._reversed = false;
            this._repeatedCount = 0;
            this.drawFrame();
        };
        MovieClip.prototype.syncStatus = function (anotherMc) {
            this._frame = anotherMc._frame;
            this._frameElapsed = anotherMc._frameElapsed;
            this._reversed = anotherMc._reversed;
            this._repeatedCount = anotherMc._repeatedCount;
            this.drawFrame();
        };
        MovieClip.prototype.advance = function (timeInMiniseconds) {
            var beginFrame = this._frame;
            var beginReversed = this._reversed;
            var backupTime = timeInMiniseconds;
            while (true) {
                var tt = this.interval + this._frames[this._frame].addDelay;
                if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;
                if (timeInMiniseconds < tt) {
                    this._frameElapsed = 0;
                    break;
                }
                timeInMiniseconds -= tt;
                if (this.swing) {
                    if (this._reversed) {
                        this._frame--;
                        if (this._frame <= 0) {
                            this._frame = 0;
                            this._repeatedCount++;
                            this._reversed = !this._reversed;
                        }
                    } else {
                        this._frame++;
                        if (this._frame > this._frameCount - 1) {
                            this._frame = Math.max(0, this._frameCount - 2);
                            this._repeatedCount++;
                            this._reversed = !this._reversed;
                        }
                    }
                } else {
                    this._frame++;
                    if (this._frame > this._frameCount - 1) {
                        this._frame = 0;
                        this._repeatedCount++;
                    }
                }
                if (this._frame == beginFrame && this._reversed == beginReversed) {
                    var roundTime = backupTime - timeInMiniseconds;
                    timeInMiniseconds -= Math.floor(timeInMiniseconds / roundTime) * roundTime;
                }
            }
            this.drawFrame();
        };
        MovieClip.prototype.registerFrameCallback = function (callback, callbackObj) {
            this._frameCallback = callback;
            this._frameCallbackObj = callbackObj;
        };
        MovieClip.prototype.setPlaySettings = function (start, end, times, endAt, endCallback, callbackObj) {
            if (start == undefined) start = 0;
            if (end == undefined) end = -1;
            if (times == undefined) times = 0;
            if (endAt == undefined) endAt = -1;
            this._start = start;
            this._end = end;
            if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
            this._times = times;
            this._endAt = endAt;
            if (this._endAt == -1) this._endAt = this._end;
            this._status = 0;
            this._callback = endCallback;
            this._callbackObj = callbackObj;
            this.frame = start;
        };
        MovieClip.prototype.update = function (dt) {
            if (!this._playing || this._frameCount == 0 || this._status == 3) return;
            if (this.timeScale != 1) dt *= this.timeScale;
            this._frameElapsed += dt;
            var tt = this.interval + this._frames[this._frame].addDelay;
            if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;
            if (this._frameElapsed < tt) return;
            var curFrame = this._frame;
            this._frameElapsed -= tt;
            if (this._frameElapsed > this.interval) this._frameElapsed = this.interval;
            if (this.swing) {
                if (this._reversed) {
                    this._frame--;
                    if (this._frame <= 0) {
                        this._frame = 0;
                        this._repeatedCount++;
                        this._reversed = !this._reversed;
                    }
                } else {
                    this._frame++;
                    if (this._frame > this._frameCount - 1) {
                        this._frame = Math.max(0, this._frameCount - 2);
                        this._repeatedCount++;
                        this._reversed = !this._reversed;
                    }
                }
            } else {
                this._frame++;
                if (this._frame > this._frameCount - 1) {
                    this._frame = 0;
                    this._repeatedCount++;
                }
            }
            if (this._status == 1) {
                this._frame = this._start;
                this._frameElapsed = 0;
                this._status = 0;
            } else if (this._status == 2) {
                this._frame = this._endAt;
                this._frameElapsed = 0;
                this._status = 3;
                this.callDrawFrameCallback(this._frame);
                if (this._callback != null) {
                    var callback = this._callback;
                    var caller = this._callbackObj;
                    this._callback = null;
                    this._callbackObj = null;
                    callback.call(caller);
                }
            } else {
                if (this._frame == this._end) {
                    if (this._times > 0) {
                        this._times--;
                        if (this._times == 0) this._status = 2;else this._status = 1;
                    } else if (this._start != 0) this._status = 1;
                }
            }
            if (curFrame !== this._frame) {
                this.drawFrame();
            }
        };
        MovieClip.prototype.callDrawFrameCallback = function (frame) {
            if (this._frameCallback) {
                var callback = this._frameCallback;
                var caller = this._frameCallbackObj;
                callback.call(caller, [frame]);
            }
        };
        MovieClip.prototype.drawFrame = function () {
            if (!this._frames || this._frames.length <= 0) return;
            if (this._frameCount > 0 && this._frame < this._frames.length) {
                var frame = this._frames[this._frame];
                this.spriteFrame = frame.texture;
            }
            if (this._status != 3) {
                this.callDrawFrameCallback(this._frame);
            }
        };
        return MovieClip;
    }(fgui.Image);
    fgui.MovieClip = MovieClip;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var Event = function (_super) {
        __extends(Event, _super);
        function Event(type, bubbles) {
            var _this = _super.call(this, type, bubbles) || this;
            _this.pos = new cc.Vec2();
            _this.touchId = 0;
            _this.clickCount = 0;
            _this.button = 0;
            _this.keyModifiers = 0;
            _this.mouseWheelDelta = 0;
            return _this;
        }
        Object.defineProperty(Event.prototype, "isShiftDown", {
            get: function get() {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "isCtrlDown", {
            get: function get() {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Event.prototype.captureTouch = function () {
            var obj = fgui.GObject.cast(this.currentTarget);
            if (obj) this._processor.addTouchMonitor(this.touchId, obj);
        };
        Event._borrow = function (type, bubbles) {
            var evt;
            if (Event._eventPool.length) {
                evt = Event._eventPool.pop();
                evt.type = type;
                evt.bubbles = bubbles;
            } else {
                evt = new Event(type, bubbles);
            }
            return evt;
        };
        Event._return = function (evt) {
            evt.initiator = null;
            evt.touch = null;
            evt.unuse();
            Event._eventPool.push(evt);
        };
        Event.TOUCH_BEGIN = "fui_touch_begin";
        Event.TOUCH_MOVE = "fui_touch_move";
        Event.TOUCH_END = "fui_touch_end";
        Event.CLICK = "fui_click";
        Event.ROLL_OVER = "fui_roll_over";
        Event.ROLL_OUT = "fui_roll_out";
        Event.MOUSE_WHEEL = "fui_mouse_wheel";
        Event.DISPLAY = "fui_display";
        Event.UNDISPLAY = "fui_undisplay";
        Event.GEAR_STOP = "fui_gear_stop";
        Event.LINK = "fui_text_link";
        Event.Submit = "editing-return";
        Event.TEXT_CHANGE = "text-changed";
        Event.STATUS_CHANGED = "fui_status_changed";
        Event.XY_CHANGED = "fui_xy_changed";
        Event.SIZE_CHANGED = "fui_size_changed";
        Event.SIZE_DELAY_CHANGE = "fui_size_delay_change";
        Event.DRAG_START = "fui_drag_start";
        Event.DRAG_MOVE = "fui_drag_move";
        Event.DRAG_END = "fui_drag_end";
        Event.DROP = "fui_drop";
        Event.SCROLL = "fui_scroll";
        Event.SCROLL_END = "fui_scroll_end";
        Event.PULL_DOWN_RELEASE = "fui_pull_down_release";
        Event.PULL_UP_RELEASE = "fui_pull_up_release";
        Event.CLICK_ITEM = "fui_click_item";
        Event._eventPool = new Array();
        return Event;
    }(cc.Event);
    fgui.Event = Event;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var PixelHitTest = function () {
        function PixelHitTest(data, offsetX, offsetY) {
            this._data = data;
            this.offsetX = offsetX == undefined ? 0 : offsetX;
            this.offsetY = offsetY == undefined ? 0 : offsetY;
            this.scaleX = 1;
            this.scaleY = 1;
        }
        PixelHitTest.prototype.hitTest = function (obj, x, y) {
            x = Math.floor((x / this.scaleX - this.offsetX) * this._data.scale);
            y = Math.floor((y / this.scaleY - this.offsetY) * this._data.scale);
            if (x < 0 || y < 0 || x >= this._data.pixelWidth) return false;
            var pos = y * this._data.pixelWidth + x;
            var pos2 = Math.floor(pos / 8);
            var pos3 = pos % 8;
            if (pos2 >= 0 && pos2 < this._data.pixels.length) return (this._data.pixels[pos2] >> pos3 & 0x1) == 1;else return false;
        };
        return PixelHitTest;
    }();
    fgui.PixelHitTest = PixelHitTest;
    var PixelHitTestData = function () {
        function PixelHitTestData(ba) {
            ba.readInt();
            this.pixelWidth = ba.readInt();
            this.scale = 1 / ba.readByte();
            this.pixels = ba.readBuffer().data;
        }
        return PixelHitTestData;
    }();
    fgui.PixelHitTestData = PixelHitTestData;
    var ChildHitArea = function () {
        function ChildHitArea(child, reversed) {
            this._child = child;
            this._reversed = reversed;
        }
        ChildHitArea.prototype.hitTest = function (obj, x, y) {
            return false;
        };
        return ChildHitArea;
    }();
    fgui.ChildHitArea = ChildHitArea;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var InputProcessor = function (_super) {
        __extends(InputProcessor, _super);
        function InputProcessor() {
            var _this = _super.call(this) || this;
            _this._touches = new Array();
            _this._rollOutChain = new Array();
            _this._rollOverChain = new Array();
            _this._touchPos = new cc.Vec2();
            return _this;
        }
        InputProcessor.prototype.onLoad = function () {
            this._owner = this.node["$gobj"];
        };
        InputProcessor.prototype.onEnable = function () {
            var node = this.node;
            node.on(cc.Node.EventType.TOUCH_START, this.touchBeginHandler, this);
            node.on(cc.Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
            node.on(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
            node.on(cc.Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
            node.on(cc.Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
            node.on(cc.Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
            node.on(cc.Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
            node.on(cc.Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
            this._touchListener = this.node["_touchListener"];
        };
        InputProcessor.prototype.onDisable = function () {
            var node = this.node;
            node.off(cc.Node.EventType.TOUCH_START, this.touchBeginHandler, this);
            node.off(cc.Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
            node.off(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
            node.off(cc.Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
            node.off(cc.Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
            node.off(cc.Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
            node.off(cc.Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
            node.off(cc.Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
            this._touchListener = null;
        };
        InputProcessor.prototype.getAllTouches = function (touchIds) {
            touchIds = touchIds || new Array();
            var cnt = this._touches.length;
            for (var i = 0; i < cnt; i++) {
                var ti = this._touches[i];
                if (ti.touchId != -1) touchIds.push(ti.touchId);
            }
            return touchIds;
        };
        InputProcessor.prototype.getTouchPosition = function (touchId) {
            if (touchId === undefined) touchId = -1;
            var cnt = this._touches.length;
            for (var i = 0; i < cnt; i++) {
                var ti = this._touches[i];
                if (ti.touchId != -1 && (touchId == -1 || ti.touchId == touchId)) return ti.pos;
            }
            return cc.Vec2.ZERO;
        };
        InputProcessor.prototype.getTouchTarget = function () {
            var cnt = this._touches.length;
            for (var i = 0; i < cnt; i++) {
                var ti = this._touches[i];
                if (ti.touchId != -1) return ti.target;
            }
            return null;
        };
        InputProcessor.prototype.addTouchMonitor = function (touchId, target) {
            var ti = this.getInfo(touchId, false);
            if (!ti) return;
            var index = ti.touchMonitors.indexOf(target);
            if (index == -1) ti.touchMonitors.push(target);
        };
        InputProcessor.prototype.removeTouchMonitor = function (target) {
            var cnt = this._touches.length;
            for (var i = 0; i < cnt; i++) {
                var ti = this._touches[i];
                var index = ti.touchMonitors.indexOf(target);
                if (index != -1) ti.touchMonitors.splice(index, 1);
            }
        };
        InputProcessor.prototype.cancelClick = function (touchId) {
            var ti = this.getInfo(touchId, false);
            if (ti) ti.clickCancelled = true;
        };
        InputProcessor.prototype.simulateClick = function (target) {
            var evt;
            evt = fgui.Event._borrow(fgui.Event.TOUCH_BEGIN, true);
            evt.initiator = target;
            evt.pos.set(target.localToGlobal());
            evt.touchId = 0;
            evt.clickCount = 1;
            evt.button = 0;
            evt._processor = this;
            if (this._captureCallback) this._captureCallback.call(this._owner, evt);
            target.node.dispatchEvent(evt);
            evt.unuse();
            evt.type = fgui.Event.TOUCH_END;
            evt.bubbles = true;
            target.node.dispatchEvent(evt);
            evt.unuse();
            evt.type = fgui.Event.CLICK;
            evt.bubbles = true;
            target.node.dispatchEvent(evt);
            fgui.Event._return(evt);
        };
        InputProcessor.prototype.touchBeginHandler = function (touch, evt) {
            var ti = this.updateInfo(touch.getID(), touch.getLocation(), touch);
            this._touchListener.setSwallowTouches(ti.target != this._owner);
            this.setBegin(ti);
            var evt2 = this.getEvent(ti, ti.target, fgui.Event.TOUCH_BEGIN, true);
            if (this._captureCallback) this._captureCallback.call(this._owner, evt2);
            ti.target.node.dispatchEvent(evt2);
            this.handleRollOver(ti, ti.target);
            return true;
        };
        InputProcessor.prototype.touchMoveHandler = function (touch, evt) {
            var ti = this.updateInfo(touch.getID(), touch.getLocation(), touch);
            this.handleRollOver(ti, ti.target);
            if (ti.began) {
                var evt2 = this.getEvent(ti, ti.target, fgui.Event.TOUCH_MOVE, false);
                var done = false;
                var cnt = ti.touchMonitors.length;
                for (var i = 0; i < cnt; i++) {
                    var mm = ti.touchMonitors[i];
                    if (mm.node == null || !mm.node.activeInHierarchy) continue;
                    evt2.unuse();
                    evt2.type = fgui.Event.TOUCH_MOVE;
                    mm.node.dispatchEvent(evt2);
                    if (mm == this._owner) done = true;
                }
                if (!done && this.node != null) {
                    evt2.unuse();
                    evt2.type = fgui.Event.TOUCH_MOVE;
                    this.node.dispatchEvent(evt2);
                }
                fgui.Event._return(evt2);
            }
        };
        InputProcessor.prototype.touchEndHandler = function (touch, evt) {
            var ti = this.updateInfo(touch.getID(), touch.getLocation(), touch);
            this.setEnd(ti);
            var evt2 = this.getEvent(ti, ti.target, fgui.Event.TOUCH_END, false);
            var cnt = ti.touchMonitors.length;
            for (var i = 0; i < cnt; i++) {
                var mm = ti.touchMonitors[i];
                if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || mm instanceof fgui.GComponent && mm.isAncestorOf(ti.target)) continue;
                evt2.unuse();
                evt2.type = fgui.Event.TOUCH_END;
                mm.node.dispatchEvent(evt2);
            }
            ti.touchMonitors.length = 0;
            if (ti.target && ti.target.node != null) {
                if (ti.target instanceof fgui.GRichTextField) ti.target.node.getComponent(cc.RichText)["_onTouchEnded"](evt2);
                evt2.unuse();
                evt2.type = fgui.Event.TOUCH_END;
                evt2.bubbles = true;
                ti.target.node.dispatchEvent(evt2);
            }
            fgui.Event._return(evt2);
            ti.target = this.clickTest(ti);
            if (ti.target) {
                evt2 = this.getEvent(ti, ti.target, fgui.Event.CLICK, true);
                ti.target.node.dispatchEvent(evt2);
                fgui.Event._return(evt2);
            }
            if (cc.sys.isMobile) this.handleRollOver(ti, null);else this.handleRollOver(ti, ti.target);
            ti.target = null;
            ti.touchId = -1;
            ti.button = -1;
        };
        InputProcessor.prototype.touchCancelHandler = function (touch, evt) {
            var ti = this.updateInfo(touch.getID(), touch.getLocation(), touch);
            var evt2 = this.getEvent(ti, ti.target, fgui.Event.TOUCH_END, false);
            var cnt = ti.touchMonitors.length;
            for (var i = 0; i < cnt; i++) {
                var mm = ti.touchMonitors[i];
                if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || mm instanceof fgui.GComponent && mm.isAncestorOf(ti.target)) continue;
                evt2.initiator = mm;
                mm.node.dispatchEvent(evt2);
            }
            ti.touchMonitors.length = 0;
            if (ti.target && ti.target.node != null) {
                evt2.bubbles = true;
                ti.target.node.dispatchEvent(evt2);
            }
            fgui.Event._return(evt2);
            this.handleRollOver(ti, null);
            ti.target = null;
            ti.touchId = -1;
            ti.button = -1;
        };
        InputProcessor.prototype.mouseDownHandler = function (evt) {
            var ti = this.getInfo(0, true);
            ti.button = evt.getButton();
        };
        InputProcessor.prototype.mouseUpHandler = function (evt) {
            var ti = this.getInfo(0, true);
            ti.button = evt.getButton();
        };
        InputProcessor.prototype.mouseMoveHandler = function (evt) {
            var ti = this.getInfo(0, false);
            if (ti && Math.abs(ti.pos.x - evt.getLocationX()) < 1 && Math.abs(ti.pos.y - (fgui.GRoot.inst.height - evt.getLocationY())) < 1) return;
            ti = this.updateInfo(0, evt.getLocation());
            this.handleRollOver(ti, ti.target);
            if (ti.began) {
                var evt2 = this.getEvent(ti, ti.target, fgui.Event.TOUCH_MOVE, false);
                var done = false;
                var cnt = ti.touchMonitors.length;
                for (var i = 0; i < cnt; i++) {
                    var mm = ti.touchMonitors[i];
                    if (mm.node == null || !mm.node.activeInHierarchy) continue;
                    evt2.initiator = mm;
                    mm.node.dispatchEvent(evt2);
                    if (mm == this._owner) done = true;
                }
                if (!done && this.node != null) {
                    evt2.initiator = this._owner;
                    this.node.dispatchEvent(evt2);
                    fgui.Event._return(evt2);
                }
                fgui.Event._return(evt2);
            }
        };
        InputProcessor.prototype.mouseWheelHandler = function (evt) {
            var ti = this.updateInfo(0, evt.getLocation());
            ti.mouseWheelDelta = Math.max(evt.getScrollX(), evt.getScrollY());
            var evt2 = this.getEvent(ti, ti.target, fgui.Event.MOUSE_WHEEL, true);
            ti.target.node.dispatchEvent(evt2);
            fgui.Event._return(evt2);
        };
        InputProcessor.prototype.updateInfo = function (touchId, pos, touch) {
            var camera = cc.Camera.findCamera(this.node);
            if (camera) camera.getScreenToWorldPoint(pos, this._touchPos);else this._touchPos.set(pos);
            var target = this._owner.hitTest(this._touchPos);
            if (!target) target = this._owner;
            var ti = this.getInfo(touchId);
            ti.target = target;
            ti.pos.x = pos.x;
            ti.pos.y = fgui.GRoot.inst.height - pos.y;
            ti.button = cc.Event.EventMouse.BUTTON_LEFT;
            ti.touch = touch;
            return ti;
        };
        InputProcessor.prototype.getInfo = function (touchId, createIfNotExisits) {
            if (createIfNotExisits === undefined) createIfNotExisits = true;
            var ret = null;
            var cnt = this._touches.length;
            for (var i = 0; i < cnt; i++) {
                var ti = this._touches[i];
                if (ti.touchId == touchId) return ti;else if (ti.touchId == -1) ret = ti;
            }
            if (!ret) {
                if (!createIfNotExisits) return null;
                ret = new TouchInfo();
                this._touches.push(ret);
            }
            ret.touchId = touchId;
            return ret;
        };
        InputProcessor.prototype.setBegin = function (ti) {
            ti.began = true;
            ti.clickCancelled = false;
            ti.downPos.set(ti.pos);
            ti.downTargets.length = 0;
            var obj = ti.target;
            while (obj != null) {
                ti.downTargets.push(obj);
                obj = obj.findParent();
            }
        };
        InputProcessor.prototype.setEnd = function (ti) {
            ti.began = false;
            var now = fgui.ToolSet.getTime();
            var elapsed = now - ti.lastClickTime;
            if (elapsed < 0.45) {
                if (ti.clickCount == 2) ti.clickCount = 1;else ti.clickCount++;
            } else ti.clickCount = 1;
            ti.lastClickTime = now;
        };
        InputProcessor.prototype.clickTest = function (ti) {
            if (ti.downTargets.length == 0 || ti.clickCancelled || Math.abs(ti.pos.x - ti.downPos.x) > 50 || Math.abs(ti.pos.y - ti.downPos.y) > 50) return null;
            var obj = ti.downTargets[0];
            if (obj && obj.node != null && obj.node.activeInHierarchy) return obj;
            obj = ti.target;
            while (obj != null) {
                var index = ti.downTargets.indexOf(obj);
                if (index != -1 && obj.node != null && obj.node.activeInHierarchy) break;
                obj = obj.findParent();
            }
            return obj;
        };
        InputProcessor.prototype.handleRollOver = function (ti, target) {
            if (ti.lastRollOver == target) return;
            var element = ti.lastRollOver;
            while (element != null && element.node != null) {
                this._rollOutChain.push(element);
                element = element.findParent();
            }
            element = target;
            while (element != null && element.node != null) {
                var i = this._rollOutChain.indexOf(element);
                if (i != -1) {
                    this._rollOutChain.length = i;
                    break;
                }
                this._rollOverChain.push(element);
                element = element.findParent();
            }
            ti.lastRollOver = target;
            var cnt = this._rollOutChain.length;
            for (var i = 0; i < cnt; i++) {
                element = this._rollOutChain[i];
                if (element.node != null && element.node.activeInHierarchy) {
                    var evt = this.getEvent(ti, element, fgui.Event.ROLL_OUT, false);
                    element.node.dispatchEvent(evt);
                    fgui.Event._return(evt);
                }
            }
            cnt = this._rollOverChain.length;
            for (var i = 0; i < cnt; i++) {
                element = this._rollOverChain[i];
                if (element.node != null && element.node.activeInHierarchy) {
                    var evt = this.getEvent(ti, element, fgui.Event.ROLL_OVER, false);
                    element.node.dispatchEvent(evt);
                    fgui.Event._return(evt);
                }
            }
            this._rollOutChain.length = 0;
            this._rollOverChain.length = 0;
        };
        InputProcessor.prototype.getEvent = function (ti, target, type, bubbles) {
            var evt = fgui.Event._borrow(type, bubbles);
            evt.initiator = target;
            evt.touch = ti.touch;
            evt.pos.set(ti.pos);
            evt.touchId = ti.touch ? ti.touch.getID() : 0;
            evt.clickCount = ti.clickCount;
            evt.button = ti.button;
            evt.mouseWheelDelta = ti.mouseWheelDelta;
            evt._processor = this;
            return evt;
        };
        return InputProcessor;
    }(cc.Component);
    fgui.InputProcessor = InputProcessor;
    var TouchInfo = function () {
        function TouchInfo() {
            this.pos = new cc.Vec2();
            this.touchId = 0;
            this.clickCount = 0;
            this.mouseWheelDelta = 0;
            this.button = -1;
            this.downPos = new cc.Vec2();
            this.began = false;
            this.clickCancelled = false;
            this.lastClickTime = 0;
            this.downTargets = new Array();
            this.touchMonitors = new Array();
        }
        return TouchInfo;
    }();
    ;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearBase = function () {
        function GearBase(owner) {
            this._owner = owner;
        }
        GearBase.create = function (owner, index) {
            if (!GearBase.Classes) GearBase.Classes = [fgui.GearDisplay, fgui.GearXY, fgui.GearSize, fgui.GearLook, fgui.GearColor, fgui.GearAnimation, fgui.GearText, fgui.GearIcon, fgui.GearDisplay2, fgui.GearFontSize];
            return new GearBase.Classes[index](owner);
        };
        GearBase.prototype.dispose = function () {
            if (this._tweenConfig != null && this._tweenConfig._tweener != null) {
                this._tweenConfig._tweener.kill();
                this._tweenConfig._tweener = null;
            }
        };
        Object.defineProperty(GearBase.prototype, "controller", {
            get: function get() {
                return this._controller;
            },
            set: function set(val) {
                if (val != this._controller) {
                    this._controller = val;
                    if (this._controller) this.init();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GearBase.prototype, "tweenConfig", {
            get: function get() {
                if (this._tweenConfig == null) this._tweenConfig = new GearTweenConfig();
                return this._tweenConfig;
            },
            enumerable: false,
            configurable: true
        });
        GearBase.prototype.setup = function (buffer) {
            this._controller = this._owner.parent.getControllerAt(buffer.readShort());
            this.init();
            var i;
            var page;
            var cnt = buffer.readShort();
            if (this instanceof fgui.GearDisplay) {
                this.pages = buffer.readSArray(cnt);
            } else if (this instanceof fgui.GearDisplay2) {
                this.pages = buffer.readSArray(cnt);
            } else {
                for (i = 0; i < cnt; i++) {
                    page = buffer.readS();
                    if (page == null) continue;
                    this.addStatus(page, buffer);
                }
                if (buffer.readBool()) this.addStatus(null, buffer);
            }
            if (buffer.readBool()) {
                this._tweenConfig = new GearTweenConfig();
                this._tweenConfig.easeType = buffer.readByte();
                this._tweenConfig.duration = buffer.readFloat();
                this._tweenConfig.delay = buffer.readFloat();
            }
            if (buffer.version >= 2) {
                if (this instanceof fgui.GearXY) {
                    if (buffer.readBool()) {
                        this.positionsInPercent = true;
                        for (i = 0; i < cnt; i++) {
                            page = buffer.readS();
                            if (page == null) continue;
                            this.addExtStatus(page, buffer);
                        }
                        if (buffer.readBool()) this.addExtStatus(null, buffer);
                    }
                } else if (this instanceof fgui.GearDisplay2) this.condition = buffer.readByte();
            }
        };
        GearBase.prototype.updateFromRelations = function (dx, dy) {};
        GearBase.prototype.addStatus = function (pageId, buffer) {};
        GearBase.prototype.init = function () {};
        GearBase.prototype.apply = function () {};
        GearBase.prototype.updateState = function () {};
        GearBase.disableAllTweenEffect = false;
        return GearBase;
    }();
    fgui.GearBase = GearBase;
    var GearTweenConfig = function () {
        function GearTweenConfig() {
            this.tween = true;
            this.easeType = fgui.EaseType.QuadOut;
            this.duration = 0.3;
            this.delay = 0;
        }
        return GearTweenConfig;
    }();
    fgui.GearTweenConfig = GearTweenConfig;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearAnimation = function (_super) {
        __extends(GearAnimation, _super);
        function GearAnimation(owner) {
            return _super.call(this, owner) || this;
        }
        GearAnimation.prototype.init = function () {
            this._default = new GearAnimationValue(this._owner.getProp(fgui.ObjectPropID.Playing), this._owner.getProp(fgui.ObjectPropID.Frame));
            this._storage = {};
        };
        GearAnimation.prototype.addStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else {
                gv = new GearAnimationValue();
                this._storage[pageId] = gv;
            }
            gv.playing = buffer.readBool();
            gv.frame = buffer.readInt();
        };
        GearAnimation.prototype.apply = function () {
            this._owner._gearLocked = true;
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) gv = this._default;
            this._owner.setProp(fgui.ObjectPropID.Playing, gv.playing);
            this._owner.setProp(fgui.ObjectPropID.Frame, gv.frame);
            this._owner._gearLocked = false;
        };
        GearAnimation.prototype.updateState = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) {
                gv = new GearAnimationValue();
                this._storage[this._controller.selectedPageId] = gv;
            }
            gv.playing = this._owner.getProp(fgui.ObjectPropID.Playing);
            gv.frame = this._owner.getProp(fgui.ObjectPropID.Frame);
        };
        return GearAnimation;
    }(fgui.GearBase);
    fgui.GearAnimation = GearAnimation;
    var GearAnimationValue = function () {
        function GearAnimationValue(playing, frame) {
            if (playing === void 0) {
                playing = true;
            }
            if (frame === void 0) {
                frame = 0;
            }
            this.playing = playing;
            this.frame = frame;
        }
        return GearAnimationValue;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearColor = function (_super) {
        __extends(GearColor, _super);
        function GearColor(owner) {
            return _super.call(this, owner) || this;
        }
        GearColor.prototype.init = function () {
            this._default = new GearColorValue(this._owner.getProp(fgui.ObjectPropID.Color), this._owner.getProp(fgui.ObjectPropID.OutlineColor));
            this._storage = {};
        };
        GearColor.prototype.addStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else {
                gv = new GearColorValue();
                this._storage[pageId] = gv;
            }
            gv.color = buffer.readColor();
            gv.strokeColor = buffer.readColor();
        };
        GearColor.prototype.apply = function () {
            this._owner._gearLocked = true;
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) gv = this._default;
            this._owner.setProp(fgui.ObjectPropID.Color, gv.color);
            if (gv.strokeColor != null) this._owner.setProp(fgui.ObjectPropID.OutlineColor, gv.strokeColor);
            this._owner._gearLocked = false;
        };
        GearColor.prototype.updateState = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) this._storage[this._controller.selectedPageId] = gv = new GearColorValue();
            gv.color = this._owner.getProp(fgui.ObjectPropID.Color);
            gv.strokeColor = this._owner.getProp(fgui.ObjectPropID.OutlineColor);
        };
        return GearColor;
    }(fgui.GearBase);
    fgui.GearColor = GearColor;
    var GearColorValue = function () {
        function GearColorValue(color, strokeColor) {
            if (color === void 0) {
                color = null;
            }
            if (strokeColor === void 0) {
                strokeColor = null;
            }
            this.color = color;
            this.strokeColor = strokeColor;
        }
        return GearColorValue;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearDisplay = function (_super) {
        __extends(GearDisplay, _super);
        function GearDisplay(owner) {
            var _this = _super.call(this, owner) || this;
            _this._displayLockToken = 1;
            _this._visible = 0;
            return _this;
        }
        GearDisplay.prototype.init = function () {
            this.pages = null;
        };
        GearDisplay.prototype.apply = function () {
            this._displayLockToken++;
            if (this._displayLockToken == 0) this._displayLockToken = 1;
            if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };
        GearDisplay.prototype.addLock = function () {
            this._visible++;
            return this._displayLockToken;
        };
        GearDisplay.prototype.releaseLock = function (token) {
            if (token == this._displayLockToken) this._visible--;
        };
        Object.defineProperty(GearDisplay.prototype, "connected", {
            get: function get() {
                return this._controller == null || this._visible > 0;
            },
            enumerable: false,
            configurable: true
        });
        return GearDisplay;
    }(fgui.GearBase);
    fgui.GearDisplay = GearDisplay;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearDisplay2 = function (_super) {
        __extends(GearDisplay2, _super);
        function GearDisplay2(owner) {
            var _this = _super.call(this, owner) || this;
            _this._visible = 0;
            return _this;
        }
        GearDisplay2.prototype.init = function () {
            this.pages = null;
        };
        GearDisplay2.prototype.apply = function () {
            if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };
        GearDisplay2.prototype.evaluate = function (connected) {
            var v = this._controller == null || this._visible > 0;
            if (this.condition == 0) v = v && connected;else v = v || connected;
            return v;
        };
        return GearDisplay2;
    }(fgui.GearBase);
    fgui.GearDisplay2 = GearDisplay2;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearFontSize = function (_super) {
        __extends(GearFontSize, _super);
        function GearFontSize(owner) {
            var _this = _super.call(this, owner) || this;
            _this._default = 0;
            return _this;
        }
        GearFontSize.prototype.init = function () {
            this._default = this._owner.getProp(fgui.ObjectPropID.FontSize);
            this._storage = {};
        };
        GearFontSize.prototype.addStatus = function (pageId, buffer) {
            if (pageId == null) this._default = buffer.readInt();else this._storage[pageId] = buffer.readInt();
        };
        GearFontSize.prototype.apply = function () {
            this._owner._gearLocked = true;
            var data = this._storage[this._controller.selectedPageId];
            if (data != undefined) this._owner.setProp(fgui.ObjectPropID.FontSize, data);else this._owner.setProp(fgui.ObjectPropID.FontSize, this._default);
            this._owner._gearLocked = false;
        };
        GearFontSize.prototype.updateState = function () {
            this._storage[this._controller.selectedPageId] = this._owner.text;
        };
        return GearFontSize;
    }(fgui.GearBase);
    fgui.GearFontSize = GearFontSize;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearIcon = function (_super) {
        __extends(GearIcon, _super);
        function GearIcon(owner) {
            return _super.call(this, owner) || this;
        }
        GearIcon.prototype.init = function () {
            this._default = this._owner.icon;
            this._storage = {};
        };
        GearIcon.prototype.addStatus = function (pageId, buffer) {
            if (pageId == null) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };
        GearIcon.prototype.apply = function () {
            this._owner._gearLocked = true;
            var data = this._storage[this._controller.selectedPageId];
            if (data !== undefined) this._owner.icon = data;else this._owner.icon = this._default;
            this._owner._gearLocked = false;
        };
        GearIcon.prototype.updateState = function () {
            this._storage[this._controller.selectedPageId] = this._owner.icon;
        };
        return GearIcon;
    }(fgui.GearBase);
    fgui.GearIcon = GearIcon;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearLook = function (_super) {
        __extends(GearLook, _super);
        function GearLook(owner) {
            return _super.call(this, owner) || this;
        }
        GearLook.prototype.init = function () {
            this._default = new GearLookValue(this._owner.alpha, this._owner.rotation, this._owner.grayed, this._owner.touchable);
            this._storage = {};
        };
        GearLook.prototype.addStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else {
                gv = new GearLookValue();
                this._storage[pageId] = gv;
            }
            gv.alpha = buffer.readFloat();
            gv.rotation = buffer.readFloat();
            gv.grayed = buffer.readBool();
            gv.touchable = buffer.readBool();
        };
        GearLook.prototype.apply = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) gv = this._default;
            if (this._tweenConfig && this._tweenConfig.tween && !fgui.UIPackage._constructing && !fgui.GearBase.disableAllTweenEffect) {
                this._owner._gearLocked = true;
                this._owner.grayed = gv.grayed;
                this._owner.touchable = gv.touchable;
                this._owner._gearLocked = false;
                if (this._tweenConfig._tweener != null) {
                    if (this._tweenConfig._tweener.endValue.x != gv.alpha || this._tweenConfig._tweener.endValue.y != gv.rotation) {
                        this._tweenConfig._tweener.kill(true);
                        this._tweenConfig._tweener = null;
                    } else return;
                }
                var a = gv.alpha != this._owner.alpha;
                var b = gv.rotation != this._owner.rotation;
                if (a || b) {
                    if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
                    this._tweenConfig._tweener = fgui.GTween.to2(this._owner.alpha, this._owner.rotation, gv.alpha, gv.rotation, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
                }
            } else {
                this._owner._gearLocked = true;
                this._owner.grayed = gv.grayed;
                this._owner.touchable = gv.touchable;
                this._owner.alpha = gv.alpha;
                this._owner.rotation = gv.rotation;
                this._owner._gearLocked = false;
            }
        };
        GearLook.prototype.__tweenUpdate = function (tweener) {
            var flag = tweener.userData;
            this._owner._gearLocked = true;
            if ((flag & 1) != 0) this._owner.alpha = tweener.value.x;
            if ((flag & 2) != 0) this._owner.rotation = tweener.value.y;
            this._owner._gearLocked = false;
        };
        GearLook.prototype.__tweenComplete = function () {
            if (this._tweenConfig._displayLockToken != 0) {
                this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
                this._tweenConfig._displayLockToken = 0;
            }
            this._tweenConfig._tweener = null;
        };
        GearLook.prototype.updateState = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) {
                gv = new GearLookValue();
                this._storage[this._controller.selectedPageId] = gv;
            }
            gv.alpha = this._owner.alpha;
            gv.rotation = this._owner.rotation;
            gv.grayed = this._owner.grayed;
            gv.touchable = this._owner.touchable;
        };
        return GearLook;
    }(fgui.GearBase);
    fgui.GearLook = GearLook;
    var GearLookValue = function () {
        function GearLookValue(alpha, rotation, grayed, touchable) {
            if (alpha === void 0) {
                alpha = 0;
            }
            if (rotation === void 0) {
                rotation = 0;
            }
            if (grayed === void 0) {
                grayed = false;
            }
            if (touchable === void 0) {
                touchable = true;
            }
            this.alpha = alpha;
            this.rotation = rotation;
            this.grayed = grayed;
            this.touchable = touchable;
        }
        return GearLookValue;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearSize = function (_super) {
        __extends(GearSize, _super);
        function GearSize(owner) {
            return _super.call(this, owner) || this;
        }
        GearSize.prototype.init = function () {
            this._default = new GearSizeValue(this._owner.width, this._owner.height, this._owner.scaleX, this._owner.scaleY);
            this._storage = {};
        };
        GearSize.prototype.addStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else {
                gv = new GearSizeValue();
                this._storage[pageId] = gv;
            }
            gv.width = buffer.readInt();
            gv.height = buffer.readInt();
            gv.scaleX = buffer.readFloat();
            gv.scaleY = buffer.readFloat();
        };
        GearSize.prototype.apply = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) gv = this._default;
            if (this._tweenConfig && this._tweenConfig.tween && !fgui.UIPackage._constructing && !fgui.GearBase.disableAllTweenEffect) {
                if (this._tweenConfig._tweener != null) {
                    if (this._tweenConfig._tweener.endValue.x != gv.width || this._tweenConfig._tweener.endValue.y != gv.height || this._tweenConfig._tweener.endValue.z != gv.scaleX || this._tweenConfig._tweener.endValue.w != gv.scaleY) {
                        this._tweenConfig._tweener.kill(true);
                        this._tweenConfig._tweener = null;
                    } else return;
                }
                var a = gv.width != this._owner.width || gv.height != this._owner.height;
                var b = gv.scaleX != this._owner.scaleX || gv.scaleY != this._owner.scaleY;
                if (a || b) {
                    if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
                    this._tweenConfig._tweener = fgui.GTween.to4(this._owner.width, this._owner.height, this._owner.scaleX, this._owner.scaleY, gv.width, gv.height, gv.scaleX, gv.scaleY, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
                }
            } else {
                this._owner._gearLocked = true;
                this._owner.setSize(gv.width, gv.height, this._owner.gearXY.controller == this._controller);
                this._owner.setScale(gv.scaleX, gv.scaleY);
                this._owner._gearLocked = false;
            }
        };
        GearSize.prototype.__tweenUpdate = function (tweener) {
            var flag = tweener.userData;
            this._owner._gearLocked = true;
            if ((flag & 1) != 0) this._owner.setSize(tweener.value.x, tweener.value.y, this._owner.checkGearController(1, this._controller));
            if ((flag & 2) != 0) this._owner.setScale(tweener.value.z, tweener.value.w);
            this._owner._gearLocked = false;
        };
        GearSize.prototype.__tweenComplete = function () {
            if (this._tweenConfig._displayLockToken != 0) {
                this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
                this._tweenConfig._displayLockToken = 0;
            }
            this._tweenConfig._tweener = null;
        };
        GearSize.prototype.updateState = function () {
            var gv = this._storage[this._controller.selectedPageId];
            if (!gv) {
                gv = new GearSizeValue();
                this._storage[this._controller.selectedPageId] = gv;
            }
            gv.width = this._owner.width;
            gv.height = this._owner.height;
            gv.scaleX = this._owner.scaleX;
            gv.scaleY = this._owner.scaleY;
        };
        GearSize.prototype.updateFromRelations = function (dx, dy) {
            if (this._controller == null || this._storage == null) return;
            for (var key in this._storage) {
                var gv = this._storage[key];
                gv.width += dx;
                gv.height += dy;
            }
            this._default.width += dx;
            this._default.height += dy;
            this.updateState();
        };
        return GearSize;
    }(fgui.GearBase);
    fgui.GearSize = GearSize;
    var GearSizeValue = function () {
        function GearSizeValue(width, height, scaleX, scaleY) {
            if (width === void 0) {
                width = 0;
            }
            if (height === void 0) {
                height = 0;
            }
            if (scaleX === void 0) {
                scaleX = 0;
            }
            if (scaleY === void 0) {
                scaleY = 0;
            }
            this.width = width;
            this.height = height;
            this.scaleX = scaleX;
            this.scaleY = scaleY;
        }
        return GearSizeValue;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearText = function (_super) {
        __extends(GearText, _super);
        function GearText(owner) {
            return _super.call(this, owner) || this;
        }
        GearText.prototype.init = function () {
            this._default = this._owner.text;
            this._storage = {};
        };
        GearText.prototype.addStatus = function (pageId, buffer) {
            if (pageId == null) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };
        GearText.prototype.apply = function () {
            this._owner._gearLocked = true;
            var data = this._storage[this._controller.selectedPageId];
            if (data !== undefined) this._owner.text = data;else this._owner.text = this._default;
            this._owner._gearLocked = false;
        };
        GearText.prototype.updateState = function () {
            this._storage[this._controller.selectedPageId] = this._owner.text;
        };
        return GearText;
    }(fgui.GearBase);
    fgui.GearText = GearText;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GearXY = function (_super) {
        __extends(GearXY, _super);
        function GearXY(owner) {
            return _super.call(this, owner) || this;
        }
        GearXY.prototype.init = function () {
            this._default = {
                x: this._owner.x, y: this._owner.y,
                px: this._owner.x / this._owner.parent.width, py: this._owner.y / this._owner.parent.height
            };
            this._storage = {};
        };
        GearXY.prototype.addStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else {
                gv = {};
                this._storage[pageId] = gv;
            }
            gv.x = buffer.readInt();
            gv.y = buffer.readInt();
        };
        GearXY.prototype.addExtStatus = function (pageId, buffer) {
            var gv;
            if (pageId == null) gv = this._default;else gv = this._storage[pageId];
            gv.px = buffer.readFloat();
            gv.py = buffer.readFloat();
        };
        GearXY.prototype.apply = function () {
            var pt = this._storage[this._controller.selectedPageId];
            if (!pt) pt = this._default;
            var ex;
            var ey;
            if (this.positionsInPercent && this._owner.parent) {
                ex = pt.px * this._owner.parent.width;
                ey = pt.py * this._owner.parent.height;
            } else {
                ex = pt.x;
                ey = pt.y;
            }
            if (this._tweenConfig != null && this._tweenConfig.tween && !fgui.UIPackage._constructing && !fgui.GearBase.disableAllTweenEffect) {
                if (this._tweenConfig._tweener != null) {
                    if (this._tweenConfig._tweener.endValue.x != ex || this._tweenConfig._tweener.endValue.y != ey) {
                        this._tweenConfig._tweener.kill(true);
                        this._tweenConfig._tweener = null;
                    } else return;
                }
                var ox = this._owner.x;
                var oy = this._owner.y;
                if (ox != ex || oy != ey) {
                    if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
                    this._tweenConfig._tweener = fgui.GTween.to2(ox, oy, ex, ey, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
                }
            } else {
                this._owner._gearLocked = true;
                this._owner.setPosition(ex, ey);
                this._owner._gearLocked = false;
            }
        };
        GearXY.prototype.__tweenUpdate = function (tweener) {
            this._owner._gearLocked = true;
            this._owner.setPosition(tweener.value.x, tweener.value.y);
            this._owner._gearLocked = false;
        };
        GearXY.prototype.__tweenComplete = function () {
            if (this._tweenConfig._displayLockToken != 0) {
                this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
                this._tweenConfig._displayLockToken = 0;
            }
            this._tweenConfig._tweener = null;
        };
        GearXY.prototype.updateState = function () {
            var pt = this._storage[this._controller.selectedPageId];
            if (!pt) {
                pt = {};
                this._storage[this._controller.selectedPageId] = pt;
            }
            pt.x = this._owner.x;
            pt.y = this._owner.y;
            pt.px = this._owner.x / this._owner.parent.width;
            pt.py = this._owner.y / this._owner.parent.height;
        };
        GearXY.prototype.updateFromRelations = function (dx, dy) {
            if (this._controller == null || this._storage == null || this.positionsInPercent) return;
            for (var key in this._storage) {
                var pt = this._storage[key];
                pt.x += dx;
                pt.y += dy;
            }
            this._default.x += dx;
            this._default.y += dy;
            this.updateState();
        };
        return GearXY;
    }(fgui.GearBase);
    fgui.GearXY = GearXY;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var EaseManager = function () {
        function EaseManager() {}
        EaseManager.evaluate = function (easeType, time, duration, overshootOrAmplitude, period) {
            switch (easeType) {
                case fgui.EaseType.Linear:
                    return time / duration;
                case fgui.EaseType.SineIn:
                    return -Math.cos(time / duration * EaseManager._PiOver2) + 1;
                case fgui.EaseType.SineOut:
                    return Math.sin(time / duration * EaseManager._PiOver2);
                case fgui.EaseType.SineInOut:
                    return -0.5 * (Math.cos(Math.PI * time / duration) - 1);
                case fgui.EaseType.QuadIn:
                    return (time /= duration) * time;
                case fgui.EaseType.QuadOut:
                    return -(time /= duration) * (time - 2);
                case fgui.EaseType.QuadInOut:
                    if ((time /= duration * 0.5) < 1) return 0.5 * time * time;
                    return -0.5 * (--time * (time - 2) - 1);
                case fgui.EaseType.CubicIn:
                    return (time /= duration) * time * time;
                case fgui.EaseType.CubicOut:
                    return (time = time / duration - 1) * time * time + 1;
                case fgui.EaseType.CubicInOut:
                    if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time;
                    return 0.5 * ((time -= 2) * time * time + 2);
                case fgui.EaseType.QuartIn:
                    return (time /= duration) * time * time * time;
                case fgui.EaseType.QuartOut:
                    return -((time = time / duration - 1) * time * time * time - 1);
                case fgui.EaseType.QuartInOut:
                    if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time;
                    return -0.5 * ((time -= 2) * time * time * time - 2);
                case fgui.EaseType.QuintIn:
                    return (time /= duration) * time * time * time * time;
                case fgui.EaseType.QuintOut:
                    return (time = time / duration - 1) * time * time * time * time + 1;
                case fgui.EaseType.QuintInOut:
                    if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time * time;
                    return 0.5 * ((time -= 2) * time * time * time * time + 2);
                case fgui.EaseType.ExpoIn:
                    return time == 0 ? 0 : Math.pow(2, 10 * (time / duration - 1));
                case fgui.EaseType.ExpoOut:
                    if (time == duration) return 1;
                    return -Math.pow(2, -10 * time / duration) + 1;
                case fgui.EaseType.ExpoInOut:
                    if (time == 0) return 0;
                    if (time == duration) return 1;
                    if ((time /= duration * 0.5) < 1) return 0.5 * Math.pow(2, 10 * (time - 1));
                    return 0.5 * (-Math.pow(2, -10 * --time) + 2);
                case fgui.EaseType.CircIn:
                    return -(Math.sqrt(1 - (time /= duration) * time) - 1);
                case fgui.EaseType.CircOut:
                    return Math.sqrt(1 - (time = time / duration - 1) * time);
                case fgui.EaseType.CircInOut:
                    if ((time /= duration * 0.5) < 1) return -0.5 * (Math.sqrt(1 - time * time) - 1);
                    return 0.5 * (Math.sqrt(1 - (time -= 2) * time) + 1);
                case fgui.EaseType.ElasticIn:
                    var s0;
                    if (time == 0) return 0;
                    if ((time /= duration) == 1) return 1;
                    if (period == 0) period = duration * 0.3;
                    if (overshootOrAmplitude < 1) {
                        overshootOrAmplitude = 1;
                        s0 = period / 4;
                    } else s0 = period / EaseManager._TwoPi * Math.asin(1 / overshootOrAmplitude);
                    return -(overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s0) * EaseManager._TwoPi / period));
                case fgui.EaseType.ElasticOut:
                    var s1;
                    if (time == 0) return 0;
                    if ((time /= duration) == 1) return 1;
                    if (period == 0) period = duration * 0.3;
                    if (overshootOrAmplitude < 1) {
                        overshootOrAmplitude = 1;
                        s1 = period / 4;
                    } else s1 = period / EaseManager._TwoPi * Math.asin(1 / overshootOrAmplitude);
                    return overshootOrAmplitude * Math.pow(2, -10 * time) * Math.sin((time * duration - s1) * EaseManager._TwoPi / period) + 1;
                case fgui.EaseType.ElasticInOut:
                    var s;
                    if (time == 0) return 0;
                    if ((time /= duration * 0.5) == 2) return 1;
                    if (period == 0) period = duration * (0.3 * 1.5);
                    if (overshootOrAmplitude < 1) {
                        overshootOrAmplitude = 1;
                        s = period / 4;
                    } else s = period / EaseManager._TwoPi * Math.asin(1 / overshootOrAmplitude);
                    if (time < 1) return -0.5 * (overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s) * EaseManager._TwoPi / period));
                    return overshootOrAmplitude * Math.pow(2, -10 * (time -= 1)) * Math.sin((time * duration - s) * EaseManager._TwoPi / period) * 0.5 + 1;
                case fgui.EaseType.BackIn:
                    return (time /= duration) * time * ((overshootOrAmplitude + 1) * time - overshootOrAmplitude);
                case fgui.EaseType.BackOut:
                    return (time = time / duration - 1) * time * ((overshootOrAmplitude + 1) * time + overshootOrAmplitude) + 1;
                case fgui.EaseType.BackInOut:
                    if ((time /= duration * 0.5) < 1) return 0.5 * (time * time * (((overshootOrAmplitude *= 1.525) + 1) * time - overshootOrAmplitude));
                    return 0.5 * ((time -= 2) * time * (((overshootOrAmplitude *= 1.525) + 1) * time + overshootOrAmplitude) + 2);
                case fgui.EaseType.BounceIn:
                    return Bounce.easeIn(time, duration);
                case fgui.EaseType.BounceOut:
                    return Bounce.easeOut(time, duration);
                case fgui.EaseType.BounceInOut:
                    return Bounce.easeInOut(time, duration);
                default:
                    return -(time /= duration) * (time - 2);
            }
        };
        EaseManager._PiOver2 = Math.PI * 0.5;
        EaseManager._TwoPi = Math.PI * 2;
        return EaseManager;
    }();
    fgui.EaseManager = EaseManager;
    var Bounce = function () {
        function Bounce() {}
        Bounce.easeIn = function (time, duration) {
            return 1 - Bounce.easeOut(duration - time, duration);
        };
        Bounce.easeOut = function (time, duration) {
            if ((time /= duration) < 1 / 2.75) {
                return 7.5625 * time * time;
            }
            if (time < 2 / 2.75) {
                return 7.5625 * (time -= 1.5 / 2.75) * time + 0.75;
            }
            if (time < 2.5 / 2.75) {
                return 7.5625 * (time -= 2.25 / 2.75) * time + 0.9375;
            }
            return 7.5625 * (time -= 2.625 / 2.75) * time + 0.984375;
        };
        Bounce.easeInOut = function (time, duration) {
            if (time < duration * 0.5) {
                return Bounce.easeIn(time * 2, duration) * 0.5;
            }
            return Bounce.easeOut(time * 2 - duration, duration) * 0.5 + 0.5;
        };
        return Bounce;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var EaseType = function () {
        function EaseType() {}
        EaseType.Linear = 0;
        EaseType.SineIn = 1;
        EaseType.SineOut = 2;
        EaseType.SineInOut = 3;
        EaseType.QuadIn = 4;
        EaseType.QuadOut = 5;
        EaseType.QuadInOut = 6;
        EaseType.CubicIn = 7;
        EaseType.CubicOut = 8;
        EaseType.CubicInOut = 9;
        EaseType.QuartIn = 10;
        EaseType.QuartOut = 11;
        EaseType.QuartInOut = 12;
        EaseType.QuintIn = 13;
        EaseType.QuintOut = 14;
        EaseType.QuintInOut = 15;
        EaseType.ExpoIn = 16;
        EaseType.ExpoOut = 17;
        EaseType.ExpoInOut = 18;
        EaseType.CircIn = 19;
        EaseType.CircOut = 20;
        EaseType.CircInOut = 21;
        EaseType.ElasticIn = 22;
        EaseType.ElasticOut = 23;
        EaseType.ElasticInOut = 24;
        EaseType.BackIn = 25;
        EaseType.BackOut = 26;
        EaseType.BackInOut = 27;
        EaseType.BounceIn = 28;
        EaseType.BounceOut = 29;
        EaseType.BounceInOut = 30;
        EaseType.Custom = 31;
        return EaseType;
    }();
    fgui.EaseType = EaseType;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GPath = function () {
        function GPath() {
            this._segments = new Array();
            this._points = new Array();
        }
        Object.defineProperty(GPath.prototype, "length", {
            get: function get() {
                return this._fullLength;
            },
            enumerable: false,
            configurable: true
        });
        GPath.prototype.create2 = function (pt1, pt2, pt3, pt4) {
            var points = new Array();
            points.push(pt1);
            points.push(pt2);
            if (pt3) points.push(pt3);
            if (pt4) points.push(pt4);
            this.create(points);
        };
        GPath.prototype.create = function (points) {
            this._segments.length = 0;
            this._points.length = 0;
            this._fullLength = 0;
            var cnt = points.length;
            if (cnt == 0) return;
            var splinePoints = GPath.helperPoints;
            splinePoints.length = 0;
            var prev = points[0];
            if (prev.curveType == fgui.CurveType.CRSpline) splinePoints.push(new cc.Vec2(prev.x, prev.y));
            for (var i = 1; i < cnt; i++) {
                var current = points[i];
                if (prev.curveType != fgui.CurveType.CRSpline) {
                    var seg = new Segment();
                    seg.type = prev.curveType;
                    seg.ptStart = this._points.length;
                    if (prev.curveType == fgui.CurveType.Straight) {
                        seg.ptCount = 2;
                        this._points.push(new cc.Vec2(prev.x, prev.y));
                        this._points.push(new cc.Vec2(current.x, current.y));
                    } else if (prev.curveType == fgui.CurveType.Bezier) {
                        seg.ptCount = 3;
                        this._points.push(new cc.Vec2(prev.x, prev.y));
                        this._points.push(new cc.Vec2(current.x, current.y));
                        this._points.push(new cc.Vec2(prev.control1_x, prev.control1_y));
                    } else if (prev.curveType == fgui.CurveType.CubicBezier) {
                        seg.ptCount = 4;
                        this._points.push(new cc.Vec2(prev.x, prev.y));
                        this._points.push(new cc.Vec2(current.x, current.y));
                        this._points.push(new cc.Vec2(prev.control1_x, prev.control1_y));
                        this._points.push(new cc.Vec2(prev.control2_x, prev.control2_y));
                    }
                    seg.length = fgui.ToolSet.distance(prev.x, prev.y, current.x, current.y);
                    this._fullLength += seg.length;
                    this._segments.push(seg);
                }
                if (current.curveType != fgui.CurveType.CRSpline) {
                    if (splinePoints.length > 0) {
                        splinePoints.push(new cc.Vec2(current.x, current.y));
                        this.createSplineSegment();
                    }
                } else splinePoints.push(new cc.Vec2(current.x, current.y));
                prev = current;
            }
            if (splinePoints.length > 1) this.createSplineSegment();
        };
        GPath.prototype.createSplineSegment = function () {
            var splinePoints = GPath.helperPoints;
            var cnt = splinePoints.length;
            splinePoints.splice(0, 0, splinePoints[0]);
            splinePoints.push(splinePoints[cnt]);
            splinePoints.push(splinePoints[cnt]);
            cnt += 3;
            var seg = new Segment();
            seg.type = fgui.CurveType.CRSpline;
            seg.ptStart = this._points.length;
            seg.ptCount = cnt;
            this._points = this._points.concat(splinePoints);
            seg.length = 0;
            for (var i = 1; i < cnt; i++) {
                seg.length += fgui.ToolSet.distance(splinePoints[i - 1].x, splinePoints[i - 1].y, splinePoints[i].x, splinePoints[i].y);
            }
            this._fullLength += seg.length;
            this._segments.push(seg);
            splinePoints.length = 0;
        };
        GPath.prototype.clear = function () {
            this._segments.length = 0;
            this._points.length = 0;
        };
        GPath.prototype.getPointAt = function (t, result) {
            if (!result) result = new cc.Vec2();else result.x = result.y = 0;
            t = fgui.ToolSet.clamp01(t);
            var cnt = this._segments.length;
            if (cnt == 0) {
                return result;
            }
            var seg;
            if (t == 1) {
                seg = this._segments[cnt - 1];
                if (seg.type == fgui.CurveType.Straight) {
                    result.x = fgui.ToolSet.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
                    result.y = fgui.ToolSet.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
                    return result;
                } else if (seg.type == fgui.CurveType.Bezier || seg.type == fgui.CurveType.CubicBezier) return this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else return this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);
            }
            var len = t * this._fullLength;
            for (var i = 0; i < cnt; i++) {
                seg = this._segments[i];
                len -= seg.length;
                if (len < 0) {
                    t = 1 + len / seg.length;
                    if (seg.type == fgui.CurveType.Straight) {
                        result.x = fgui.ToolSet.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
                        result.y = fgui.ToolSet.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
                    } else if (seg.type == fgui.CurveType.Bezier || seg.type == fgui.CurveType.CubicBezier) result = this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else result = this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);
                    break;
                }
            }
            return result;
        };
        Object.defineProperty(GPath.prototype, "segmentCount", {
            get: function get() {
                return this._segments.length;
            },
            enumerable: false,
            configurable: true
        });
        GPath.prototype.getAnchorsInSegment = function (segmentIndex, points) {
            if (points == null) points = new Array();
            var seg = this._segments[segmentIndex];
            for (var i = 0; i < seg.ptCount; i++) {
                points.push(new cc.Vec2(this._points[seg.ptStart + i].x, this._points[seg.ptStart + i].y));
            }return points;
        };
        GPath.prototype.getPointsInSegment = function (segmentIndex, t0, t1, points, ts, pointDensity) {
            if (points == null) points = new Array();
            if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
            if (ts) ts.push(t0);
            var seg = this._segments[segmentIndex];
            if (seg.type == fgui.CurveType.Straight) {
                points.push(new cc.Vec2(fgui.ToolSet.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t0), fgui.ToolSet.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t0)));
                points.push(new cc.Vec2(fgui.ToolSet.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t1), fgui.ToolSet.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t1)));
            } else {
                var func;
                if (seg.type == fgui.CurveType.Bezier || seg.type == fgui.CurveType.CubicBezier) func = this.onBezierCurve;else func = this.onCRSplineCurve;
                points.push(func.call(this, seg.ptStart, seg.ptCount, t0, new cc.Vec2()));
                var SmoothAmount = Math.min(seg.length * pointDensity, 50);
                for (var j = 0; j <= SmoothAmount; j++) {
                    var t = j / SmoothAmount;
                    if (t > t0 && t < t1) {
                        points.push(func.call(this, seg.ptStart, seg.ptCount, t, new cc.Vec2()));
                        if (ts != null) ts.push(t);
                    }
                }
                points.push(func.call(this, seg.ptStart, seg.ptCount, t1, new cc.Vec2()));
            }
            if (ts != null) ts.push(t1);
            return points;
        };
        GPath.prototype.getAllPoints = function (points, ts, pointDensity) {
            if (points == null) points = new Array();
            if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
            var cnt = this._segments.length;
            for (var i = 0; i < cnt; i++) {
                this.getPointsInSegment(i, 0, 1, points, ts, pointDensity);
            }return points;
        };
        GPath.prototype.onCRSplineCurve = function (ptStart, ptCount, t, result) {
            var adjustedIndex = Math.floor(t * (ptCount - 4)) + ptStart;
            var p0x = this._points[adjustedIndex].x;
            var p0y = this._points[adjustedIndex].y;
            var p1x = this._points[adjustedIndex + 1].x;
            var p1y = this._points[adjustedIndex + 1].y;
            var p2x = this._points[adjustedIndex + 2].x;
            var p2y = this._points[adjustedIndex + 2].y;
            var p3x = this._points[adjustedIndex + 3].x;
            var p3y = this._points[adjustedIndex + 3].y;
            var adjustedT = t == 1 ? 1 : fgui.ToolSet.repeat(t * (ptCount - 4), 1);
            var t0 = ((-adjustedT + 2) * adjustedT - 1) * adjustedT * 0.5;
            var t1 = ((3 * adjustedT - 5) * adjustedT * adjustedT + 2) * 0.5;
            var t2 = ((-3 * adjustedT + 4) * adjustedT + 1) * adjustedT * 0.5;
            var t3 = (adjustedT - 1) * adjustedT * adjustedT * 0.5;
            result.x = p0x * t0 + p1x * t1 + p2x * t2 + p3x * t3;
            result.y = p0y * t0 + p1y * t1 + p2y * t2 + p3y * t3;
            return result;
        };
        GPath.prototype.onBezierCurve = function (ptStart, ptCount, t, result) {
            var t2 = 1 - t;
            var p0x = this._points[ptStart].x;
            var p0y = this._points[ptStart].y;
            var p1x = this._points[ptStart + 1].x;
            var p1y = this._points[ptStart + 1].y;
            var cp0x = this._points[ptStart + 2].x;
            var cp0y = this._points[ptStart + 2].y;
            if (ptCount == 4) {
                var cp1x = this._points[ptStart + 3].x;
                var cp1y = this._points[ptStart + 3].y;
                result.x = t2 * t2 * t2 * p0x + 3 * t2 * t2 * t * cp0x + 3 * t2 * t * t * cp1x + t * t * t * p1x;
                result.y = t2 * t2 * t2 * p0y + 3 * t2 * t2 * t * cp0y + 3 * t2 * t * t * cp1y + t * t * t * p1y;
            } else {
                result.x = t2 * t2 * p0x + 2 * t2 * t * cp0x + t * t * p1x;
                result.y = t2 * t2 * p0y + 2 * t2 * t * cp0y + t * t * p1y;
            }
            return result;
        };
        GPath.helperPoints = new Array();
        return GPath;
    }();
    fgui.GPath = GPath;
    var Segment = function () {
        function Segment() {}
        return Segment;
    }();
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var CurveType;
    (function (CurveType) {
        CurveType[CurveType["CRSpline"] = 0] = "CRSpline";
        CurveType[CurveType["Bezier"] = 1] = "Bezier";
        CurveType[CurveType["CubicBezier"] = 2] = "CubicBezier";
        CurveType[CurveType["Straight"] = 3] = "Straight";
    })(CurveType = fgui.CurveType || (fgui.CurveType = {}));
    var GPathPoint = function () {
        function GPathPoint() {
            this.x = 0;
            this.y = 0;
            this.control1_x = 0;
            this.control1_y = 0;
            this.control2_x = 0;
            this.control2_y = 0;
            this.curveType = 0;
        }
        GPathPoint.newPoint = function (x, y, curveType) {
            if (x === void 0) {
                x = 0;
            }
            if (y === void 0) {
                y = 0;
            }
            if (curveType === void 0) {
                curveType = 0;
            }
            var pt = new GPathPoint();
            pt.x = x;
            pt.y = y;
            pt.control1_x = 0;
            pt.control1_y = 0;
            pt.control2_x = 0;
            pt.control2_y = 0;
            pt.curveType = curveType;
            return pt;
        };
        GPathPoint.newBezierPoint = function (x, y, control1_x, control1_y) {
            if (x === void 0) {
                x = 0;
            }
            if (y === void 0) {
                y = 0;
            }
            if (control1_x === void 0) {
                control1_x = 0;
            }
            if (control1_y === void 0) {
                control1_y = 0;
            }
            var pt = new GPathPoint();
            pt.x = x;
            pt.y = y;
            pt.control1_x = control1_x;
            pt.control1_y = control1_y;
            pt.control2_x = 0;
            pt.control2_y = 0;
            pt.curveType = CurveType.Bezier;
            return pt;
        };
        GPathPoint.newCubicBezierPoint = function (x, y, control1_x, control1_y, control2_x, control2_y) {
            if (x === void 0) {
                x = 0;
            }
            if (y === void 0) {
                y = 0;
            }
            if (control1_x === void 0) {
                control1_x = 0;
            }
            if (control1_y === void 0) {
                control1_y = 0;
            }
            if (control2_x === void 0) {
                control2_x = 0;
            }
            if (control2_y === void 0) {
                control2_y = 0;
            }
            var pt = new GPathPoint();
            pt.x = x;
            pt.y = y;
            pt.control1_x = control1_x;
            pt.control1_y = control1_y;
            pt.control2_x = control2_x;
            pt.control2_y = control2_y;
            pt.curveType = CurveType.CubicBezier;
            return pt;
        };
        GPathPoint.prototype.clone = function () {
            var ret = new GPathPoint();
            ret.x = this.x;
            ret.y = this.y;
            ret.control1_x = this.control1_x;
            ret.control1_y = this.control1_y;
            ret.control2_x = this.control2_x;
            ret.control2_y = this.control2_y;
            ret.curveType = this.curveType;
            return ret;
        };
        return GPathPoint;
    }();
    fgui.GPathPoint = GPathPoint;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTween = function () {
        function GTween() {}
        GTween.to = function (start, end, duration) {
            return fgui.TweenManager.createTween()._to(start, end, duration);
        };
        GTween.to2 = function (start, start2, end, end2, duration) {
            return fgui.TweenManager.createTween()._to2(start, start2, end, end2, duration);
        };
        GTween.to3 = function (start, start2, start3, end, end2, end3, duration) {
            return fgui.TweenManager.createTween()._to3(start, start2, start3, end, end2, end3, duration);
        };
        GTween.to4 = function (start, start2, start3, start4, end, end2, end3, end4, duration) {
            return fgui.TweenManager.createTween()._to4(start, start2, start3, start4, end, end2, end3, end4, duration);
        };
        GTween.toColor = function (start, end, duration) {
            return fgui.TweenManager.createTween()._toColor(start, end, duration);
        };
        GTween.delayedCall = function (delay) {
            return fgui.TweenManager.createTween().setDelay(delay);
        };
        GTween.shake = function (startX, startY, amplitude, duration) {
            return fgui.TweenManager.createTween()._shake(startX, startY, amplitude, duration);
        };
        GTween.isTweening = function (target, propType) {
            return fgui.TweenManager.isTweening(target, propType);
        };
        GTween.kill = function (target, complete, propType) {
            fgui.TweenManager.killTweens(target, complete, propType);
        };
        GTween.getTween = function (target, propType) {
            return fgui.TweenManager.getTween(target, propType);
        };
        GTween.catchCallbackExceptions = true;
        return GTween;
    }();
    fgui.GTween = GTween;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var GTweener = function () {
        function GTweener() {
            this._startValue = new fgui.TweenValue();
            this._endValue = new fgui.TweenValue();
            this._value = new fgui.TweenValue();
            this._deltaValue = new fgui.TweenValue();
            this._reset();
        }
        GTweener.prototype.setDelay = function (value) {
            this._delay = value;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "delay", {
            get: function get() {
                return this._delay;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.setDuration = function (value) {
            this._duration = value;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "duration", {
            get: function get() {
                return this._duration;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.setBreakpoint = function (value) {
            this._breakpoint = value;
            return this;
        };
        GTweener.prototype.setEase = function (value) {
            this._easeType = value;
            return this;
        };
        GTweener.prototype.setEasePeriod = function (value) {
            this._easePeriod = value;
            return this;
        };
        GTweener.prototype.setEaseOvershootOrAmplitude = function (value) {
            this._easeOvershootOrAmplitude = value;
            return this;
        };
        GTweener.prototype.setRepeat = function (repeat, yoyo) {
            this._repeat = repeat;
            this._yoyo = yoyo;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "repeat", {
            get: function get() {
                return this._repeat;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.setTimeScale = function (value) {
            this._timeScale = value;
            return this;
        };
        GTweener.prototype.setSnapping = function (value) {
            this._snapping = value;
            return this;
        };
        GTweener.prototype.setTarget = function (value, propType) {
            this._target = value;
            this._propType = propType;
            if (value instanceof fgui.GObject) this._node = value.node;else if (value instanceof cc.Node) this._node = value;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "target", {
            get: function get() {
                return this._target;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.setPath = function (value) {
            this._path = value;
            return this;
        };
        GTweener.prototype.setUserData = function (value) {
            this._userData = value;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "userData", {
            get: function get() {
                return this._userData;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.onUpdate = function (callback, caller) {
            this._onUpdate = callback;
            this._onUpdateCaller = caller;
            return this;
        };
        GTweener.prototype.onStart = function (callback, caller) {
            this._onStart = callback;
            this._onStartCaller = caller;
            return this;
        };
        GTweener.prototype.onComplete = function (callback, caller) {
            this._onComplete = callback;
            this._onCompleteCaller = caller;
            return this;
        };
        Object.defineProperty(GTweener.prototype, "startValue", {
            get: function get() {
                return this._startValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "endValue", {
            get: function get() {
                return this._endValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "value", {
            get: function get() {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "deltaValue", {
            get: function get() {
                return this._deltaValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "normalizedTime", {
            get: function get() {
                return this._normalizedTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "completed", {
            get: function get() {
                return this._ended != 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GTweener.prototype, "allCompleted", {
            get: function get() {
                return this._ended == 1;
            },
            enumerable: false,
            configurable: true
        });
        GTweener.prototype.setPaused = function (paused) {
            this._paused = paused;
            return this;
        };
        GTweener.prototype.seek = function (time) {
            if (this._killed) return;
            this._elapsedTime = time;
            if (this._elapsedTime < this._delay) {
                if (this._started) this._elapsedTime = this._delay;else return;
            }
            this.update();
        };
        GTweener.prototype.kill = function (complete) {
            if (this._killed) return;
            if (complete) {
                if (this._ended == 0) {
                    if (this._breakpoint >= 0) this._elapsedTime = this._delay + this._breakpoint;else if (this._repeat >= 0) this._elapsedTime = this._delay + this._duration * (this._repeat + 1);else this._elapsedTime = this._delay + this._duration * 2;
                    this.update();
                }
                this.callCompleteCallback();
            }
            this._killed = true;
        };
        GTweener.prototype._to = function (start, end, duration) {
            this._valueSize = 1;
            this._startValue.x = start;
            this._endValue.x = end;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._to2 = function (start, start2, end, end2, duration) {
            this._valueSize = 2;
            this._startValue.x = start;
            this._endValue.x = end;
            this._startValue.y = start2;
            this._endValue.y = end2;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._to3 = function (start, start2, start3, end, end2, end3, duration) {
            this._valueSize = 3;
            this._startValue.x = start;
            this._endValue.x = end;
            this._startValue.y = start2;
            this._endValue.y = end2;
            this._startValue.z = start3;
            this._endValue.z = end3;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._to4 = function (start, start2, start3, start4, end, end2, end3, end4, duration) {
            this._valueSize = 4;
            this._startValue.x = start;
            this._endValue.x = end;
            this._startValue.y = start2;
            this._endValue.y = end2;
            this._startValue.z = start3;
            this._endValue.z = end3;
            this._startValue.w = start4;
            this._endValue.w = end4;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._toColor = function (start, end, duration) {
            this._valueSize = 4;
            this._startValue.color = start;
            this._endValue.color = end;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._shake = function (startX, startY, amplitude, duration) {
            this._valueSize = 5;
            this._startValue.x = startX;
            this._startValue.y = startY;
            this._startValue.w = amplitude;
            this._duration = duration;
            return this;
        };
        GTweener.prototype._init = function () {
            this._delay = 0;
            this._duration = 0;
            this._breakpoint = -1;
            this._easeType = fgui.EaseType.QuadOut;
            this._timeScale = 1;
            this._easePeriod = 0;
            this._easeOvershootOrAmplitude = 1.70158;
            this._snapping = false;
            this._repeat = 0;
            this._yoyo = false;
            this._valueSize = 0;
            this._started = false;
            this._paused = false;
            this._killed = false;
            this._elapsedTime = 0;
            this._normalizedTime = 0;
            this._ended = 0;
        };
        GTweener.prototype._reset = function () {
            this._target = null;
            this._propType = null;
            this._userData = null;
            this._node = null;
            this._path = null;
            this._onStart = this._onUpdate = this._onComplete = null;
            this._onStartCaller = this._onUpdateCaller = this._onCompleteCaller = null;
        };
        GTweener.prototype._update = function (dt) {
            if (this._node && !cc.isValid(this._node)) {
                this._killed = true;
                return;
            }
            if (this._timeScale != 1) dt *= this._timeScale;
            if (dt == 0) return;
            if (this._ended != 0) {
                this.callCompleteCallback();
                this._killed = true;
                return;
            }
            this._elapsedTime += dt;
            this.update();
            if (this._ended != 0) {
                if (!this._killed) {
                    this.callCompleteCallback();
                    this._killed = true;
                }
            }
        };
        GTweener.prototype.update = function () {
            this._ended = 0;
            if (this._valueSize == 0) {
                if (this._elapsedTime >= this._delay + this._duration) this._ended = 1;
                return;
            }
            if (!this._started) {
                if (this._elapsedTime < this._delay) return;
                this._started = true;
                this.callStartCallback();
                if (this._killed) return;
            }
            var reversed = false;
            var tt = this._elapsedTime - this._delay;
            if (this._breakpoint >= 0 && tt >= this._breakpoint) {
                tt = this._breakpoint;
                this._ended = 2;
            }
            if (this._repeat != 0) {
                var round = Math.floor(tt / this._duration);
                tt -= this._duration * round;
                if (this._yoyo) reversed = round % 2 == 1;
                if (this._repeat > 0 && this._repeat - round < 0) {
                    if (this._yoyo) reversed = this._repeat % 2 == 1;
                    tt = this._duration;
                    this._ended = 1;
                }
            } else if (tt >= this._duration) {
                tt = this._duration;
                this._ended = 1;
            }
            this._normalizedTime = fgui.EaseManager.evaluate(this._easeType, reversed ? this._duration - tt : tt, this._duration, this._easeOvershootOrAmplitude, this._easePeriod);
            this._value.setZero();
            this._deltaValue.setZero();
            if (this._valueSize == 5) {
                if (this._ended == 0) {
                    var r = this._startValue.w * (1 - this._normalizedTime);
                    var rx = r * (Math.random() > 0.5 ? 1 : -1);
                    var ry = r * (Math.random() > 0.5 ? 1 : -1);
                    this._deltaValue.x = rx;
                    this._deltaValue.y = ry;
                    this._value.x = this._startValue.x + rx;
                    this._value.y = this._startValue.y + ry;
                } else {
                    this._value.x = this._startValue.x;
                    this._value.y = this._startValue.y;
                }
            } else if (this._path) {
                var pt = GTweener.helperPoint;
                this._path.getPointAt(this._normalizedTime, pt);
                if (this._snapping) {
                    pt.x = Math.round(pt.x);
                    pt.y = Math.round(pt.y);
                }
                this._deltaValue.x = pt.x - this._value.x;
                this._deltaValue.y = pt.y - this._value.y;
                this._value.x = pt.x;
                this._value.y = pt.y;
            } else {
                for (var i = 0; i < this._valueSize; i++) {
                    var n1 = this._startValue.getField(i);
                    var n2 = this._endValue.getField(i);
                    var f = n1 + (n2 - n1) * this._normalizedTime;
                    if (this._snapping) f = Math.round(f);
                    this._deltaValue.setField(i, f - this._value.getField(i));
                    this._value.setField(i, f);
                }
            }
            if (this._target != null && this._propType != null) {
                if (this._propType instanceof Function) {
                    switch (this._valueSize) {
                        case 1:
                            this._propType.call(this._target, this._value.x);
                            break;
                        case 2:
                            this._propType.call(this._target, this._value.x, this._value.y);
                            break;
                        case 3:
                            this._propType.call(this._target, this._value.x, this._value.y, this._value.z);
                            break;
                        case 4:
                            this._propType.call(this._target, this._value.x, this._value.y, this._value.z, this._value.w);
                            break;
                        case 5:
                            this._propType.call(this._target, this._value.color);
                            break;
                        case 6:
                            this._propType.call(this._target, this._value.x, this._value.y);
                            break;
                    }
                } else {
                    if (this._valueSize == 5) this._target[this._propType] = this._value.color;else this._target[this._propType] = this._value.x;
                }
            }
            this.callUpdateCallback();
        };
        GTweener.prototype.callStartCallback = function () {
            if (this._onStart != null) {
                try {
                    this._onStart.call(this._onStartCaller, this);
                } catch (err) {
                    console.log("FairyGUI: error in start callback > " + err);
                }
            }
        };
        GTweener.prototype.callUpdateCallback = function () {
            if (this._onUpdate != null) {
                try {
                    this._onUpdate.call(this._onUpdateCaller, this);
                } catch (err) {
                    console.log("FairyGUI: error in update callback > " + err);
                }
            }
        };
        GTweener.prototype.callCompleteCallback = function () {
            if (this._onComplete != null) {
                try {
                    this._onComplete.call(this._onCompleteCaller, this);
                } catch (err) {
                    console.log("FairyGUI: error in complete callback > " + err);
                }
            }
        };
        GTweener.helperPoint = new cc.Vec2();
        return GTweener;
    }();
    fgui.GTweener = GTweener;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var TweenManager = function () {
        function TweenManager() {}
        TweenManager.createTween = function () {
            if (!TweenManager._root) {
                TweenManager._root = new cc.Node("[TweenManager]");
                cc.game["addPersistRootNode"](TweenManager._root);
                cc.director.getScheduler().schedule(TweenManager.update, TweenManager._root, 0, false);
            }
            var tweener;
            var cnt = TweenManager._tweenerPool.length;
            if (cnt > 0) {
                tweener = TweenManager._tweenerPool.pop();
            } else tweener = new fgui.GTweener();
            tweener._init();
            TweenManager._activeTweens[TweenManager._totalActiveTweens++] = tweener;
            if (TweenManager._totalActiveTweens == TweenManager._activeTweens.length) TweenManager._activeTweens.length = TweenManager._activeTweens.length + Math.ceil(TweenManager._activeTweens.length * 0.5);
            return tweener;
        };
        TweenManager.isTweening = function (target, propType) {
            if (target == null) return false;
            var anyType = propType == null || propType == undefined;
            for (var i = 0; i < TweenManager._totalActiveTweens; i++) {
                var tweener = TweenManager._activeTweens[i];
                if (tweener != null && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) return true;
            }
            return false;
        };
        TweenManager.killTweens = function (target, completed, propType) {
            if (target == null) return false;
            var flag = false;
            var cnt = TweenManager._totalActiveTweens;
            var anyType = propType == null || propType == undefined;
            for (var i = 0; i < cnt; i++) {
                var tweener = TweenManager._activeTweens[i];
                if (tweener != null && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
                    tweener.kill(completed);
                    flag = true;
                }
            }
            return flag;
        };
        TweenManager.getTween = function (target, propType) {
            if (target == null) return null;
            var cnt = TweenManager._totalActiveTweens;
            var anyType = propType == null || propType == undefined;
            for (var i = 0; i < cnt; i++) {
                var tweener = TweenManager._activeTweens[i];
                if (tweener != null && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
                    return tweener;
                }
            }
            return null;
        };
        TweenManager.update = function (dt) {
            var tweens = TweenManager._activeTweens;
            var cnt = TweenManager._totalActiveTweens;
            var freePosStart = -1;
            for (var i = 0; i < cnt; i++) {
                var tweener = tweens[i];
                if (tweener == null) {
                    if (freePosStart == -1) freePosStart = i;
                } else if (tweener._killed) {
                    tweener._reset();
                    TweenManager._tweenerPool.push(tweener);
                    tweens[i] = null;
                    if (freePosStart == -1) freePosStart = i;
                } else {
                    if (!tweener._paused) tweener._update(dt);
                    if (freePosStart != -1) {
                        tweens[freePosStart] = tweener;
                        tweens[i] = null;
                        freePosStart++;
                    }
                }
            }
            if (freePosStart >= 0) {
                if (TweenManager._totalActiveTweens != cnt) {
                    var j = cnt;
                    cnt = TweenManager._totalActiveTweens - cnt;
                    for (i = 0; i < cnt; i++) {
                        tweens[freePosStart++] = tweens[j++];
                    }
                }
                TweenManager._totalActiveTweens = freePosStart;
            }
            return false;
        };
        TweenManager._activeTweens = new Array(30);
        TweenManager._tweenerPool = new Array();
        TweenManager._totalActiveTweens = 0;
        return TweenManager;
    }();
    fgui.TweenManager = TweenManager;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var TweenValue = function () {
        function TweenValue() {
            this.x = this.y = this.z = this.w = 0;
        }
        Object.defineProperty(TweenValue.prototype, "color", {
            get: function get() {
                return (this.w << 24) + (this.x << 16) + (this.y << 8) + this.z;
            },
            set: function set(value) {
                this.x = (value & 0xFF0000) >> 16;
                this.y = (value & 0x00FF00) >> 8;
                this.z = value & 0x0000FF;
                this.w = (value & 0xFF000000) >> 24;
            },
            enumerable: false,
            configurable: true
        });
        TweenValue.prototype.getField = function (index) {
            switch (index) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw new Error("Index out of bounds: " + index);
            }
        };
        TweenValue.prototype.setField = function (index, value) {
            switch (index) {
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                case 2:
                    this.z = value;
                    break;
                case 3:
                    this.w = value;
                    break;
                default:
                    throw new Error("Index out of bounds: " + index);
            }
        };
        TweenValue.prototype.setZero = function () {
            this.x = this.y = this.z = this.w = 0;
        };
        return TweenValue;
    }();
    fgui.TweenValue = TweenValue;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ByteBuffer = function () {
        function ByteBuffer(buffer, offset, length) {
            if (offset === void 0) {
                offset = 0;
            }
            if (length === void 0) {
                length = -1;
            }
            this.stringTable = null;
            this.version = 0;
            this.littleEndian = false;
            if (length == -1) length = buffer.byteLength - offset;
            this._bytes = new Uint8Array(buffer, offset, length);
            this._view = new DataView(this._bytes.buffer, offset, length);
            this._pos = 0;
            this._length = length;
        }
        Object.defineProperty(ByteBuffer.prototype, "data", {
            get: function get() {
                return this._bytes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteBuffer.prototype, "position", {
            get: function get() {
                return this._pos;
            },
            set: function set(value) {
                if (value > this._length) throw "Out of bounds";
                this._pos = value;
            },
            enumerable: false,
            configurable: true
        });
        ByteBuffer.prototype.skip = function (count) {
            this._pos += count;
        };
        ByteBuffer.prototype.validate = function (forward) {
            if (this._pos + forward > this._length) throw "Out of bounds";
        };
        ByteBuffer.prototype.readByte = function () {
            this.validate(1);
            return this._view.getInt8(this._pos++);
        };
        ByteBuffer.prototype.readUbyte = function () {
            return this._bytes[this._pos++];
        };
        ByteBuffer.prototype.readBool = function () {
            return this.readByte() == 1;
        };
        ByteBuffer.prototype.readShort = function () {
            this.validate(2);
            var ret = this._view.getInt16(this._pos, this.littleEndian);
            this._pos += 2;
            return ret;
        };
        ByteBuffer.prototype.readUshort = function () {
            this.validate(2);
            var ret = this._view.getUint16(this._pos, this.littleEndian);
            this._pos += 2;
            return ret;
        };
        ByteBuffer.prototype.readInt = function () {
            this.validate(4);
            var ret = this._view.getInt32(this._pos, this.littleEndian);
            this._pos += 4;
            return ret;
        };
        ByteBuffer.prototype.readUint = function () {
            this.validate(4);
            var ret = this._view.getUint32(this._pos, this.littleEndian);
            this._pos += 4;
            return ret;
        };
        ByteBuffer.prototype.readFloat = function () {
            this.validate(4);
            var ret = this._view.getFloat32(this._pos, this.littleEndian);
            this._pos += 4;
            return ret;
        };
        ByteBuffer.prototype.readString = function (len) {
            if (len == undefined) len = this.readUshort();
            this.validate(len);
            var v = "",
                max = this._pos + len,
                c = 0,
                c2 = 0,
                c3 = 0,
                f = String.fromCharCode;
            var u = this._bytes,
                i = 0;
            var pos = this._pos;
            while (pos < max) {
                c = u[pos++];
                if (c < 0x80) {
                    if (c != 0) {
                        v += f(c);
                    }
                } else if (c < 0xE0) {
                    v += f((c & 0x3F) << 6 | u[pos++] & 0x7F);
                } else if (c < 0xF0) {
                    c2 = u[pos++];
                    v += f((c & 0x1F) << 12 | (c2 & 0x7F) << 6 | u[pos++] & 0x7F);
                } else {
                    c2 = u[pos++];
                    c3 = u[pos++];
                    v += f((c & 0x0F) << 18 | (c2 & 0x7F) << 12 | c3 << 6 & 0x7F | u[pos++] & 0x7F);
                }
                i++;
            }
            this._pos += len;
            return v;
        };
        ByteBuffer.prototype.readS = function () {
            var index = this.readUshort();
            if (index == 65534) return null;else if (index == 65533) return "";else return this.stringTable[index];
        };
        ByteBuffer.prototype.readSArray = function (cnt) {
            var ret = new Array(cnt);
            for (var i = 0; i < cnt; i++) {
                ret[i] = this.readS();
            }return ret;
        };
        ByteBuffer.prototype.writeS = function (value) {
            var index = this.readUshort();
            if (index != 65534 && index != 65533) this.stringTable[index] = value;
        };
        ByteBuffer.prototype.readColor = function (hasAlpha) {
            var r = this.readUbyte();
            var g = this.readUbyte();
            var b = this.readUbyte();
            var a = this.readUbyte();
            return new cc.Color(r, g, b, hasAlpha ? a : 255);
        };
        ByteBuffer.prototype.readChar = function () {
            var i = this.readUshort();
            return String.fromCharCode(i);
        };
        ByteBuffer.prototype.readBuffer = function () {
            var count = this.readUint();
            this.validate(count);
            var ba = new ByteBuffer(this._bytes.buffer, this._bytes.byteOffset + this._pos, count);
            ba.stringTable = this.stringTable;
            ba.version = this.version;
            this._pos += count;
            return ba;
        };
        ByteBuffer.prototype.seek = function (indexTablePos, blockIndex) {
            var tmp = this._pos;
            this._pos = indexTablePos;
            var segCount = this.readByte();
            if (blockIndex < segCount) {
                var useShort = this.readByte() == 1;
                var newPos;
                if (useShort) {
                    this._pos += 2 * blockIndex;
                    newPos = this.readUshort();
                } else {
                    this._pos += 4 * blockIndex;
                    newPos = this.readUint();
                }
                if (newPos > 0) {
                    this._pos = indexTablePos + newPos;
                    return true;
                } else {
                    this._pos = tmp;
                    return false;
                }
            } else {
                this._pos = tmp;
                return false;
            }
        };
        return ByteBuffer;
    }();
    fgui.ByteBuffer = ByteBuffer;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ColorMatrix = function () {
        function ColorMatrix() {
            this.matrix = new Array(ColorMatrix.LENGTH);
            this.reset();
        }
        ColorMatrix.create = function (p_brightness, p_contrast, p_saturation, p_hue) {
            var ret = new ColorMatrix();
            ret.adjustColor(p_brightness, p_contrast, p_saturation, p_hue);
            return ret;
        };
        ColorMatrix.prototype.reset = function () {
            for (var i = 0; i < ColorMatrix.LENGTH; i++) {
                this.matrix[i] = ColorMatrix.IDENTITY_MATRIX[i];
            }
        };
        ColorMatrix.prototype.invert = function () {
            this.multiplyMatrix([-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0]);
        };
        ColorMatrix.prototype.adjustColor = function (p_brightness, p_contrast, p_saturation, p_hue) {
            this.adjustHue(p_hue);
            this.adjustContrast(p_contrast);
            this.adjustBrightness(p_brightness);
            this.adjustSaturation(p_saturation);
        };
        ColorMatrix.prototype.adjustBrightness = function (p_val) {
            p_val = this.cleanValue(p_val, 1) * 255;
            this.multiplyMatrix([1, 0, 0, 0, p_val, 0, 1, 0, 0, p_val, 0, 0, 1, 0, p_val, 0, 0, 0, 1, 0]);
        };
        ColorMatrix.prototype.adjustContrast = function (p_val) {
            p_val = this.cleanValue(p_val, 1);
            var s = p_val + 1;
            var o = 128 * (1 - s);
            this.multiplyMatrix([s, 0, 0, 0, o, 0, s, 0, 0, o, 0, 0, s, 0, o, 0, 0, 0, 1, 0]);
        };
        ColorMatrix.prototype.adjustSaturation = function (p_val) {
            p_val = this.cleanValue(p_val, 1);
            p_val += 1;
            var invSat = 1 - p_val;
            var invLumR = invSat * ColorMatrix.LUMA_R;
            var invLumG = invSat * ColorMatrix.LUMA_G;
            var invLumB = invSat * ColorMatrix.LUMA_B;
            this.multiplyMatrix([invLumR + p_val, invLumG, invLumB, 0, 0, invLumR, invLumG + p_val, invLumB, 0, 0, invLumR, invLumG, invLumB + p_val, 0, 0, 0, 0, 0, 1, 0]);
        };
        ColorMatrix.prototype.adjustHue = function (p_val) {
            p_val = this.cleanValue(p_val, 1);
            p_val *= Math.PI;
            var cos = Math.cos(p_val);
            var sin = Math.sin(p_val);
            this.multiplyMatrix([ColorMatrix.LUMA_R + cos * (1 - ColorMatrix.LUMA_R) + sin * -ColorMatrix.LUMA_R, ColorMatrix.LUMA_G + cos * -ColorMatrix.LUMA_G + sin * -ColorMatrix.LUMA_G, ColorMatrix.LUMA_B + cos * -ColorMatrix.LUMA_B + sin * (1 - ColorMatrix.LUMA_B), 0, 0, ColorMatrix.LUMA_R + cos * -ColorMatrix.LUMA_R + sin * 0.143, ColorMatrix.LUMA_G + cos * (1 - ColorMatrix.LUMA_G) + sin * 0.14, ColorMatrix.LUMA_B + cos * -ColorMatrix.LUMA_B + sin * -0.283, 0, 0, ColorMatrix.LUMA_R + cos * -ColorMatrix.LUMA_R + sin * -(1 - ColorMatrix.LUMA_R), ColorMatrix.LUMA_G + cos * -ColorMatrix.LUMA_G + sin * ColorMatrix.LUMA_G, ColorMatrix.LUMA_B + cos * (1 - ColorMatrix.LUMA_B) + sin * ColorMatrix.LUMA_B, 0, 0, 0, 0, 0, 1, 0]);
        };
        ColorMatrix.prototype.concat = function (p_matrix) {
            if (p_matrix.length != ColorMatrix.LENGTH) {
                return;
            }
            this.multiplyMatrix(p_matrix);
        };
        ColorMatrix.prototype.clone = function () {
            var result = new ColorMatrix();
            result.copyMatrix(this.matrix);
            return result;
        };
        ColorMatrix.prototype.copyMatrix = function (p_matrix) {
            var l = ColorMatrix.LENGTH;
            for (var i = 0; i < l; i++) {
                this.matrix[i] = p_matrix[i];
            }
        };
        ColorMatrix.prototype.multiplyMatrix = function (p_matrix) {
            var col = [];
            var i = 0;
            for (var y = 0; y < 4; ++y) {
                for (var x = 0; x < 5; ++x) {
                    col[i + x] = p_matrix[i] * this.matrix[x] + p_matrix[i + 1] * this.matrix[x + 5] + p_matrix[i + 2] * this.matrix[x + 10] + p_matrix[i + 3] * this.matrix[x + 15] + (x == 4 ? p_matrix[i + 4] : 0);
                }
                i += 5;
            }
            this.copyMatrix(col);
        };
        ColorMatrix.prototype.cleanValue = function (p_val, p_limit) {
            return Math.min(p_limit, Math.max(-p_limit, p_val));
        };
        ColorMatrix.IDENTITY_MATRIX = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
        ColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;
        ColorMatrix.LUMA_R = 0.299;
        ColorMatrix.LUMA_G = 0.587;
        ColorMatrix.LUMA_B = 0.114;
        return ColorMatrix;
    }();
    fgui.ColorMatrix = ColorMatrix;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var UBBParser = function () {
        function UBBParser() {
            this._readPos = 0;
            this._handlers = {};
            this._handlers["url"] = this.onTag_URL;
            this._handlers["img"] = this.onTag_IMG;
            this._handlers["b"] = this.onTag_Simple;
            this._handlers["i"] = this.onTag_Simple;
            this._handlers["u"] = this.onTag_Simple;
            this._handlers["color"] = this.onTag_COLOR;
            this._handlers["size"] = this.onTag_SIZE;
        }
        UBBParser.prototype.onTag_URL = function (tagName, end, attr) {
            if (!end) {
                var ret = void 0;
                if (attr != null) ret = "<on click=\"onClickLink\" param=\"" + attr + "\">";else {
                    var href = this.getTagText();
                    ret = "<on click=\"onClickLink\" param=\"" + href + "\">";
                }
                if (this.linkUnderline) ret += "<u>";
                if (this.linkColor) ret += "<color=" + this.linkColor + ">";
                return ret;
            } else {
                var ret = "";
                if (this.linkColor) ret += "</color>";
                if (this.linkUnderline) ret += "</u>";
                ret += "</on>";
                return ret;
            }
        };
        UBBParser.prototype.onTag_IMG = function (tagName, end, attr) {
            if (!end) {
                var src = this.getTagText(true);
                if (!src) return null;
                return "<img src=\"" + src + "\"/>";
            } else return null;
        };
        UBBParser.prototype.onTag_Simple = function (tagName, end, attr) {
            return end ? "</" + tagName + ">" : "<" + tagName + ">";
        };
        UBBParser.prototype.onTag_COLOR = function (tagName, end, attr) {
            if (!end) {
                this.lastColor = attr;
                return "<color=" + attr + ">";
            } else return "</color>";
        };
        UBBParser.prototype.onTag_FONT = function (tagName, end, attr) {
            if (!end) return "<font face=\"" + attr + "\">";else return "</font>";
        };
        UBBParser.prototype.onTag_SIZE = function (tagName, end, attr) {
            if (!end) {
                this.lastSize = attr;
                return "<size=" + attr + ">";
            } else return "</size>";
        };
        UBBParser.prototype.getTagText = function (remove) {
            var pos1 = this._readPos;
            var pos2;
            var result = "";
            while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
                if (this._text.charCodeAt(pos2 - 1) == 92) {
                    result += this._text.substring(pos1, pos2 - 1);
                    result += "[";
                    pos1 = pos2 + 1;
                } else {
                    result += this._text.substring(pos1, pos2);
                    break;
                }
            }
            if (pos2 == -1) return null;
            if (remove) this._readPos = pos2;
            return result;
        };
        UBBParser.prototype.parse = function (text, remove) {
            this._text = text;
            this.lastColor = null;
            this.lastSize = null;
            var pos1 = 0,
                pos2,
                pos3;
            var end;
            var tag, attr;
            var repl;
            var func;
            var result = "";
            while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
                if (pos2 > 0 && this._text.charCodeAt(pos2 - 1) == 92) {
                    result += this._text.substring(pos1, pos2 - 1);
                    result += "[";
                    pos1 = pos2 + 1;
                    continue;
                }
                result += this._text.substring(pos1, pos2);
                pos1 = pos2;
                pos2 = this._text.indexOf("]", pos1);
                if (pos2 == -1) break;
                end = this._text.charAt(pos1 + 1) == '/';
                tag = this._text.substring(end ? pos1 + 2 : pos1 + 1, pos2);
                this._readPos = pos2 + 1;
                attr = null;
                repl = null;
                pos3 = tag.indexOf("=");
                if (pos3 != -1) {
                    attr = tag.substring(pos3 + 1);
                    tag = tag.substring(0, pos3);
                }
                tag = tag.toLowerCase();
                func = this._handlers[tag];
                if (func != null) {
                    repl = func.call(this, tag, end, attr);
                    if (repl != null && !remove) result += repl;
                } else result += this._text.substring(pos1, this._readPos);
                pos1 = this._readPos;
            }
            if (pos1 < this._text.length) result += this._text.substr(pos1);
            this._text = null;
            return result;
        };
        UBBParser.inst = new UBBParser();
        return UBBParser;
    }();
    fgui.UBBParser = UBBParser;
})(fgui || (fgui = {}));
var fgui;
(function (fgui) {
    var ToolSet = function () {
        function ToolSet() {}
        ToolSet.startsWith = function (source, str, ignoreCase) {
            if (!source) return false;else if (source.length < str.length) return false;else {
                source = source.substring(0, str.length);
                if (!ignoreCase) return source == str;else return source.toLowerCase() == str.toLowerCase();
            }
        };
        ToolSet.encodeHTML = function (str) {
            if (!str) return "";else return str.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace("'", "&apos;");
        };
        ToolSet.clamp = function (value, min, max) {
            if (value < min) value = min;else if (value > max) value = max;
            return value;
        };
        ToolSet.clamp01 = function (value) {
            if (value > 1) value = 1;else if (value < 0) value = 0;
            return value;
        };
        ToolSet.lerp = function (start, end, percent) {
            return start + percent * (end - start);
        };
        ToolSet.getTime = function () {
            var currentTime = new Date();
            return currentTime.getMilliseconds() / 1000;
        };
        ToolSet.toGrayed = function (c) {
            var v = c.getR() * 0.299 + c.getG() * 0.587 + c.getB() * 0.114;
            return new cc.Color(v, v, v, c.getA());
        };
        ToolSet.repeat = function (t, length) {
            return t - Math.floor(t / length) * length;
        };
        ToolSet.distance = function (x1, y1, x2, y2) {
            return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
        };
        return ToolSet;
    }();
    fgui.ToolSet = ToolSet;
})(fgui || (fgui = {}));
var UI;
(function (UI) {
    var PackageInfo = function () {
        function PackageInfo() {}
        PackageInfo.loadPromise = new Collection.Dictionary();
        return PackageInfo;
    }();
    var s_packageCache = {};
    function registerPackage(name, load, unload) {
        var info = s_packageCache[name];
        if (info) {
            cc.error("registerPackage failed, " + name + " already exists!");
            return;
        }
        info = new PackageInfo();
        info.count = 0;
        info.load = load;
        info.unload = unload;
        s_packageCache[name] = info;
    }
    UI.registerPackage = registerPackage;
    function loadPackage(name, force) {
        if (force === void 0) {
            force = false;
        }
        return __awaiter(this, void 0, void 0, function () {
            var info, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        info = s_packageCache[name];
                        if (!info) {
                            cc.error("loadPackage error " + name + ", no load function");
                            return [2];
                        }
                        if (!(info.count == 0 || force)) return [3, 2];
                        cc.log("loadPackage " + name);
                        info.count++;
                        p = info.load();
                        PackageInfo.loadPromise.setValue(name, p);
                        return [4, p];
                    case 1:
                        _a.sent();
                        PackageInfo.loadPromise.remove(name);
                        return [3, 4];
                    case 2:
                        info.count++;
                        if (!PackageInfo.loadPromise.containsKey(name)) return [3, 4];
                        return [4, PackageInfo.loadPromise.getValue(name)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        return [2];
                }
            });
        });
    }
    UI.loadPackage = loadPackage;
    function unloadPackage(name, force) {
        if (force === void 0) {
            force = false;
        }
        var info = s_packageCache[name];
        if (!info) {
            cc.error("unloadPackage error $[name], no load/unload function");
            return;
        }
        info.count--;
        if (info.count <= 0 || force) {
            info.unload();
            info.count = 0;
            cc.log("unloadPackage " + name);
        }
    }
    UI.unloadPackage = unloadPackage;
    function registerItemExtension(pkgName, itemName, cls) {
        var url = fgui.UIPackage.getItemURL(pkgName, itemName);
        if (url) {
            fgui.UIObjectFactory.setPackageItemExtension(url, cls);
        } else {
            console.error("can't find ", pkgName, ": ", itemName);
        }
    }
    UI.registerItemExtension = registerItemExtension;
    function createObjectAsync(pkgName, resName, userClass) {
        if (userClass === void 0) {
            userClass = null;
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(Core.DeviceUtils.isiOS() && !Core.DeviceUtils.isMiniGame())) return [3, 1];
                        return [2, fgui.UIPackage.createObject(pkgName, resName, userClass)];
                    case 1:
                        return [4, new Promise(function (resolve) {
                            var asyncOp = new fgui.AsyncOperation();
                            asyncOp.callback = function (obj) {
                                resolve(obj);
                            };
                            asyncOp.createObject(pkgName, resName, userClass);
                        })];
                    case 2:
                        return [2, _a.sent()];
                }
            });
        });
    }
    UI.createObjectAsync = createObjectAsync;
    function setPackageItemExtension() {
        UI.registerItemExtension("common", "closeBg", UI.CloseBg);
    }
    UI.setPackageItemExtension = setPackageItemExtension;
})(UI || (UI = {}));
var GameEvent = function () {
    function GameEvent() {}
    GameEvent.OpenView = "OpenView";
    return GameEvent;
}();
var CCCExtend = function () {
    function CCCExtend() {}
    CCCExtend.init = function () {
        this._extendRenderFlow();
    };
    CCCExtend._extendRenderFlow = function () {
        var FlagOfset = 0;
        var DONOTHING = 1 << FlagOfset++;
        var BREAK_FLOW = 1 << FlagOfset++;
        var LOCAL_TRANSFORM = 1 << FlagOfset++;
        var WORLD_TRANSFORM = 1 << FlagOfset++;
        var TRANSFORM = LOCAL_TRANSFORM | WORLD_TRANSFORM;
        var UPDATE_RENDER_DATA = 1 << FlagOfset++;
        var OPACITY = 1 << FlagOfset++;
        var COLOR = 1 << FlagOfset++;
        var OPACITY_COLOR = OPACITY | COLOR;
        var RENDER = 1 << FlagOfset++;
        var CHILDREN = 1 << FlagOfset++;
        var POST_RENDER = 1 << FlagOfset++;
        var FINAL = 1 << FlagOfset++;
        var renderFlow = cc["RenderFlow"];
        var _batcher = renderFlow.getBachther();
        var __levelBatcher = [];
        var __renderQueue = [];
        Object.defineProperty(renderFlow.prototype, "_opacity", {
            value: function value(node) {
                _batcher.parentOpacityDirty++;
                if (node["__levelRender"] && __levelBatcher[node["__itemIndex"]]) {
                    __levelBatcher[node["__itemIndex"]].parentOpacityDirty = 1;
                }
                this._next._func(node);
                node._renderFlag &= ~OPACITY;
                if (node["__levelRender"] && __levelBatcher[node["__itemIndex"]] && node["__lastChildren"]) {
                    __levelBatcher[node.__itemIndex].parentOpacityDirty = 0;
                }
                _batcher.parentOpacityDirty--;
            }
        });
        Object.defineProperty(renderFlow.prototype, "_worldTransform", {
            value: function value(node) {
                _batcher.worldMatDirty++;
                if (node["__levelRender"] && __levelBatcher[node["__itemIndex"]]) {
                    __levelBatcher[node["__itemIndex"]].worldMatDirty = 1;
                }
                var t = node._matrix;
                var trs = node._trs;
                var tm = t.m;
                tm[12] = trs[0];
                tm[13] = trs[1];
                tm[14] = trs[2];
                node._mulMat(node._worldMatrix, node._parent._worldMatrix, t);
                node._renderFlag &= ~WORLD_TRANSFORM;
                this._next._func(node);
                if (node["__levelRender"] && __levelBatcher[node["__itemIndex"]] && node["__lastChildren"]) {
                    __levelBatcher[node.__itemIndex].worldMatDirty = 0;
                }
                _batcher.worldMatDirty--;
            }
        });
        var levelSplit = function levelSplit(node, lv, itemIndex) {
            if (!__renderQueue[lv]) {
                __renderQueue[lv] = [];
            }
            __renderQueue[lv].push(node);
            lv++;
            node["__renderLv"] = lv;
            node["__levelRender"] = true;
            node["__itemIndex"] = itemIndex;
            var cs = node.children;
            for (var i = 0; i < cs.length; ++i) {
                var c = cs[i];
                if (!__renderQueue[lv]) {
                    __renderQueue[lv] = [];
                }
                lv = levelSplit(c, lv, itemIndex);
            }
            return lv;
        };
        var checkLevelRender = function checkLevelRender(levelRenderNode) {
            var cs = levelRenderNode.children;
            var rootOpacityInHierarchy = levelRenderNode["opacity"] / 255;
            __levelBatcher = [];
            for (var i = 0; i < cs.length; ++i) {
                __levelBatcher.push({ worldMatDirty: 0, parentOpacityDirty: 0 });
                levelSplit(cs[i], 0, i);
            }
            while (__renderQueue.length > 0) {
                var list = __renderQueue.shift();
                if (list.length > 0) {
                    while (list.length > 0) {
                        var n = list.shift();
                        n["__lastChildren"] = __renderQueue.length == 0;
                        n["__levelRender"] = true;
                        var opacityInHierarchy = n.parent["__opacityInHierarchy"];
                        if (opacityInHierarchy === undefined) {
                            opacityInHierarchy = rootOpacityInHierarchy;
                        }
                        var opacity = opacityInHierarchy * (n["_opacity"] / 255);
                        n["__opacityInHierarchy"] = opacity;
                        var cullingMask = n["_cullingMask"];
                        var worldMatDirty = 0;
                        if (__levelBatcher[n["__itemIndex"]]) {
                            worldMatDirty = __levelBatcher[n["__itemIndex"]].worldMatDirty || 0;
                        }
                        var parentOpacityDirty = 0;
                        if (__levelBatcher[n["__itemIndex"]]) {
                            parentOpacityDirty = __levelBatcher[n["__itemIndex"]].parentOpacityDirty || 0;
                        }
                        var worldTransformFlag = worldMatDirty || _batcher.worldMatDirty ? WORLD_TRANSFORM : 0;
                        var worldOpacityFlag = parentOpacityDirty || _batcher.parentOpacityDirty ? OPACITY_COLOR : 0;
                        var worldDirtyFlag = worldTransformFlag | worldOpacityFlag;
                        n["_renderFlag"] |= worldDirtyFlag;
                        if (!n["_activeInHierarchy"] || n["_opacity"] === 0) continue;
                        n["_cullingMask"] = n.groupIndex === 0 ? cullingMask : 1 << n.groupIndex;
                        var colorVal = n["_color"]._val;
                        n["_color"]._fastSetA(n["_opacity"] * opacity);
                        renderFlow.flows[n["_renderFlag"]]._func(n);
                        n["_color"]._val = colorVal;
                    }
                }
            }
        };
        Object.defineProperty(renderFlow.prototype, "_children", {
            value: function value(node) {
                if (node.__levelRender) return;
                var cullingMask = node._cullingMask;
                var enableLevelRender = node["__enableLevelRender"];
                var parentOpacityInHierarchy = node.parent ? node.parent["__opacityInHierarchy"] : undefined;
                var parentOpacity = parentOpacityInHierarchy !== undefined ? parentOpacityInHierarchy : _batcher.parentOpacity;
                if (!enableLevelRender && !node.__levelRender) {
                    var opacity = parentOpacity *= node._opacity / 255;
                    node["__opacityInHierarchy"] = opacity;
                    var worldTransformFlag = _batcher.worldMatDirty ? WORLD_TRANSFORM : 0;
                    var worldOpacityFlag = _batcher.parentOpacityDirty ? OPACITY_COLOR : 0;
                    var worldDirtyFlag = worldTransformFlag | worldOpacityFlag;
                    var children = node._children;
                    for (var i = 0, l = children.length; i < l; i++) {
                        var c = children[i];
                        c._renderFlag |= worldDirtyFlag;
                        c["__opacityInHierarchy"] = c._opacity * opacity / 255;
                        if (!c._activeInHierarchy || c._opacity === 0) continue;
                        c._cullingMask = c.groupIndex === 0 ? cullingMask : 1 << c.groupIndex;
                        var colorVal = c._color._val;
                        c._color._fastSetA(c._opacity * opacity);
                        renderFlow.flows[c._renderFlag]._func(c);
                        c._color._val = colorVal;
                    }
                } else {
                    checkLevelRender(node);
                }
                _batcher.parentOpacity = parentOpacity;
                this._next._func(node);
            }
        });
    };
    return CCCExtend;
}();
var HotUpdateHelper = function () {
    function HotUpdateHelper() {}
    Object.defineProperty(HotUpdateHelper, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new HotUpdateHelper();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    HotUpdateHelper.prototype._checkCb = function (event) {
        cc.log('[checkCb]: ' + event.getEventCode());
        var panel = this.panel;
        switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                panel.info.string = "No local manifest file found, hot update skipped.";
                break;
            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                panel.info.string = "Fail to download manifest file, hot update skipped.";
                break;
            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                panel.info.string = "Already up to date with the latest remote version.";
                break;
            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
                panel.info.string = 'New version found, please try to update. (' + this._am.getTotalBytes() + ')';
                panel.checkBtn.active = false;
                panel.fileProgress.progress = 0;
                panel.byteProgress.progress = 0;
                break;
            default:
                return;
        }
        this._am.setEventCallback(null);
        this._checkListener = null;
        this._updating = false;
        this._manifestUrl = null;
        this._canRetry = null;
        this._failCount = 0;
    };
    HotUpdateHelper.prototype.updateCb = function (event) {
        var needRestart = false;
        var failed = false;
        switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                this.panel.info.string = 'No local manifest file found, hot update skipped.';
                failed = true;
                break;
            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
                this.panel.byteProgress.progress = event.getPercent();
                this.panel.fileProgress.progress = event.getPercentByFile();
                this.panel.fileLabel.string = event.getDownloadedFiles() + ' / ' + event.getTotalFiles();
                this.panel.byteLabel.string = event.getDownloadedBytes() + ' / ' + event.getTotalBytes();
                var msg = event.getMessage();
                if (msg) {
                    this.panel.info.string = 'Updated file: ' + msg;
                }
                break;
            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                this.panel.info.string = 'Fail to download manifest file, hot update skipped.';
                failed = true;
                break;
            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                this.panel.info.string = 'Already up to date with the latest remote version.';
                failed = true;
                break;
            case jsb.EventAssetsManager.UPDATE_FINISHED:
                this.panel.info.string = 'Update finished. ' + event.getMessage();
                needRestart = true;
                break;
            case jsb.EventAssetsManager.UPDATE_FAILED:
                this.panel.info.string = 'Update failed. ' + event.getMessage();
                this.panel.retryBtn.active = true;
                this._updating = false;
                this._canRetry = true;
                break;
            case jsb.EventAssetsManager.ERROR_UPDATING:
                this.panel.info.string = 'Asset update error: ' + event.getAssetId() + ', ' + event.getMessage();
                break;
            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
                this.panel.info.string = event.getMessage();
                break;
            default:
                break;
        }
        if (failed) {
            this._am.setEventCallback(null);
            this._updateListener = null;
            this._updating = false;
        }
        if (needRestart) {
            this._am.setEventCallback(null);
            this._updateListener = null;
            var searchPaths = jsb.fileUtils.getSearchPaths();
            var newPaths = this._am.getLocalManifest().getSearchPaths();
            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift.apply(searchPaths, newPaths);
            cc.sys.localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths);
            cc.game.restart();
        }
    };
    HotUpdateHelper.prototype.retry = function () {
        if (!this._updating && this._canRetry) {
            this.panel.retryBtn.active = false;
            this._canRetry = false;
            this.panel.info.string = 'Retry failed Assets...';
            this._am.downloadFailedAssets();
        }
    };
    ;
    HotUpdateHelper.prototype.checkUpdate = function () {
        if (this._updating) {
            this.panel.info.string = 'Checking or updating ...';
            return;
        }
        if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            var url = this._manifestUrl.nativeUrl;
            if (cc.loader.md5Pipe) {
                url = cc.loader.md5Pipe.transformURL(url);
            }
            this._am.loadLocalManifest(url);
        }
        if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            this.panel.info.string = 'Failed to load local manifest ...';
            return;
        }
        this._am.setEventCallback(this._checkCb.bind(this));
        this._am.checkUpdate();
        this._updating = true;
    };
    HotUpdateHelper.prototype.hotUpdate = function () {
        if (this._am && !this._updating) {
            this._am.setEventCallback(this.updateCb.bind(this));
            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
                console.log("this._am state is UNINITED");
                var url = this._manifestUrl.nativeUrl;
                if (cc.loader.md5Pipe) {
                    url = cc.loader.md5Pipe.transformURL(url);
                }
                this._am.loadLocalManifest(url);
            }
            this._failCount = 0;
            this._am.update();
            this.panel.updateBtn.active = false;
            this._updating = true;
        }
    };
    HotUpdateHelper.prototype.init = function () {
        console.log("hotupdateHelper init");
        this.panel = cc.find("Canvas/update_panel").getComponent("UpdatePanel");
        cc.loader.loadRes("project", cc.Asset, function (err, asset) {
            this._manifestUrl = asset;
            console.log("loaded this._manifestUrl:", this._manifestUrl);
        }.bind(this));
        if (!cc.sys.isNative) {
            return;
        }
        this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') + 'blackjack-remote-asset';
        console.log('Storage path for remote asset : ' + this._storagePath);
        this._versionCompareHandle = function (versionA, versionB) {
            cc.log("JS Custom Version Compare: version A is " + versionA + ', version B is ' + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');
            for (var i = 0; i < vA.length; ++i) {
                var a = parseInt(vA[i]);
                var b = parseInt(vB[i] || 0);
                if (a === b) {
                    continue;
                } else {
                    return a - b;
                }
            }
            if (vB.length > vA.length) {
                return -1;
            } else {
                return 0;
            }
        };
        this._am = new jsb.AssetsManager('', this._storagePath, this._versionCompareHandle);
        var panel = this.panel;
        this._am.setVerifyCallback(function (path, asset) {
            var compressed = asset.compressed;
            var expectedMD5 = asset.md5;
            var relativePath = asset.path;
            var size = asset.size;
            if (compressed) {
                panel.info.string = "Verification passed : " + relativePath;
                return true;
            } else {
                panel.info.string = "Verification passed : " + relativePath + ' (' + expectedMD5 + ')';
                return true;
            }
        });
        this.panel.info.string = 'Hot update is ready, please check or directly update.';
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            this._am.setMaxConcurrentTask(2);
            this.panel.info.string = "Max concurrent tasks count have been limited to 2";
        }
        this.panel.fileProgress.progress = 0;
        this.panel.byteProgress.progress = 0;
    };
    HotUpdateHelper.prototype.onDestroy = function () {
        if (this._updateListener) {
            this._am.setEventCallback(null);
            this._updateListener = null;
        }
    };
    HotUpdateHelper._inst = null;
    return HotUpdateHelper;
}();
;
var MailItem = function (_super) {
    __extends(MailItem, _super);
    function MailItem() {
        return _super.call(this) || this;
    }
    MailItem.prototype.onConstruct = function () {
        this._timeText = this.getChild("timeText").asTextField;
        this._readController = this.getController("IsRead");
        this._fetchController = this.getController("c1");
        this._trans = this.getTransition("t0");
    };
    MailItem.prototype.setTime = function (value) {
        this._timeText.text = value;
    };
    MailItem.prototype.setRead = function (value) {
        this._readController.selectedIndex = value ? 1 : 0;
    };
    MailItem.prototype.setFetched = function (value) {
        this._fetchController.selectedIndex = value ? 1 : 0;
    };
    MailItem.prototype.playEffect = function (delay) {
        this.visible = false;
        this._trans.play(null, 1, delay);
    };
    return MailItem;
}(fgui.GButton);
var MailItemPool = function (_super) {
    __extends(MailItemPool, _super);
    function MailItemPool() {
        var _this = _super.call(this) || this;
        _this.count = MailItemPool._items.length;
        return _this;
    }
    MailItemPool.prototype.clear = function () {};
    MailItemPool.prototype.getObject = function (url) {
        return MailItemPool._withDraw();
    };
    MailItemPool.prototype.returnObject = function (obj) {
        MailItemPool._deposite(obj);
    };
    MailItemPool._createItem = function () {
        var item = fgui.UIPackage.createObject("VirtualList", "mailItem", MailItem).asCom;
        if (this.itemSize == null) {
            this.itemSize = new cc.Size(item.width, item.height);
        }
        this._items.push(item);
    };
    MailItemPool.initPool = function () {
        if (this._items.length > 0) return;
        for (var i = 0; i < this._initSize; ++i) {
            Core.FrameExecutor.inst.regist(this._createItem, this);
        }
        Core.FrameExecutor.inst.execute();
    };
    MailItemPool._withDraw = function () {
        if (this._items.length <= 0) {
            return fgui.UIPackage.createObject("VirtualList", "mailItem", MailItem).asCom;
        } else {
            return this._items.pop();
        }
    };
    MailItemPool._deposite = function (item) {
        this._items.push(item);
    };
    MailItemPool.itemSize = cc.size(100, 200);
    MailItemPool._items = [];
    MailItemPool._initSize = 1;
    return MailItemPool;
}(fgui.GObjectPool);
var Entry = function () {
    function Entry() {}
    Object.defineProperty(Entry, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new Entry();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    Entry.prototype.enterMain = function () {
        WXConfig.inst;
        Test.inst.run();
    };
    Entry._inst = null;
    return Entry;
}();
function main() {
    Entry.inst.enterMain();
}
function start() {}
function update() {
    fgui.AsyncOperation.updateRunners();
}
function destroy() {}
function _callLaters() {
    var functionList;
    var thisList;
    var argsList;
    if (egret.$callLaterFunctionList.length > 0) {
        functionList = egret.$callLaterFunctionList;
        egret.$callLaterFunctionList = [];
        thisList = egret.$callLaterThisList;
        egret.$callLaterThisList = [];
        argsList = egret.$callLaterArgsList;
        egret.$callLaterArgsList = [];
    }
    if (functionList) {
        console.log("executes callLaters");
        var length_1 = functionList.length;
        for (var i = 0; i < length_1; i++) {
            var func = functionList[i];
            if (func != null) {
                func.apply(thisList[i], argsList[i]);
            }
        }
    }
}
if (!window["GameLogic"]) {
    window["GameLogic"] = {};
}
window["GameLogic"]["entry"] = main;
window["GameLogic"]["start"] = start;
window["GameLogic"]["update"] = update;
window["GameLogic"]["destroy"] = destroy;
var Test = function () {
    function Test() {}
    Object.defineProperty(Test, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new Test();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    Test.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var btn;
            return __generator(this, function (_a) {
                console.log("run start");
                window["timerTestJSCallBck"] = Test.timerTestJSCallBck;
                cc.dynamicAtlasManager.enabled = false;
                cc.debug.setDisplayStats(false);
                this.testHotUpdate();
                btn = cc.find("Canvas/close");
                if (btn) {
                    btn.on(cc.Node.EventType.TOUCH_END, function () {
                        cc.game.end();
                    });
                }
                return [2];
            });
        });
    };
    Test.prototype.test1 = function () {
        cc.loader.loadRes('card_m/204', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var sprite = cc.find("Canvas/sprite").addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
    };
    Test.prototype.test2 = function () {
        cc.loader.loadRes('card_m/204', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var rootNode = cc.find("Canvas/Root");
            var sprite = rootNode.addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
    };
    Test.prototype.test3 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var xmlReq;
            return __generator(this, function (_a) {
                xmlReq = cc.loader.getXMLHttpRequest();
                xmlReq.open("GET", "https://fshunj.oss-cn-guangzhou.aliyuncs.com/json/app.json");
                xmlReq.responseType = "text";
                xmlReq.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                xmlReq.onreadystatechange = function () {
                    if (xmlReq.readyState == 4) {
                        var errcode = 0;
                        if (xmlReq.status >= 200 && xmlReq.status <= 304) {
                            var response = JSON.parse(xmlReq.responseText);
                            console.log("json issss", response);
                            var code = response["code"];
                            if (code == 0) {}
                        } else {
                            errcode = 9000;
                        }
                        console.log("_checkVersion request error status: ", xmlReq.status);
                    }
                };
                xmlReq.onload = function () {};
                xmlReq.ontimeout = function () {};
                xmlReq.onerror = function () {};
                xmlReq.send();
                return [2];
            });
        });
    };
    Test.prototype.test4 = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                console.log("jsb.fileUtils.getSearchPaths():", jsb.fileUtils.getSearchPaths());
                console.log("jsb.fileUtils.getWritablePath()):", jsb.fileUtils.getWritablePath());
                return [2];
            });
        });
    };
    Test.prototype.testHotUpdate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var checkUpdateBtn, updateBtn, loadbtn;
            return __generator(this, function (_a) {
                console.log("testHotUpdate start");
                HotUpdateHelper.inst.init();
                checkUpdateBtn = cc.find("Canvas/update_panel/check_btn");
                updateBtn = cc.find("Canvas/update_panel/update_btn");
                loadbtn = cc.find("Canvas/update_panel/load_btn");
                checkUpdateBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    HotUpdateHelper.inst.checkUpdate();
                });
                updateBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    HotUpdateHelper.inst.hotUpdate();
                });
                loadbtn.on(cc.Node.EventType.TOUCH_END, function () {
                    cc.loader.loadRes('card_m/204', cc.SpriteFrame, function (err, spriteFrame) {
                        if (err) {
                            cc.error(err.message || err);
                            return;
                        }
                        var sprite = cc.find("Canvas/update_panel/spr").getComponent(cc.Sprite);
                        sprite.spriteFrame = spriteFrame;
                    });
                });
                return [2];
            });
        });
    };
    Test.prototype.test6 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testBtn;
            return __generator(this, function (_a) {
                console.log("test6 start");
                testBtn = cc.find("Canvas/Root/testBtn");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    if (Core.DeviceUtils.isAndroid()) {
                        console.log("call Android!!!");
                        jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showAd", "(Ljava/lang/String;)V", "测试");
                        console.log("after call Android!!!");
                    }
                }, this);
                return [2];
            });
        });
    };
    Test.prototype.test100 = function () {
        jsb.reflection.callStaticMethod("AppController", "oneHundred");
    };
    Test.prototype.test200 = function () {
        var result = jsb.reflection.callStaticMethod("AppController", "twoHundred");
        console.log("result is ", result);
    };
    Test.prototype.test300 = function () {
        var result = "",
            adId = "cocos10086",
            age = 18;
        result = jsb.reflection.callStaticMethod("AppController", "threeHundred:withContent:", adId, age);
        console.log("返回值", result);
    };
    Test.prototype.test400 = function () {
        var result = "",
            adId = "cocos10086",
            age = 18;
        jsb.reflection.callStaticMethod("AppController", "fourHundred:withContent:", adId, age);
        console.log("无 返回值");
    };
    Test.prototype.test500 = function () {
        var result = "",
            sec = 1;
        result = jsb.reflection.callStaticMethod("AppController", "fiveHundred:", sec);
        console.log("返回值", result);
    };
    Test.timerTestJSCallBck = function (param) {
        console.log("js 收到：", param);
    };
    Test.prototype.testShowRewardVedio = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testBtn;
            return __generator(this, function (_a) {
                testBtn = cc.find("Canvas/Root/testBtn");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    if (Core.DeviceUtils.isAndroid()) {
                        console.log("call Android!!!");
                        jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showRewardVideoAd", "(Ljava/lang/String;)V", "ff");
                        console.log("after call Android!!!");
                    }
                }, this);
                return [2];
            });
        });
    };
    Test.prototype.testInsertAd = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testBtn;
            return __generator(this, function (_a) {
                testBtn = cc.find("Canvas/Root/testBtn");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    if (Core.DeviceUtils.isAndroid()) {
                        console.log("call Android!!!");
                        jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showInsertAd", "(Ljava/lang/String;)V", "ff");
                        console.log("after call Android!!!");
                    }
                }, this);
                return [2];
            });
        });
    };
    Test.prototype.testBanner = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testBtn;
            return __generator(this, function (_a) {
                testBtn = cc.find("Canvas/Root/testBtn");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    if (Core.DeviceUtils.isAndroid()) {
                        console.log("call Android!!!");
                        jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "initBannerAd", "(Ljava/lang/String;)V", "ff");
                        console.log("after call Android!!!");
                    }
                }, this);
                return [2];
            });
        });
    };
    Test.prototype.test8 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testBtn;
            return __generator(this, function (_a) {
                cc.director.loadScene("SDKScene");
                console.log("test8 start");
                testBtn = cc.find("Canvas/Root/btn_Splash");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    jsb.reflection.callStaticMethod("AppController", "showSplashAd");
                }, this);
                testBtn = cc.find("Canvas/Root/btn_rewardVideo");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    jsb.reflection.callStaticMethod("AppController", "showRewardAd");
                }, this);
                testBtn = cc.find("Canvas/Root/btn_quanPing");
                testBtn.on(cc.Node.EventType.TOUCH_END, function () {
                    jsb.reflection.callStaticMethod("AppController", "showQuanPingAd");
                }, this);
                return [2];
            });
        });
    };
    Test.prototype.testRes1 = function () {
        cc.loader.loadRes('card_m/205', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var s1 = cc.find("Canvas/Root/s1");
            var sprite = s1.addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
        cc.loader.loadRes('card_m/205', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var s2 = cc.find("Canvas/Root/s2");
            var sprite = s2.addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
        var buttonNode = cc.find("Canvas/Root/testBtn");
        buttonNode.on(cc.Node.EventType.TOUCH_END, function () {
            var sprite = cc.find("Canvas/Root/s1").getComponent(cc.Sprite);
            cc.loader.release(sprite.spriteFrame.getTexture());
        });
    };
    Test.prototype.testMat = function () {
        console.log(new cc.Mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1).toString());
    };
    Test.prototype.testSpriteMat = function () {
        var spriteNode = cc.find("Canvas/sprite");
        var spriteNode2 = cc.find("Canvas/sprite");
    };
    Test._inst = null;
    return Test;
}();
var WarFlagMgr = function (_super) {
    __extends(WarFlagMgr, _super);
    function WarFlagMgr() {
        return _super.call(this) || this;
    }
    WarFlagMgr_1 = WarFlagMgr;
    Object.defineProperty(WarFlagMgr, "inst", {
        get: function get() {
            if (!WarFlagMgr_1._inst) {
                WarFlagMgr_1._inst = new WarFlagMgr_1();
            }
            return WarFlagMgr_1._inst;
        },
        enumerable: false,
        configurable: true
    });
    WarFlagMgr.prototype.init = function () {};
    Object.defineProperty(WarFlagMgr.prototype, "openWarHomeFinished", {
        get: function get() {
            return false;
        },
        set: function set(val) {
            this._openWarHomeFinished = val;
        },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    var WarFlagMgr_1;
    WarFlagMgr = WarFlagMgr_1 = __decorate([MVC.autoModelName], WarFlagMgr);
    return WarFlagMgr;
}(MVC.Model);
var Core;
(function (Core) {
    var BaseView = function (_super) {
        __extends(BaseView, _super);
        function BaseView(parent) {
            var _this = _super.call(this) || this;
            _this._concertBackKey = true;
            _this.forceCloseFlag = false;
            if (parent) {
                _this._myParent = parent;
            } else {
                _this._myParent = fgui.GRoot.inst;
            }
            _this._isInit = false;
            _this._viewCommon = new Core.ViewCommon(_this);
            return _this;
        }
        BaseView.prototype.handleBackKey = function () {
            var backBtnChild = this.getChild("closeBtn");
            if (!backBtnChild) {
                backBtnChild = this.getChild("backBtn");
            }
            if (backBtnChild) {
                var backBtn = backBtnChild.asButton;
                backBtn.fireClick();
                return true;
            } else {
                return false;
            }
        };
        Object.defineProperty(BaseView.prototype, "isConcernBackKey", {
            get: function get() {
                return this._concertBackKey;
            },
            enumerable: false,
            configurable: true
        });
        BaseView.prototype.adjust = function (display, adjustType) {
            if (adjustType === void 0) {
                adjustType = Core.AdjustType.EXACT_FIT;
            }
            if (adjustType == Core.AdjustType.EXCEPT_MARGIN) {
                this._viewCommon.adjust(display, Core.AdjustType.EXACT_FIT);
                display.height -= window.support.topMargin;
            } else {
                this._viewCommon.adjust(display, adjustType);
            }
        };
        BaseView.prototype.setVisible = function (flag) {
            this.hidden = !flag;
            console.log("set hidden ", this.name, this.hidden);
        };
        BaseView.prototype.isInit = function () {
            return this._isInit;
        };
        BaseView.prototype.isShow = function () {
            return this.parent != null && this.visible;
        };
        BaseView.prototype.addToParent = function (parent) {
            if (parent) {
                this._myParent = parent;
            }
            if (this.parent != this._myParent) {
                this._myParent.addChild(this);
            }
        };
        BaseView.prototype.removeFromParent = function () {
            if (this.parent) {
                this.parent.removeChild(this);
            }
        };
        BaseView.prototype.initUI = function () {
            this._isInit = true;
        };
        BaseView.prototype.open = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    Core.EventCenter.inst.dispatchEventWith(GameEvent.OpenView, false, this);
                    Core.EventCenter.inst.addEventListener(Core.Event.OpenViewEvt, this._onViewOpen, this);
                    Core.EventCenter.inst.addEventListener(Core.Event.CloseViewEvt, this._onViewClose, this);
                    return [2];
                });
            });
        };
        BaseView.prototype.close = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2];
                });
            });
        };
        BaseView.prototype._onViewOpen = function (evt) {
            var name = evt.data;
        };
        BaseView.prototype._onViewClose = function (evt) {
            var name = evt.data;
        };
        BaseView.prototype.toTopLayer = function () {
            Core.LayerManager.inst.topLayer.addChild(this);
        };
        BaseView.prototype.toMainLayer = function () {
            Core.LayerManager.inst.mainLayer.addChild(this);
        };
        BaseView.prototype.destroy = function () {
            this.dispose();
        };
        BaseView.prototype.dispose = function () {
            Core.EventCenter.inst.removeEventListener(Core.Event.OpenViewEvt, this._onViewOpen, this);
            Core.EventCenter.inst.removeEventListener(Core.Event.CloseViewEvt, this._onViewClose, this);
            this._myParent = null;
            this._viewCommon.destroy();
            _super.prototype.dispose.call(this);
        };
        BaseView.prototype.getNode = function (nodeName) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this._viewCommon.getNode(nodeName)];
                });
            });
        };
        BaseView.prototype.destroyWhileClose = function () {
            return true;
        };
        return BaseView;
    }(fgui.GComponent);
    Core.BaseView = BaseView;
})(Core || (Core = {}));
var WarHomeView = function (_super) {
    __extends(WarHomeView, _super);
    function WarHomeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ;
    WarHomeView.open = function () {
        Core.ViewManager.inst.open("warHomeView");
    };
    WarHomeView.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4, Core.ViewManager.inst.close("warHomeView")];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    WarHomeView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.adjust(this.getChild("bg"));
        this.getChild("top").height += window.support.topMargin;
        this.center();
    };
    WarHomeView.prototype._openWarHomeFinished = function () {
        console.log("_openWarHomeFinished called");
    };
    WarHomeView.prototype.refreshUI = function () {};
    Object.defineProperty(WarHomeView, "inst", {
        get: function get() {
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    ;
    WarHomeView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4, _super.prototype.open.apply(this, param)];
                    case 1:
                        _a.sent();
                        this.refreshUI();
                        MVC.Controller.inst.bind(WarFlagMgr.inst, this);
                        return [2];
                }
            });
        });
    };
    WarHomeView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MVC.Controller.inst.unbind(WarFlagMgr.inst, this);
                        WarHomeView._inst = null;
                        return [4, _super.prototype.close.apply(this, param)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    __decorate([MVC.observe(WarFlagMgr, "openWarHomeFinished")], WarHomeView.prototype, "_openWarHomeFinished", null);
    return WarHomeView;
}(Core.BaseView);
var TestFgui = function () {
    function TestFgui() {}
    Object.defineProperty(TestFgui, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestFgui();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestFgui.prototype.run = function () {
        var _this = this;
        console.log("TestFgui start");
        CCCExtend.init();
        fgui.addLoadHandler();
        fgui.GRoot.create();
        fgui.UIPackage.loadPackage("UI/common", true, function () {
            console.log("common loaded");
            _this.test_view();
        });
    };
    TestFgui.prototype.test1 = function () {
        fgui.UIPackage.loadPackage("UI/Basics", true, function () {
            var view = fgui.UIPackage.createObject("Basics", "com").asCom;
            fgui.GRoot.inst.addChild(view);
            var scene = cc.director.getScene();
        });
    };
    TestFgui.prototype.testTouch = function () {
        var _this = this;
        fgui.UIPackage.loadPackage("UI/Basics", true, function () {
            var view = fgui.UIPackage.createObject("Basics", "com").asCom;
            fgui.GRoot.inst.addChild(view);
            var bro1 = view.getChild("bro1").asCom;
            bro1.onClick(function () {
                console.log("bro1.onClick");
            }, _this);
            var bro2 = view.getChild("bro2").asCom;
            bro2.onClick(function () {
                console.log("bro2.onClick");
            }, _this);
        });
    };
    TestFgui.prototype.testNormalList = function () {
        console.log("testNormalList");
        fgui.UIPackage.loadPackage("UI/ListEffect", true, function () {
            fgui.UIObjectFactory.setExtension("ui://ListEffect/mailItem", MailItem);
            var view = fgui.UIPackage.createObject("ListEffect", "Main").asCom;
            view.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height);
            fgui.GRoot.inst.addChild(view);
            var list = view.getChild("mailList").asList;
            for (var i = 0; i < 1000; i++) {
                var item = list.addItemFromPool();
                item.setFetched(i % 3 == 0);
                item.setRead(i % 2 == 0);
                item.setTime("5 Nov 2015 16:24:33");
                item.title = "Mail title here";
            }
            list.ensureBoundsCorrect();
            var delay = 0;
            for (var i = 0; i < 10; i++) {
                var item = list.getChildAt(i);
                if (list.isChildInView(item)) {
                    item.playEffect(delay);
                    delay += 0.2;
                } else break;
            }
        });
    };
    TestFgui.prototype._renderListItem = function (index, obj) {
        var item = obj;
        item.setFetched(index % 3 == 0);
        item.setRead(index % 2 == 0);
        item.setTime("5 Nov 2015 16:24:33");
        item.title = index + " Mail title here";
    };
    TestFgui.prototype.testVirtualList = function () {
        var _this = this;
        console.log("testVirtualList");
        fgui.UIPackage.loadPackage("UI/VirtualList", true, function () {
            fgui.UIObjectFactory.setExtension("ui://VirtualList/mailItem", MailItem);
            var view = fgui.UIPackage.createObject("VirtualList", "Main").asCom;
            view.makeFullScreen();
            fgui.GRoot.inst.addChild(view);
            view.getChild("n6").onClick(function () {
                list.addSelection(500, true);
            }, _this);
            view.getChild("n7").onClick(function () {
                list.scrollPane.scrollTop();
            }, _this);
            view.getChild("n8").onClick(function () {
                list.scrollPane.scrollBottom();
            }, _this);
            var list = view.getChild("mailList").asList;
            var com = list.scrollPane._container;
            com["__enableLevelRender"] = true;
            list.setVirtual();
            list.itemRenderer = _this._renderListItem.bind(_this);
            list.numItems = 1000;
        });
    };
    TestFgui.prototype._renderItemList = function (index, obj) {
        var item = obj;
        item.setFetched(index % 3 == 0);
        item.setRead(index % 2 == 0);
        item.setTime("5 Nov 2015 16:24:33");
        item.title = index + " Mail title here";
        console.log("herer");
    };
    TestFgui.prototype.test_UI_VirtualList = function () {
        var _this = this;
        fgui.UIPackage.loadPackage("UI/VirtualList", true, function () {
            var view = fgui.UIPackage.createObject("VirtualList", "simpleCom").asCom;
            fgui.GRoot.inst.addChild(view);
            var listHolder = view.getChild("loader").asLoader;
            var vlist = new UI.VirtualList(view, listHolder);
            console.log("ddd");
            var com = vlist.displayListContainer.getChildByName("GComponent");
            var con = com.getChildByName("Container");
            con["__enableLevelRender"] = true;
            vlist.conf = {
                col: 1,
                rowGap: 1,
                itemSize: MailItemPool.itemSize,
                itemClass: MailItem,
                itemPool: new MailItemPool(),
                itemRenderer: _this._renderItemList.bind(_this)
            };
            vlist.numItems = 1000;
        });
    };
    TestFgui.prototype.test_view = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        UI.registerPackage("war", this.loadEvent, this.unloadEvent);
                        Core.ViewManager.inst.registerUIView("war", "warHomeView", WarHomeView);
                        return [4, UI.loadPackage("war")];
                    case 1:
                        _a.sent();
                        Core.ViewManager.inst.open("warHomeView");
                        WarFlagMgr.inst.openWarHomeFinished = true;
                        return [2];
                }
            });
        });
    };
    TestFgui.prototype.loadEvent = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("loadEvent is called");
                        return [4, RES.loadPackage("UI/war", true, true)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    TestFgui.prototype.unloadEvent = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                console.log("unloadEvent is called");
                RES.unloadPackage("UI/war");
                return [2];
            });
        });
    };
    TestFgui._inst = null;
    return TestFgui;
}();
var TestFont = function () {
    function TestFont() {}
    Object.defineProperty(TestFont, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestFont();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestFont.prototype.run = function () {
        console.log("TestFont..");
    };
    TestFont.prototype.test1 = function () {};
    TestFont._inst = null;
    return TestFont;
}();
var TestJsb = function () {
    function TestJsb() {}
    Object.defineProperty(TestJsb, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestJsb();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestJsb.prototype.run = function () {
        console.log("TestJsb..");
        this.test4();
    };
    TestJsb.prototype.test1 = function () {
        if (typeof jsb === 'undefined') return;
        var ns = window["ns"];
        if (typeof ns !== 'undefined' && ns.TestJsb) {
            var jsbTestObj = new ns.TestJsb();
            console.log('jsbTestObj is ', jsbTestObj);
            jsbTestObj.console("hello my baby");
            console.log('name is ', jsbTestObj.name);
            jsbTestObj.name = "lck";
            console.log('After set name,name is ', jsbTestObj.name);
            console.log('age is ', jsbTestObj.age);
            console.log('id is ', jsbTestObj.id);
            if (ns.TestJsb.goHome) {
                ns.TestJsb.goHome();
            }
            if (ns.TestJsb.age) {
                console.log(ns.TestJsb.age);
            }
        } else {
            console.log('testJsb is not founded');
            console.log('ns is ', ns);
        }
    };
    TestJsb.prototype.test2 = function () {
        if (Core.DeviceUtils.isNative()) cc.loader.loadRes('card_m/204', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var rootNode = cc.find("Canvas/Root");
            var sprite = rootNode.addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
    };
    TestJsb.prototype.test3 = function () {
        var img = new Image();
        img.src = "https://fshunj.oss-cn-guangzhou.aliyuncs.com/MiniGameRes/LatestVer/res/raw-assets/19/19129252-4633-4b80-8afc-1e7a41add2a9.png";
        img.onload = function (info) {
            console.log("info is ", info);
        };
    };
    TestJsb.prototype.test4 = function () {
        cc.loader.loadRes('card_m/204', cc.SpriteFrame, function (err, spriteFrame) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            var node = new cc.Node("newNode");
            cc.find("Canvas").addChild(node);
            var sprite = node.addComponent(cc.Sprite);
            sprite.spriteFrame = spriteFrame;
        });
    };
    TestJsb._inst = null;
    return TestJsb;
}();
var TestPromise = function () {
    function TestPromise() {}
    Object.defineProperty(TestPromise, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestPromise();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestPromise.prototype.run = function () {
        console.log("TestPromise..");
        this.test7();
    };
    TestPromise.prototype.test1 = function () {
        console.log("--------2.1 Promise基本用法-----------");
        var resultPromise1 = new Promise(function (resolve, reject) {
            resolve("成功了");
        });
        resultPromise1.then(function (res) {
            return console.log(res);
        });
        var resultPromise2 = new Promise(function (resolve, reject) {
            reject("失败了");
        });
        resultPromise2.then(null, function (err) {
            return console.log(err);
        });
        resultPromise2.then(null, null).catch(function (err) {
            return console.log(err);
        });
    };
    TestPromise.prototype.test2 = function () {
        var resultPromise1 = new Promise(function (resolve, reject) {
            while (1) {
                console.log("ff");
            }
        });
    };
    TestPromise.prototype.test3 = function () {
        var resultPromise1 = new Promise(function (resolve, reject) {
            console.log("resultPromise1 completed!");
        });
        resultPromise1.then(function (res) {
            return console.log("then ourput:" + res);
        });
        setInterval(function () {
            console.log("resultPromise1--", resultPromise1);
        }, 10);
    };
    TestPromise.prototype.test4 = function () {
        console.log("----------3. Promise的三种状态----------");
        new Promise(function (resolve, reject) {
            console.log("------------------------");
            resolve(11);
            reject(22);
        }).then(function (res) {
            console.log(res);
        }).catch(function (err) {
            console.log(err);
        });
    };
    TestPromise.prototype.test5 = function () {
        console.log("-------------- 4.2 传入Promise------------------");
        var promiseResult = new Promise(function (resolve, reject) {
            resolve(new Promise(function (resolve2, reject2) {
                reject2("ypf2");
            }));
        });
        promiseResult.then(null, function (err) {
            return console.log(err);
        });
    };
    TestPromise.prototype.test6 = function () {
        console.log("------4.3 传入对象，且对象有实现then方法-----------");
        var promiseResult = new Promise(function (resolve, reject) {
            resolve({
                then: function then(resolve2, reject2) {
                    reject2("ypf3");
                }
            });
        });
        promiseResult.then(null, function (err) {
            return console.log(err);
        });
    };
    TestPromise.prototype.test7 = function () {
        var p1 = new Promise(function (resolve, reject) {
            reject("PromiseError");
        });
        p1.then(function (res) {
            console.log(res);
            return 2;
        }).then(function (res) {
            console.log(res);
            return 3;
        }).then(function (res) {
            console.log(res);
            return 4;
        }).catch(function (err) {
            console.log("err--", err);
        });
    };
    TestPromise._inst = null;
    return TestPromise;
}();
var TestShiPie = function () {
    function TestShiPie() {}
    Object.defineProperty(TestShiPie, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestShiPie();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestShiPie.prototype.run = function () {
        console.log("TestShiPei..");
        var buttonNode = cc.find("Canvas/btn");
        buttonNode.on(cc.Node.EventType.TOUCH_END, function () {
            cc.game.restart();
        });
    };
    TestShiPie.prototype.test1 = function () {};
    TestShiPie._inst = null;
    return TestShiPie;
}();
var TestTouch = function () {
    function TestTouch() {}
    Object.defineProperty(TestTouch, "inst", {
        get: function get() {
            if (this._inst == null) {
                this._inst = new TestTouch();
            }
            return this._inst;
        },
        enumerable: false,
        configurable: true
    });
    TestTouch.prototype.run = function () {
        console.log("TestTouch..");
        this.testTouch2();
    };
    TestTouch.prototype.testTouch = function () {
        var parent = cc.find("Canvas/parent");
        var child = cc.find("Canvas/parent/child");
        var canvas = cc.find("Canvas");
        var node = parent;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[Parent]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Parent]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Parent]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Parent]touchCancel:', event, delta);
        }.bind(node));
        node = child;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[Child]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Child]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Child]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[Child]touchCancel:', event, delta);
        }.bind(node));
        node = canvas;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[canvas]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchCancel:', event, delta);
        }.bind(node));
    };
    TestTouch.prototype.testTouch2 = function () {
        var broRed = cc.find("Canvas/broRed");
        var broGreen = cc.find("Canvas/broGreen");
        var canvas = cc.find("Canvas");
        var node = broRed;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[broRed]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broRed]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broRed]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broRed]touchCancel:', event, delta);
        }.bind(node));
        node = broGreen;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[broGreen]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broGreen]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broGreen]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[broGreen]touchCancel:', event, delta);
        }.bind(node));
        node = canvas;
        node.on(cc.Node.EventType.TOUCH_START, function (event) {
            console.log('[canvas]touchStart:', event);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchMove:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_END, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchEnd:', event, delta);
        }.bind(node));
        node.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var delta = event.touch.getDelta();
            console.log('[canvas]touchCancel:', event, delta);
        }.bind(node));
    };
    TestTouch._inst = null;
    return TestTouch;
}();
var UI;
(function (UI) {
    var CloseBg = function (_super) {
        __extends(CloseBg, _super);
        function CloseBg() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._callback = null;
            return _this;
        }
        Object.defineProperty(CloseBg.prototype, "triggerClose", {
            get: function get() {
                return this._triggerClose;
            },
            set: function set(val) {
                this._triggerClose = val;
            },
            enumerable: false,
            configurable: true
        });
        ;
        ;
        CloseBg.prototype.onConstruct = function () {
            _super.prototype.onConstruct.call(this);
            this.onClick(this._onClick, this);
        };
        CloseBg.prototype._getWindowParent = function () {
            var parent = this.parent;
            if (parent instanceof fgui.Window) {
                return parent;
            } else {
                return parent._parent;
            }
        };
        CloseBg.prototype._onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var parent_1, view;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._callback) return [3, 1];
                            this._callback();
                            return [3, 3];
                        case 1:
                            parent_1 = this._getWindowParent();
                            if (!(parent_1 && this._triggerClose)) return [3, 3];
                            view = parent_1.asCom;
                            if (!view) return [3, 3];
                            return [4, Core.ViewManager.inst.close(view.name)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            return [2];
                    }
                });
            });
        };
        CloseBg.prototype.registerOtherClickMethod = function (callback) {
            this._callback = callback;
        };
        CloseBg.prototype.unregisterOtherClickMethod = function () {
            this._callback = null;
        };
        CloseBg.prototype.setup_afterAdd = function (buffer, beginPos) {
            if (this.data) {
                var str = this.data.toString();
                this._triggerClose = str == "true" ? true : false;
            }
            _super.prototype.setup_afterAdd.call(this, buffer, beginPos);
            this.addRelation(this.parent, fgui.RelationType.Center_Center);
            this.addRelation(this.parent, fgui.RelationType.Middle_Middle);
        };
        CloseBg.prototype.dispose = function () {
            if (this._callback) {
                this._callback = null;
            }
            _super.prototype.dispose.call(this);
        };
        return CloseBg;
    }(fgui.GComponent);
    UI.CloseBg = CloseBg;
})(UI || (UI = {}));
var Core;
(function (Core) {
    var BaseWindow = function (_super) {
        __extends(BaseWindow, _super);
        function BaseWindow() {
            var _this = _super.call(this) || this;
            _this._concertBackKey = true;
            _this._closeOnViewOpen = true;
            _this._needGaussMaskWhenModal = true;
            _this._gaussMaskBrightness = -1;
            _this.forceCloseFlag = false;
            _this.__closeBg = null;
            _this._viewCommon = new Core.ViewCommon(_this);
            return _this;
        }
        BaseWindow.prototype.enableTouchClose = function () {
            if (!this.__closeBg && !this.contentPane.getChild("closeBg")) {
                this.__closeBg = fgui.UIPackage.createObject("common", "closeBg", UI.CloseBg).asCom;
                var idx = 0;
                if (this.contentPane.getChild("bg")) {
                    idx = 1;
                }
                this.contentPane.addChildAt(this.__closeBg, idx);
                this.__closeBg.triggerClose = true;
                this.adjust(this.__closeBg);
            }
        };
        BaseWindow.prototype.handleBackKey = function () {
            var backBtnChild = null;
            if (this.contentPane) {
                backBtnChild = this.contentPane.getChild("closeBtn");
                if (!backBtnChild) {
                    backBtnChild = this.contentPane.getChild("backBtn");
                }
            } else {
                backBtnChild = this.getChild("closeBtn");
                if (!backBtnChild) {
                    backBtnChild = this.getChild("backBtn");
                }
            }
            if (backBtnChild) {
                backBtnChild.asButton.fireClick();
                return true;
            } else {
                return false;
            }
        };
        Object.defineProperty(BaseWindow.prototype, "isConcernBackKey", {
            get: function get() {
                return this._concertBackKey;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseWindow.prototype, "closeOnViewOpen", {
            get: function get() {
                return this._closeOnViewOpen;
            },
            set: function set(b) {
                this._closeOnViewOpen = b;
            },
            enumerable: false,
            configurable: true
        });
        BaseWindow.prototype.setVisible = function (flag) {
            this.hidden = !flag;
        };
        BaseWindow.prototype.adjust = function (display, adjustType) {
            if (adjustType === void 0) {
                adjustType = Core.AdjustType.EXACT_FIT;
            }
            if (adjustType == Core.AdjustType.EXCEPT_MARGIN) {
                this._viewCommon.adjust(display, Core.AdjustType.EXACT_FIT);
                display.height -= window.support.topMargin;
            } else {
                this._viewCommon.adjust(display, adjustType);
            }
        };
        BaseWindow.prototype.isInit = function () {
            return this._isInit;
        };
        BaseWindow.prototype.isShow = function () {
            return this.parent != null && this.visible && !this.hidden;
        };
        BaseWindow.prototype.addToParent = function () {};
        BaseWindow.prototype.removeFromParent = function () {};
        BaseWindow.prototype.battleChangeLayer = function () {};
        BaseWindow.prototype.toMapLayer = function () {
            this._myParent = Core.LayerManager.inst.mapLayer;
        };
        BaseWindow.prototype.toTopLayer = function () {
            this._myParent = Core.LayerManager.inst.topLayer;
        };
        BaseWindow.prototype.toMaskLayer = function () {
            this._myParent = Core.LayerManager.inst.maskLayer;
        };
        BaseWindow.prototype.toMainLayer = function () {
            this._myParent = Core.LayerManager.inst.mainLayer;
        };
        BaseWindow.prototype.toWindowLayer = function () {
            this._myParent = Core.LayerManager.inst.windowLayer;
        };
        BaseWindow.prototype.initUI = function () {
            this._isInit = true;
            Core.EventCenter.inst.addEventListener(GameEvent.OpenView, this._onViewOpen, this);
            var content = null;
            if (this.contentPane) {
                content = this.contentPane;
            } else {
                content = this;
            }
            var closeBgCom = content.getChild("closeBg");
            if (closeBgCom && closeBgCom instanceof UI.CloseBg) {
                this.adjust(closeBgCom);
            }
        };
        BaseWindow.prototype.open = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this._myParent) {
                        this._myParent.showWindow(this);
                    } else {
                        Core.LayerManager.inst.windowLayer.showWindow(this);
                    }
                    return [2];
                });
            });
        };
        BaseWindow.prototype.close = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this._myParent) {
                        this._myParent.hideWindow(this, this.destroyWhileClose());
                    } else {
                        Core.LayerManager.inst.windowLayer.hideWindow(this, this.destroyWhileClose());
                    }
                    if (this.__closeBg) {
                        this.__closeBg.removeFromParent();
                        this.__closeBg.dispose();
                    }
                    return [2];
                });
            });
        };
        BaseWindow.prototype.requestFocus = function () {
            _super.prototype.requestFocus.call(this);
        };
        BaseWindow.prototype.hide = function (remove) {
            if (remove === void 0) {
                remove = true;
            }
            _super.prototype.hide.call(this, remove);
        };
        BaseWindow.prototype.destroy = function () {
            this.dispose();
        };
        BaseWindow.prototype.dispose = function () {
            Core.EventCenter.inst.removeEventListener(GameEvent.OpenView, this._onViewOpen, this);
            this._viewCommon.destroy();
            _super.prototype.dispose.call(this);
        };
        BaseWindow.prototype.getNode = function (nodeName) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this._viewCommon.getNode(nodeName)];
                });
            });
        };
        BaseWindow.prototype.destroyWhileClose = function () {
            return true;
        };
        BaseWindow.prototype._onViewOpen = function (evt) {
            return __awaiter(this, void 0, void 0, function () {
                var name;
                return __generator(this, function (_a) {
                    name = evt.data.name;
                    return [2];
                });
            });
        };
        return BaseWindow;
    }(fgui.Window);
    Core.BaseWindow = BaseWindow;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var AdjustType;
    (function (AdjustType) {
        AdjustType[AdjustType["NO_BORDER"] = 0] = "NO_BORDER";
        AdjustType[AdjustType["EXACT_FIT"] = 1] = "EXACT_FIT";
        AdjustType[AdjustType["EXCEPT_MARGIN"] = 2] = "EXCEPT_MARGIN";
    })(AdjustType = Core.AdjustType || (Core.AdjustType = {}));
})(Core || (Core = {}));
var Core;
(function (Core) {
    var WindowRoot = function (_super) {
        __extends(WindowRoot, _super);
        function WindowRoot() {
            var _this = _super.call(this) || this;
            _this._maxSiblingIndex = 9999;
            _this._windowStack = [];
            _this._popups = new Collection.Dictionary();
            _this._modalBg = new fgui.GGraph();
            _this._modalBg.setSize(_this.width, _this.height);
            _this._modalBg.drawRect(0, cc.Color.TRANSPARENT, fgui.UIConfig.modalLayerColor);
            _this._modalBg.addRelation(_this, fgui.RelationType.Size);
            _this.on(fgui.Event.TOUCH_BEGIN, _this._tryClosePopup, _this);
            return _this;
        }
        WindowRoot.prototype.showWindow = function (win) {
            var modal = win.modal;
            if (modal) {
                if (this._modalBg.parent == null) {
                    this.addChild(this._modalBg);
                }
                this._modalBg.visible = true;
                this._modalBg.node.setSiblingIndex(this._maxSiblingIndex - 1);
            }
            this.addChild(win);
            win.node.setSiblingIndex(this._maxSiblingIndex);
            this._windowStack.push(win);
        };
        WindowRoot.prototype.showPopup = function (popup, target, downward) {
            this._popups.setValue(popup.hashIdx, true);
            if (!(popup instanceof Core.BaseWindow)) {
                this.addChild(popup);
                this._windowStack.push(popup);
                popup.node.setSiblingIndex(this._maxSiblingIndex);
            }
        };
        WindowRoot.prototype.hideWindow = function (win) {
            this._hidePopup(win);
        };
        WindowRoot.prototype._tryClosePopup = function () {
            if (this._windowStack.length <= 0) return;
            var tar = this._windowStack[this._windowStack.length - 1];
            if (this._popups.containsKey(tar.hashIdx)) {
                this._hidePopup(tar);
                this._popups.remove(tar.hashIdx);
            }
        };
        WindowRoot.prototype._hidePopup = function (popup) {
            this._removePopup(popup);
            var cnt = this._windowStack.length;
            var hasModal = false;
            var tar = null;
            for (var i = cnt - 1; i >= 0; --i) {
                var w = this._windowStack[i];
                if (w instanceof fgui.Window && w.modal) {
                    tar = w;
                    hasModal = true;
                    break;
                }
            }
            if (!hasModal) {
                this._modalBg.visible = false;
            } else {
                if (tar) {
                    if (tar == this._windowStack[cnt - 1]) {
                        this._modalBg.node.setSiblingIndex(this._maxSiblingIndex - 1);
                        tar.node.setSiblingIndex(this._maxSiblingIndex);
                    } else {
                        this._modalBg.node.setSiblingIndex(tar.node.getSiblingIndex() - 1);
                        tar.node.setSiblingIndex(tar.node.getSiblingIndex());
                    }
                }
                this._modalBg.visible = true;
            }
        };
        WindowRoot.prototype._removePopup = function (popup) {
            this.removeChild(popup);
            var last = this._windowStack.pop();
            if (popup.hashIdx != last.hashIdx) {
                this._windowStack.push(last);
                var idx = -1;
                var cnt = this._windowStack.length;
                for (var i = 0; i < cnt; ++i) {
                    if (popup.hashIdx == this._windowStack[i].hashIdx) {
                        idx = i;
                        break;
                    }
                }
                if (idx >= 0) {
                    this._windowStack.splice(idx, 1);
                }
            }
        };
        return WindowRoot;
    }(fgui.GRoot);
    Core.WindowRoot = WindowRoot;
    var LayerManager = function () {
        function LayerManager() {
            var stage = cc.director.getScene();
            this._mapLayer = new fgui.GRoot();
            this._mapLayer.node.name = this._mapLayer.name = "mapLayer";
            this._mainLayer = fgui.GRoot.inst;
            this._mainLayer.node.name = this._mainLayer.name = "mainLayer";
            this._windowLayer = new fgui.GRoot();
            this._windowLayer.node.name = this._windowLayer.name = "windowLayer";
            this._maskLayer = new fgui.GRoot();
            this._maskLayer.node.name = this._maskLayer.name = "maskLayer";
            this._topLayer = new fgui.GRoot();
            this._topLayer.node.name = this._topLayer.name = "topLayer";
            if (LayerManager._designWidth && LayerManager._designHeight) {
                this._mapLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                this._mainLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                this._windowLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                this._maskLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                this._topLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
            }
            this._windowLayer.node.parent = stage;
            this._maskLayer.node.parent = stage;
            this._topLayer.node.parent = stage;
            this._mapLayer.node.parent = stage;
            this._mapLayer.node.setSiblingIndex(1);
            this._mainLayer.node.setSiblingIndex(2);
            this._windowLayer.node.setSiblingIndex(3);
            this._topLayer.node.setSiblingIndex(4);
            this._maskLayer.node.setSiblingIndex(5);
            this._topLayer.modalLayer.drawRect(0, cc.Color.TRANSPARENT, new cc.Color(0x0, 0x0, 0x0, 0x77));
            this._layers = [this._mapLayer, this._mainLayer, this._windowLayer, this._topLayer, this._maskLayer];
        }
        Object.defineProperty(LayerManager, "inst", {
            get: function get() {
                if (!LayerManager._inst) {
                    LayerManager._inst = new LayerManager();
                }
                return LayerManager._inst;
            },
            enumerable: false,
            configurable: true
        });
        LayerManager.setDesignSize = function (width, height) {
            LayerManager._designWidth = width;
            LayerManager._designHeight = height;
            if (LayerManager._inst) {
                LayerManager._inst._mapLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                LayerManager._inst._mainLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                LayerManager._inst._windowLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                LayerManager._inst._maskLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
                LayerManager._inst._topLayer.setDesignSize(LayerManager._designWidth, LayerManager._designHeight);
            }
        };
        LayerManager.prototype.destroyAllLayer = function () {
            this.mapLayer.dispose();
            this.mainLayer.dispose();
            this.windowLayer.dispose();
            this.topLayer.dispose();
            this.maskLayer.dispose();
            LayerManager._inst = null;
        };
        Object.defineProperty(LayerManager.prototype, "mapLayer", {
            get: function get() {
                return this._mapLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerManager.prototype, "mainLayer", {
            get: function get() {
                return this._mainLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerManager.prototype, "windowLayer", {
            get: function get() {
                return this._windowLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerManager.prototype, "maskLayer", {
            get: function get() {
                return this._maskLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerManager.prototype, "topLayer", {
            get: function get() {
                return this._topLayer;
            },
            enumerable: false,
            configurable: true
        });
        LayerManager.prototype.getTouchFromTopestLayer = function (touchId) {
            return Core.LayerManager.inst._layers[this._layers.length - 1].getTouchPosition(touchId);
        };
        LayerManager.prototype.setTouchbleFromTopest = function (b) {
            Core.LayerManager.inst._layers[this._layers.length - 1].touchable = b;
        };
        LayerManager.prototype.visibleMainLayerChildren = function (b, except) {
            this._mainLayer._children.forEach(function (c) {
                if (!except || except.indexOf(c) < 0) {
                    c.visible = b;
                }
            });
        };
        return LayerManager;
    }();
    Core.LayerManager = LayerManager;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var ViewCommon = function () {
        function ViewCommon(view) {
            this._view = view;
        }
        ViewCommon.prototype.adjust = function (display, adjustType) {
            if (adjustType === void 0) {
                adjustType = Core.AdjustType.EXACT_FIT;
            }
            if (Core.DeviceUtils.isMiniGame()) {
                this._doAdjust(display, adjustType);
                return;
            }
            if (!this._adjustObjs) {
                this._adjustObjs = new Array();
                fgui.GRoot.inst.node.on("root-change-size", this._onResize, this);
            }
            this._adjustObjs.push([display, adjustType]);
            this._doAdjust(display, adjustType);
        };
        ViewCommon.prototype._onResize = function () {
            var _this = this;
            this._adjustObjs.forEach(function (objArr) {
                _this._doAdjust(objArr[0], objArr[1]);
            });
        };
        ViewCommon.prototype._doAdjust = function (display, adjustType) {
            if (adjustType === void 0) {
                adjustType = Core.AdjustType.EXACT_FIT;
            }
            var uiRoot = fgui.GRoot.inst;
            var rootWidth = uiRoot.getDesignViewWidth();
            var rootHeight = uiRoot.getDesignViewHeight();
            if (adjustType == Core.AdjustType.NO_BORDER) {
                var scaleX = rootWidth / this._view.width;
                var scaleY = rootHeight / this._view.height;
                var scale = scaleX > scaleY ? scaleX : scaleY;
                display.width = display.initWidth * scale;
                display.height = display.initHeight * scale;
            } else {
                var adjustContext = void 0;
                if (display instanceof fgui.GComponent) {
                    adjustContext = display.getChild("adjustContext");
                }
                display.width = rootWidth;
                display.height = rootHeight;
                if (adjustContext) {
                    var scaleX = rootWidth / this._view.width;
                    var scaleY = rootHeight / this._view.height;
                    var scale = scaleX > scaleY ? scaleX : scaleY;
                    adjustContext.width = adjustContext.initWidth * scale;
                    adjustContext.height = adjustContext.initHeight * scale;
                }
            }
            console.log(display.width + "," + window.support.topMargin);
            display.x = this._view.width / 2 - display.width / 2;
            display.y = this._view.height / 2 - display.height / 2;
            this._view.y = -display.y;
        };
        ViewCommon.prototype.destroy = function () {
            if (this._adjustObjs) {
                fgui.GRoot.inst.node.off("root-change-size", this._onResize, this);
                this._adjustObjs = null;
            }
            this._view = null;
        };
        ViewCommon.prototype.getSubNode = function (parent, nodeName, childs) {
            var node = parent.getChild(nodeName);
            if (node) {
                return node;
            }
            var childAmount = parent.numChildren;
            for (var i = 0; i < childAmount; i++) {
                var c = parent.getChildAt(i);
                if (!c) {
                    break;
                }
                if (c instanceof fgui.GComponent) {
                    childs.push(c);
                }
            }
            return null;
        };
        ViewCommon.prototype.getNode = function (nodeName) {
            var childs = [];
            var c = this.getSubNode(this._view, nodeName, childs);
            if (c) {
                return c;
            }
            for (var i = 0; i < childs.length; i++) {
                c = this.getSubNode(childs[i], nodeName, childs);
                if (c) {
                    return c;
                }
            }
            return null;
        };
        return ViewCommon;
    }();
    Core.ViewCommon = ViewCommon;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var UIConstructor = function () {
        function UIConstructor(func) {
            this.__constructor = func;
        }
        UIConstructor.prototype.call = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4, this.__constructor()];
                        case 1:
                            return [2, _a.sent()];
                    }
                });
            });
        };
        return UIConstructor;
    }();
    Core.UIConstructor = UIConstructor;
    var ViewManager = function () {
        function ViewManager() {
            this._views = new Collection.Dictionary();
            this._opens = new Collection.Set();
            this._opening = new Collection.Dictionary();
            this._closing = new Collection.Dictionary();
            this._viewConstructors = new Collection.Dictionary();
            this._viewPreload = new Collection.Dictionary();
            this._registerViews = [];
            this._viewStack = [];
        }
        ViewManager.prototype.handleBackKey = function () {
            if (this._viewStack.length > 0) {
                var view = this._viewStack[this._viewStack.length - 1];
                if (view.isShow()) {
                    return view.handleBackKey();
                } else {
                    this._viewStack.pop();
                    return false;
                }
            } else {
                return false;
            }
        };
        Object.defineProperty(ViewManager, "inst", {
            get: function get() {
                if (!ViewManager._inst) {
                    ViewManager._inst = new ViewManager();
                }
                return ViewManager._inst;
            },
            enumerable: false,
            configurable: true
        });
        ViewManager.prototype.register = function (name, view) {
            if (view == null) {
                console.log("UI_" + name + " is null!");
                return;
            }
            if (this._views.getValue(name)) {
                console.log("UI_" + name + " is registered!");
                return;
            }
            view.name = name;
            this._views.setValue(name, view);
        };
        ViewManager.prototype.unregister = function (name) {
            this._views.remove(name);
        };
        ViewManager.prototype.registerConstructor = function (name, func, preload) {
            if (preload === void 0) {
                preload = null;
            }
            if (this._viewConstructors.containsKey(name)) {
                this._viewConstructors.remove(name);
            }
            if (this._viewPreload.containsKey(name)) {
                this._viewPreload.remove(name);
            }
            this._viewConstructors.setValue(name, new UIConstructor(func));
            this._viewPreload.setValue(name, preload);
            this._registerViews.push(name);
        };
        ViewManager.prototype.registerView = function (name, func) {
            this.registerConstructor(name, func);
        };
        ViewManager.prototype.destroy = function (name) {
            var view = this.getView(name);
            if (view) {
                console.log("destroy view ", name);
                this.unregister(name);
                view.destroy();
                view = null;
            }
        };
        ViewManager.prototype.createAllView = function () {
            var _this = this;
            this._registerViews.forEach(function (value, index, arr) {
                _this.tryCreateView(value);
            });
        };
        ViewManager.prototype.tryCreateView = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var view, constructor, preload, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this._views.getValue(name)) return [2];
                            view = null;
                            constructor = this._viewConstructors.getValue(name);
                            preload = this._viewPreload.getValue(name);
                            if (!(constructor == null)) return [3, 1];
                            console.log("UI_" + name + " not exist");
                            return [2];
                        case 1:
                            if (!preload) return [3, 3];
                            return [4, preload()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5,, 6]);
                            return [4, constructor.call()];
                        case 4:
                            view = _a.sent();
                            view.setVisible(false);
                            view.initUI();
                            this.register(name, view);
                            return [3, 6];
                        case 5:
                            e_1 = _a.sent();
                            console.error("create view error", name, e_1, e_1.name, e_1.message);
                            return [3, 6];
                        case 6:
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.open = function (name) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var view, openPromise, openPromise_1, openPromise_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            console.log("open view", name);
                            return [4, this.tryCreateView(name)];
                        case 1:
                            _a.sent();
                            view = this.getView(name);
                            if (view == null) return [2];
                            openPromise = this._opening.getValue(name);
                            if (!openPromise) return [3, 3];
                            return [4, openPromise];
                        case 2:
                            _a.sent();
                            return [2];
                        case 3:
                            view.setVisible(true);
                            view.addToParent();
                            if (view.isConcernBackKey) {
                                this._viewStack.push(view);
                            }
                            if (!view.isInit()) return [3, 5];
                            openPromise_1 = view.open.apply(view, param);
                            this._opening.setValue(name, openPromise_1);
                            return [4, openPromise_1];
                        case 4:
                            _a.sent();
                            this._opening.remove(name);
                            return [3, 7];
                        case 5:
                            view.initUI();
                            openPromise_2 = view.open.apply(view, param);
                            this._opening.setValue(name, openPromise_2);
                            return [4, openPromise_2];
                        case 6:
                            _a.sent();
                            this._opening.remove(name);
                            _a.label = 7;
                        case 7:
                            this._opens.add(name);
                            Core.EventCenter.inst.dispatchEventWith(Core.Event.OpenViewEvt, false, name);
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.openPopup = function (name) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var view, openPromise, wnd, openPromise_3, openPromise_4, x, y;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4, this.tryCreateView(name)];
                        case 1:
                            _a.sent();
                            view = this.getView(name);
                            if (view == null) return [2];
                            openPromise = this._opening.getValue(name);
                            if (!openPromise) return [3, 3];
                            return [4, openPromise];
                        case 2:
                            _a.sent();
                            return [2];
                        case 3:
                            view.setVisible(true);
                            if (!(view instanceof Core.BaseWindow)) return [3, 8];
                            wnd = view;
                            if (!wnd.isInit()) return [3, 5];
                            openPromise_3 = wnd.open.apply(wnd, param);
                            this._opening.setValue(name, openPromise_3);
                            return [4, openPromise_3];
                        case 4:
                            _a.sent();
                            this._opening.remove(name);
                            return [3, 7];
                        case 5:
                            wnd.initUI();
                            openPromise_4 = wnd.open.apply(wnd, param);
                            this._opening.setValue(name, openPromise_4);
                            return [4, openPromise_4];
                        case 6:
                            _a.sent();
                            this._opening.remove(name);
                            _a.label = 7;
                        case 7:
                            x = wnd.x;
                            y = wnd.y;
                            Core.LayerManager.inst.windowLayer.showPopup(wnd);
                            wnd.x = x;
                            wnd.y = y;
                            this._opens.add(name);
                            Core.EventCenter.inst.dispatchEventWith(Core.Event.OpenViewEvt, false, name);
                            if (view.isConcernBackKey) {
                                this._viewStack.push(view);
                            }
                            return [3, 10];
                        case 8:
                            return [4, this.open.apply(this, __spreadArrays([name], param))];
                        case 9:
                            _a.sent();
                            _a.label = 10;
                        case 10:
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.close = function (name) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var view_1, closePromise, i, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4,, 5]);
                            if (!this.isShow(name)) {
                                return [2];
                            }
                            view_1 = this.getView(name);
                            if (view_1 == null) {
                                return [2];
                            }
                            closePromise = this._closing.getValue(name);
                            if (!closePromise) return [3, 2];
                            return [4, closePromise];
                        case 1:
                            _a.sent();
                            return [2];
                        case 2:
                            closePromise = new Promise(function (reslove) {
                                view_1.close.apply(view_1, param).then(function () {
                                    view_1.removeFromParent();
                                    reslove();
                                }).catch(function (e) {
                                    console.error("close view 1111 ", name, " ", e);
                                    view_1.removeFromParent();
                                    reslove();
                                });
                            });
                            this._closing.setValue(name, closePromise);
                            return [4, closePromise];
                        case 3:
                            _a.sent();
                            this._closing.remove(name);
                            this._opens.remove(name);
                            if (this._viewConstructors.containsKey(name) && view_1.destroyWhileClose()) {
                                this.destroy(name);
                            }
                            Core.EventCenter.inst.dispatchEventWith(Core.Event.CloseViewEvt, false, name);
                            if (view_1.isConcernBackKey) {
                                for (i = 0; i < this._viewStack.length; ++i) {
                                    if (this._viewStack[i] == view_1) {
                                        this._viewStack.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                            return [3, 5];
                        case 4:
                            e_2 = _a.sent();
                            console.error("close view ", name, " ", e_2);
                            return [3, 5];
                        case 5:
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.openView = function (view) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4, this.open.apply(this, __spreadArrays([view.name], param))];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.closeView = function (view) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4, this.close.apply(this, __spreadArrays([view.name], param))];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.getView = function (name) {
            return this._views.getValue(name);
        };
        ViewManager.prototype.getOpenedView = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var p, view;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            p = this._opening.getValue(name);
                            if (!p) return [3, 2];
                            return [4, p];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            view = this._views.getValue(name);
                            if (view && view.isShow()) {
                                return [2, view];
                            } else {
                                return [2, null];
                            }
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.closeAll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ps;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ps = [];
                            this._opens.toArray().forEach(function (name) {
                                var view = _this.getView(name);
                                if (view) {
                                    view.forceCloseFlag = true;
                                }
                                ps.push(_this.close(name));
                                view = _this.getView(name);
                                if (view) {
                                    view.forceCloseFlag = false;
                                }
                            });
                            return [4, Promise.all(ps)];
                        case 1:
                            _a.sent();
                            this._opens = new Collection.Set();
                            this._opening = new Collection.Dictionary();
                            this._closing = new Collection.Dictionary();
                            return [2];
                    }
                });
            });
        };
        ViewManager.prototype.isShow = function (name) {
            return this._opens.contains(name);
        };
        ViewManager.prototype.registerUIWnd = function (pkg, resName, cls) {
            var _this = this;
            var registerView = Core.ViewManager.inst.registerView.bind(Core.ViewManager.inst);
            var createObject = UI.createObjectAsync;
            registerView(resName, function () {
                return __awaiter(_this, void 0, void 0, function () {
                    var a, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                a = new cls();
                                _a = a;
                                return [4, createObject(pkg, resName)];
                            case 1:
                                _a.contentPane = _b.sent().asCom;
                                return [2, a];
                        }
                    });
                });
            });
        };
        ViewManager.prototype.unregisterUIWnd = function (pkg, resName, cls) {
            this.unregister(resName);
        };
        ViewManager.prototype.unregisterUIView = function (pkg, resName, cls) {
            this.unregister(resName);
        };
        ViewManager.prototype.registerUIView = function (pkg, resName, cls) {
            var _this = this;
            var registerView = Core.ViewManager.inst.registerView.bind(Core.ViewManager.inst);
            var createObject = UI.createObjectAsync;
            registerView(resName, function () {
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                return [4, createObject(pkg, resName, cls)];
                            case 1:
                                return [2, _a.sent()];
                        }
                    });
                });
            });
        };
        return ViewManager;
    }();
    Core.ViewManager = ViewManager;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var AlertPanel = function (_super) {
        __extends(AlertPanel, _super);
        function AlertPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlertPanel.prototype.onConstruct = function () {
            _super.prototype.onConstruct.call(this);
        };
        AlertPanel.prototype.getAcceptBtn = function () {
            return this.getChild("acceptBtn").asButton;
        };
        AlertPanel.prototype.getTitle = function () {
            return this.getChild("title").asRichTextField;
        };
        return AlertPanel;
    }(fgui.GComponent);
    Core.AlertPanel = AlertPanel;
    var ConfirmPanel = function (_super) {
        __extends(ConfirmPanel, _super);
        function ConfirmPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConfirmPanel.prototype.onConstruct = function () {
            _super.prototype.onConstruct.call(this);
        };
        ConfirmPanel.prototype.getAcceptBtn = function () {
            return this.getChild("acceptBtn").asButton;
        };
        ConfirmPanel.prototype.getCancelBtn = function () {
            return this.getChild("cancelBtn").asButton;
        };
        ConfirmPanel.prototype.getTitle = function () {
            return this.getChild("title").asRichTextField;
        };
        return ConfirmPanel;
    }(fgui.GComponent);
    Core.ConfirmPanel = ConfirmPanel;
    var PrivShowPanel = function (_super) {
        __extends(PrivShowPanel, _super);
        function PrivShowPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PrivShowPanel.prototype.onConstruct = function () {
            _super.prototype.onConstruct.call(this);
            this.touchable = false;
            this.y += window.support.topMargin;
            this._privList = this.getChild("privList").asList;
        };
        PrivShowPanel.prototype.getPrivList = function () {
            return this._privList;
        };
        return PrivShowPanel;
    }(fgui.GComponent);
    Core.PrivShowPanel = PrivShowPanel;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var EMovieClip = function (_super) {
        __extends(EMovieClip, _super);
        function EMovieClip(movieClip, makeNode3d) {
            var _this = _super.call(this) || this;
            _this._movieClip = movieClip;
            if (makeNode3d) {
                Utils.makeNode3DIfSupported(_this._movieClip.node);
            }
            _this._movieClip["$owner"] = _this;
            _this._movieClip.touchable = false;
            _this._movieClip.setPivot(0.5, 0.5, true);
            _this.width = _this._movieClip.width;
            _this.height = _this._movieClip.height;
            _this._movieClip.x = _this.width / 2;
            _this._movieClip.y = _this.height / 2;
            _this._movieClip.addRelation(_this, fgui.RelationType.Size);
            _this._movieClip.addRelation(_this, fgui.RelationType.Center_Center);
            _this._movieClip.addRelation(_this, fgui.RelationType.Middle_Middle);
            _this.setPivot(0.5, 0.5, true);
            _this._isTop = true;
            _this.addChild(_this._movieClip);
            return _this;
        }
        EMovieClip.prototype.resetHeigh = function () {
            var adjustHeight = this.height;
            this.height = 0;
            this.height = adjustHeight;
        };
        EMovieClip.prototype.destroy = function () {
            if (this._movieClip) {
                this._movieClip.dispose();
                this._movieClip = null;
            }
            this.dispose();
        };
        Object.defineProperty(EMovieClip.prototype, "totalFrames", {
            get: function get() {
                return this._movieClip.frameCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EMovieClip.prototype, "isTop", {
            get: function get() {
                return this._isTop;
            },
            enumerable: false,
            configurable: true
        });
        EMovieClip.prototype.gotoAndPlay = function (frame, playTimes) {
            if (typeof frame == "string") {
                frame = parseInt(frame);
            }
            frame = Math.max(0, frame - 1);
            playTimes = Math.max(0, playTimes);
            this._movieClip.setPlaySettings(frame, -1, playTimes);
            this._movieClip.playing = true;
        };
        EMovieClip.prototype.gotoAndStop = function (frame) {
            if (typeof frame == "string") {
                frame = parseInt(frame);
            }
            this._movieClip.frame = Math.max(0, frame - 1);
            this._movieClip.playing = false;
        };
        EMovieClip.prototype.stop = function () {
            this._movieClip.playing = false;
        };
        EMovieClip.prototype.once = function (type, listener, thisObject, useCapture, priority) {
            this._movieClip.once(type, listener, thisObject, useCapture);
        };
        EMovieClip.prototype.addFrameEvent = function (frameNum, name) {
            console.log("addFrameEvent ", frameNum, name);
            this._movieClip.addFrameEvent(Math.max(0, frameNum - 1), name);
        };
        return EMovieClip;
    }(fgui.GComponent);
    Core.EMovieClip = EMovieClip;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var ListItem = function () {
        function ListItem() {}
        ListItem.prototype.updatePosition = function () {
            var _this = this;
            if (!this.layers) {
                return;
            }
            this.layers.forEach(function (layer) {
                layer.object.setPosition(_this.x + layer.offsetx, _this.y + layer.offsety);
            });
        };
        ListItem.prototype.getNode = function () {
            return this.item.getNode();
        };
        ListItem.prototype.registerOnAddLayer = function (callback) {
            var _this = this;
            var self = this;
            this.item.registerOnAddLayer(function (layer) {
                _this.layers.push(layer);
                callback(layer, self);
            });
        };
        ListItem.prototype.dispose = function () {
            this.layers = [];
            this.item.dispose();
        };
        return ListItem;
    }();
    var LayerListView = function () {
        function LayerListView(list) {
            this._list = null;
            this._items = null;
            this._contentCom = null;
            this._addItems = null;
            this._delItems = null;
            this._list = list;
            this._meta = {
                xgap: list.columnGap,
                xcnt: list.columnCount,
                ygap: list.lineGap,
                ycnt: list.lineCount,
                gindex: 0
            };
            list.columnCount = 1;
            list.columnGap = 0;
            list.lineCount = 1;
            list.lineGap = 0;
            list.layout = fgui.ListLayoutType.SingleRow;
            this._items = [];
            this._addItems = [];
            this._delItems = [];
        }
        LayerListView.prototype.addItems = function (items) {
            return __awaiter(this, void 0, void 0, function () {
                var list, xgap, ygap, xcnt, size, startx, starty, zeroX, startItem, x, y, tempItems, layerCnt, self, t1, t2, i, t3, contentWidth, contentHeight, curItemCnt, curLineCnt, _items;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!items || items.length <= 0) {
                                return [2];
                            }
                            if (!this._list) {
                                return [2];
                            }
                            if (!this._contentCom) {
                                this._contentCom = new fgui.GComponent();
                                this._list.addChild(this._contentCom);
                            }
                            if (this._isAdding || this._addItems.length > 0) {
                                this._addItems.push(items);
                                return [2];
                            }
                            this._isAdding = true;
                            list = this._list;
                            xgap = this._meta.xgap;
                            ygap = this._meta.ygap;
                            xcnt = this._meta.xcnt;
                            size = items[0].getSize();
                            startx = (list.width - size.width * xcnt - xgap * (xcnt - 1)) / 2;
                            starty = 0;
                            zeroX = startx;
                            if (this._items.length > 0) {
                                startItem = this._items[this._items.length - 1];
                                startx = startItem.x + size.width + xgap;
                                starty = startItem.y;
                                if (startx + size.width >= list.width) {
                                    startx = zeroX;
                                    starty = starty + size.height + ygap;
                                }
                            }
                            x = startx;
                            y = starty;
                            tempItems = [];
                            layerCnt = items[0].layerCnt;
                            self = this;
                            t1 = new Date().getTime();
                            items.forEach(function (item) {
                                var listItem = new ListItem();
                                listItem.index = _this._meta.gindex++;
                                listItem.item = item;
                                listItem.x = x;
                                listItem.y = y;
                                listItem.layers = [];
                                listItem.registerOnAddLayer(self.onItemAddLayer.bind(_this));
                                tempItems.push(listItem);
                                x = x + size.width + xgap;
                                if (x + size.width >= list.width) {
                                    x = zeroX;
                                    y = y + size.height + ygap;
                                }
                            });
                            t2 = new Date().getTime();
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < layerCnt)) return [3, 4];
                            tempItems.forEach(function (listItem) {
                                var layer = listItem.item.getLayerByIndex(i);
                                if (layer) {
                                    listItem.layers.push(layer);
                                    if (self._contentCom) {
                                        self._contentCom.addChild(layer.object);
                                        layer.object.setPosition(listItem.x + layer.offsetx, listItem.y + layer.offsety);
                                    }
                                }
                            });
                            return [4, fgui.GTimers.inst.waitTime(1)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            ++i;
                            return [3, 1];
                        case 4:
                            ;
                            if (!self._contentCom) {
                                return [2];
                            }
                            this._items = this._items.concat(tempItems);
                            t3 = new Date().getTime();
                            console.log("------------- gen time: ", t2 - t1, ", add time: ", t3 - t2);
                            contentWidth = 0, contentHeight = 0;
                            curItemCnt = this._items.length;
                            if (curItemCnt >= xcnt) {
                                contentWidth = list.width;
                            } else {
                                contentWidth = curItemCnt * size.width + (curItemCnt - 1) * xgap;
                            }
                            curLineCnt = Math.ceil(curItemCnt / xcnt);
                            contentHeight = curLineCnt * size.height + (curLineCnt - 1) * ygap;
                            this._contentCom.setSize(contentWidth, contentHeight);
                            this._list.setBoundsChangedFlag();
                            items.forEach(function (item) {
                                item.refresh();
                            });
                            this._isAdding = false;
                            if (!(this._addItems.length > 0)) return [3, 6];
                            _items = this._addItems.shift();
                            return [4, this.addItems(_items)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6:
                            return [2];
                    }
                });
            });
        };
        LayerListView.prototype.delItem = function (item) {
            if (!this._items) {
                return;
            }
            if (!this._list) {
                return;
            }
            if (this._items.indexOf(item) < 0) {
                if (this._delItems.length > 0) {
                    var item_1 = this._delItems.shift();
                    this.delItem(item_1);
                }
                return;
            }
            if (this._isDeling || this._delItems.length > 0) {
                this._delItems.push(item);
                return;
            }
            this._isDeling = true;
            var index = this._items.length - 1;
            for (; index > item.index; index--) {
                var curItem = this._items[index];
                var frontItem = this._items[index - 1];
                curItem.index = frontItem.index;
                curItem.x = frontItem.x;
                curItem.y = frontItem.y;
                curItem.updatePosition();
            }
            this._items.splice(item.index, 1);
            var layers = item.layers;
            if (this._contentCom) {
                var i = layers.length - 1;
                for (; i >= 0; i--) {
                    var layer = layers[i];
                    if (layer) {
                        this._contentCom.removeChild(layer.object);
                    }
                }
            }
            item.dispose();
            item = null;
            this._contentCom.ensureBoundsCorrect();
            this._list.ensureBoundsCorrect();
            this._list.setBoundsChangedFlag();
            this._meta.gindex--;
            this._isDeling = false;
            if (this._delItems.length > 0) {
                var item_2 = this._delItems.shift();
                this.delItem(item_2);
            }
        };
        LayerListView.prototype.getItemAt = function (index) {
            return this._items[index];
        };
        Object.defineProperty(LayerListView.prototype, "numItems", {
            get: function get() {
                return this._items.length;
            },
            enumerable: false,
            configurable: true
        });
        LayerListView.prototype.onItemAddLayer = function (layer, item) {
            if (layer) {
                this._contentCom.addChild(layer.object);
                layer.object.setPosition(item.x + layer.offsetx, item.y + layer.offsety);
            }
        };
        LayerListView.prototype.clearAll = function () {
            if (this._items.length > 0) {
                this._items.forEach(function (item) {
                    item.dispose();
                });
            }
            this._items = [];
            this._list.removeChildren(0, -1, true);
            this._contentCom = null;
        };
        return LayerListView;
    }();
    Core.LayerListView = LayerListView;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var LongTouchComponet = function () {
        function LongTouchComponet(display, touchInterval) {
            if (touchInterval === void 0) {
                touchInterval = 500;
            }
            this._isTouching = false;
            this._display = display;
            this._touchInterval = touchInterval;
            this.enable = true;
        }
        Object.defineProperty(LongTouchComponet.prototype, "enable", {
            set: function set(val) {
                if (!this._display.node) {
                    return;
                }
                if (val) {
                    this._display.on(fgui.Event.TOUCH_BEGIN, this._onTouchStart, this);
                    this._display.on(fgui.Event.TOUCH_END, this._onTouchEnd, this);
                    this._display.on(fgui.Event.ROLL_OUT, this._onTouchCancel, this);
                } else {
                    this._display.off(fgui.Event.TOUCH_BEGIN, this._onTouchStart, this);
                    this._display.off(fgui.Event.TOUCH_END, this._onTouchEnd, this);
                    this._display.off(fgui.Event.ROLL_OUT, this._onTouchCancel, this);
                }
            },
            enumerable: false,
            configurable: true
        });
        LongTouchComponet.prototype._onTouchStart = function (evt) {
            console.log("LongTouchComponet._onTouchStart");
            if (this._isTouching) {
                return;
            }
            this._isTouching = true;
            if (this._isTouching) {
                fgui.GTimers.inst.add(this._touchInterval, 1, this._touchCallback, this, evt);
            }
        };
        LongTouchComponet.prototype._onTouchEnd = function () {
            console.log("LongTouchComponet._onTouchEnd");
            this._isTouching = false;
            fgui.GTimers.inst.remove(this._touchCallback, this);
        };
        LongTouchComponet.prototype._onTouchCancel = function () {
            console.log("LongTouchComponet._onTouchCancel");
            this._isTouching = false;
            fgui.GTimers.inst.remove(this._touchCallback, this);
        };
        LongTouchComponet.prototype._touchCallback = function (evt) {
            var _a;
            console.log("LongTouchComponet._touchCallback");
            if (this._isTouching) {
                if (this._longTouchCallback) {
                    (_a = this._longTouchCallback).apply.apply(_a, __spreadArrays([this._thisObj], this._callbackArgs));
                }
            } else {
                fgui.GTimers.inst.remove(this._touchCallback, this);
            }
        };
        LongTouchComponet.prototype.onLongTouch = function (callback, thisObj) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            this._longTouchCallback = callback;
            this._thisObj = thisObj;
            this._callbackArgs = args;
        };
        LongTouchComponet.prototype.removeListener = function (callback, thisObj) {
            if (this._longTouchCallback == callback && this._thisObj == thisObj) {
                this._longTouchCallback = null;
                this._thisObj = null;
                this._callbackArgs = [];
            }
        };
        return LongTouchComponet;
    }();
    Core.LongTouchComponet = LongTouchComponet;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var WaitPanel = function (_super) {
        __extends(WaitPanel, _super);
        function WaitPanel() {
            var _this = _super.call(this, Core.LayerManager.inst.maskLayer) || this;
            _this._myParent = Core.LayerManager.inst.maskLayer;
            return _this;
        }
        WaitPanel.prototype.initUI = function () {
            _super.prototype.initUI.call(this);
            this.adjust(this.getChild("bg"));
            this._waitImg = this.getChild("loadingCircle").asLoader;
            this._waitBg = this.getChild("loadingBg").asLoader;
            this._waitProg = this.getChild("loadingProg").asCom;
            if (this.getChild("hintText")) {
                this._hintText = this.getChild("hintText").asTextField;
            }
        };
        WaitPanel.prototype.open = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var delay;
                return __generator(this, function (_a) {
                    if (this.parent) {
                        return [2];
                    }
                    this.addToParent();
                    this._waitImg.visible = false;
                    this._waitBg.visible = false;
                    this._waitProg.visible = false;
                    delay = param[0] || 800;
                    if (this._hintText) {
                        this._hintText.visible = false;
                    }
                    fgui.GTimers.inst.add(delay, 1, this._rotationWaitImg, this);
                    fgui.GTimers.inst.add(delay + 100, 1, this._handleProgress, this);
                    return [2];
                });
            });
        };
        WaitPanel.prototype._rotationWaitImg = function () {
            this._waitImg.visible = true;
            this._waitBg.visible = true;
            this._waitProg.visible = true;
            if (this._hintText) {
                this._hintText.visible = true;
            }
            Core.EffectUtil.rotationEffect(this._waitImg, 1500);
        };
        WaitPanel.prototype._handleProgress = function () {
            var self = this;
            var minH = 0;
            var maxH = 74;
            var duration = 1500;
            var onComplete = function onComplete() {
                if (self.node.isValid && self.parent) {
                    self._waitProg.height = minH;
                    egret.Tween.get(self._waitProg).to({ height: maxH }, duration).call(onComplete, null);
                }
            };
            this._waitProg.height = minH;
            egret.Tween.get(this._waitProg).to({ height: maxH }, duration).call(onComplete, null);
        };
        WaitPanel.prototype.close = function () {
            var param = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                param[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    fgui.GTimers.inst.remove(this._rotationWaitImg, this);
                    Core.EffectUtil.removeRotationEffect(this._waitImg);
                    fgui.GTimers.inst.remove(this._handleProgress, this);
                    egret.Tween.removeTweens(this._waitProg);
                    if (this._hintText) {
                        this._hintText.text = "";
                    }
                    if (!this.parent) {
                        return [2];
                    }
                    this.parent.removeChild(this);
                    return [2];
                });
            });
        };
        WaitPanel.prototype.updateProgress = function (percent, msg) {
            if (this._hintText) {
                msg = msg || "加载中...";
                this._hintText.text = Core.StringUtils.format(msg + "{0}%", Math.ceil(percent * 100));
            }
        };
        return WaitPanel;
    }(Core.BaseView);
    Core.WaitPanel = WaitPanel;
})(Core || (Core = {}));

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=GameLogic.js.map
        